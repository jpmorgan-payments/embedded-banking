export const sampleCode = {
  "public/index.html": {
    content:
      '<!DOCTYPE html>\n<html lang="en">\n\n<head>\n\t<meta charset="utf-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">\n\t<meta name="theme-color" content="#000000">\n\t<!--\n      manifest.json provides metadata used when your web app is added to the\n      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/\n    -->\n\t<link rel="manifest" href="%PUBLIC_URL%/manifest.json">\n\t<link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">\n\t<!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n\t<title>React App</title>\n</head>\n\n<body>\n\t<noscript>\n\t\tYou need to enable JavaScript to run this app.\n\t</noscript>\n\t<div id="root"></div>\n\t<!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n</body>\n\n</html>',
  },
  "tsconfig.json": {
    content:
      '{\n    "include": [\n        "./src/**/*"\n    ],\n    "compilerOptions": {\n        "strict": true,\n        "esModuleInterop": true,\n        "lib": [\n            "dom",\n            "es2015"\n        ],\n        "jsx": "react-jsx"\n    }\n}',
  },
  "package.json": {
    content:
      '{\n  "name": "react-typescript",\n  "version": "1.0.0",\n  "description": "React and TypeScript example starter project",\n  "keywords": [\n    "typescript",\n    "react",\n    "starter"\n  ],\n  "main": "src/index.tsx",\n  "dependencies": {\n    "loader-utils": "3.2.1",\n    "react": "18.2.0",\n    "react-dom": "18.2.0",\n    "react-scripts": "5.0.1",\n    "@mantine/core": "7.6.2",\n    "@mantine/hooks": "7.6.2",\n    "@mantine/form": "7.6.2",\n    "axios": "1.6.8",\n    "@tanstack/react-query": "5.28.4"\n  },\n  "devDependencies": {\n    "@types/react": "18.2.38",\n    "@types/react-dom": "18.2.15",\n    "typescript": "4.4.4"\n  },\n  "scripts": {\n    "start": "react-scripts start",\n    "build": "react-scripts build",\n    "test": "react-scripts test --env=jsdom",\n    "eject": "react-scripts eject"\n  },\n  "browserslist": [\n    ">0.2%",\n    "not dead",\n    "not ie <= 11",\n    "not op_mini all"\n  ]\n}',
  },
  ".eslintrc.json": {
    content: '{\n  "parser": "@typescript-eslint/parser"\n}',
  },
  "index.tsx": {
    content:
      'import React from "react";\nimport ReactDOM from "react-dom/client";\nimport App from "./App";\n\nconst rootElement = document.getElementById("root")!;\nconst root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n',
  },
  "App.tsx": {
    content:
      '// Import styles of packages that you\'ve installed.\n// All packages except `@mantine/hooks` require styles imports\nimport "@mantine/core/styles.css";\nimport { AddLinkedAccount } from "./LinkedAccountForm/AddLinkedAccount.tsx";\nimport { QueryClientProvider, QueryClient } from "@tanstack/react-query";\nimport { MantineProvider } from "@mantine/core";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false, // Prevents refetching on window focus by default\n      // Add other default options here\n    },\n  },\n});\n\nexport default function App() {\n  return (\n    <MantineProvider>\n      <QueryClientProvider client={queryClient}>\n        <AddLinkedAccount clientId={"12312312"} partyId={"2000d000111"} />\n      </QueryClientProvider>\n    </MantineProvider>\n  );\n}\n',
  },
  "LinkedAccountForm/hooks/useCreateLinkedAccount.tsx": {
    content:
      'import { useMutation } from "@tanstack/react-query";\r\nimport axios from "axios";\r\n\r\nexport const useCreateLinkedAccount = () => {\r\n  return useMutation({\r\n    mutationFn: async (newAccount) => {\r\n      // Assuming `newAccount` contains the necessary data for creating a new linked account\r\n      const { data } = await axios.post(\r\n        "https://api-mock.payments.jpmorgan.com/tsapi/ef/v2/recipients",\r\n        newAccount\r\n      );\r\n      return data;\r\n    },\r\n  });\r\n};\r\n',
  },
  "LinkedAccountForm/MicrodepositForm.tsx": {
    content:
      'import { TextInput, Checkbox, Button, Group, Box } from "@mantine/core";\r\nimport { useForm } from "@mantine/form";\r\nimport { useLinkedAccounts } from "./useLinkedAccounts";\r\n\r\nexport function MicrodepositForm({ clientId, recipientId }) {\r\n  const createMicrodepositsMutation = useCreateMicrodeposits();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Invoke the mutation\r\n    createMicrodepositsMutation.mutate(form.values, {\r\n      onSuccess: (data) => {\r\n        // Handle success (e.g., show a success message, redirect, etc.)\r\n        console.log("Account created successfully:", data);\r\n      },\r\n      onError: (error) => {\r\n        // Handle error (e.g., show an error message)\r\n        console.error("Error creating account:", error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const form = useForm({\r\n    initialValues: {\r\n      microdepositValue1: 0,\r\n      microdepositValue2: 0,\r\n    },\r\n\r\n    validate: {\r\n      microdepositValue1: (value) =>\r\n        /^(0(\\.\\d{2})?|1\\.00)$/.test(value)\r\n          ? null\r\n          : "Invalid microdeposit number. Should be numeric value between 0.00 and 1.00",\r\n      microdepositValue2: (value) =>\r\n        /^(0(\\.\\d{2})?|1\\.00)$/.test(value)\r\n          ? null\r\n          : "Invalid microdeposit number. Should be numeric value between 0.00 and 1.00",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Box maw={340} mx="auto">\r\n      <form onSubmit={handleSubmit}>\r\n        <TextInput\r\n          withAsterisk\r\n          label="Microdeposit Value 1"\r\n          placeholder="123456789"\r\n          {...form.getInputProps("microdepositValue1")}\r\n        />\r\n        <TextInput\r\n          withAsterisk\r\n          label="Microdeposit Value 2"\r\n          placeholder="112233445566"\r\n          {...form.getInputProps("microdepositValue2")}\r\n        />\r\n        <Group justify="flex-end" mt="md">\r\n          <Button type="submit">Submit</Button>\r\n        </Group>\r\n      </form>\r\n    </Box>\r\n  );\r\n}\r\n',
  },
  "LinkedAccountForm/hooks/useCreateMicrodeposits.tsx": {
    content:
      'import { useMutation } from "@tanstack/react-query";\r\nimport axios from "axios";\r\n\r\nexport const useCreateMicrodeposits = ({ recipientId }) => {\r\n  return useMutation({\r\n    mutationFn: async (microdeposits) => {\r\n      const { data } = await axios.post(\r\n        `https://api-mock.payments.jpmorgan.com/tsapi/ef/v2/recipients/${recipientId}/verify-microdeposit`,\r\n        microdeposits\r\n      );\r\n      return data;\r\n    },\r\n  });\r\n};\r\n',
  },
  "LinkedAccountForm/hooks/useLinkedAccounts.ts": {
    content:
      'import { useQuery } from "@tanstack/react-query";\r\nimport axios from "axios";\r\n\r\n// Updated custom hook definition to match the new @tanstack/react-query v5 API\r\nexport const useLinkedAccounts = (clientId, partyId) => {\r\n  return useQuery({\r\n    queryKey: ["linkedAccounts", clientId, partyId],\r\n    queryFn: async () => {\r\n      const { data } = await axios.get(\r\n        `https://api-mock.payments.jpmorgan.com/tsapi/ef/v2/recipients`,\r\n        {\r\n          params: {\r\n            clientId: clientId,\r\n            type: "LINKED_ACCOUNT",\r\n          },\r\n        }\r\n      );\r\n      return data;\r\n    },\r\n    select: (data) => {\r\n      // Filter recipients to include only those with the matching partyId\r\n      const filteredRecipients = data.recipients.filter(\r\n        (recipient) => recipient.partyId === partyId\r\n      );\r\n      return { linkedAccount: filteredRecipients?.[0] };\r\n    },\r\n  });\r\n};\r\n',
  },
  "LinkedAccountForm/AddLinkedAccount.tsx": {
    content:
      'import { TextInput, Checkbox, Button, Group, Box, Alert } from "@mantine/core";\r\nimport { useForm } from "@mantine/form";\r\nimport { MicrodepositForm } from "./MicrodepositForm";\r\nimport { useLinkedAccounts } from "./hooks/useLinkedAccounts";\r\nimport { useCreateLinkedAccount } from "./hooks/useCreateLinkedAccount";\r\n\r\nexport function AddLinkedAccount({ clientId, partyId }) {\r\n  const {\r\n    data: linkedAccountResponse,\r\n    error: getLinkedAccountError,\r\n    isLoading: getLinkedAccountIsLoading,\r\n  } = useLinkedAccounts(clientId, partyId);\r\n\r\n  const linkedAccount = linkedAccountResponse?.linkedAccount;\r\n\r\n  const createLinkedAccountMutation = useCreateLinkedAccount();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(form.values);\r\n    // Invoke the mutation\r\n    createLinkedAccountMutation.mutate(form.values, {\r\n      onSuccess: (data) => {\r\n        // Handle success (e.g., show a success message, redirect, etc.)\r\n        console.log("Account created successfully:", data);\r\n      },\r\n      onError: (error) => {\r\n        // Handle error (e.g., show an error message)\r\n        console.error("Error creating account:", error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const form = useForm({\r\n    initialValues: {\r\n      routingNumber: "",\r\n      accountNumber: "",\r\n    },\r\n\r\n    validate: {\r\n      routingNumber: (value) =>\r\n        /^\\d{9}$/.test(value)\r\n          ? null\r\n          : "Invalid routing number. Only 9 digits are allowed",\r\n      accountNumber: (value) =>\r\n        /^\\d{4,17}$/.test(value)\r\n          ? null\r\n          : "Invalid account number. Only 4-17 digits are allowed",\r\n    },\r\n  });\r\n\r\n  if (getLinkedAccountIsLoading) return <div>Loading...</div>;\r\n  if (getLinkedAccountError)\r\n    return <div>An error occurred: {error.message}</div>;\r\n\r\n  if (linkedAccount === undefined)\r\n    return (\r\n      <Box maw={340} mx="auto" mt="xl">\r\n        <h1>Add a Linked Account Component</h1>\r\n        {createLinkedAccountMutation.isError && (\r\n          <Alert color="red">\r\n            {" "}\r\n            {createLinkedAccountMutation?.context?.[0]?.message}\r\n          </Alert>\r\n        )}\r\n        <form onSubmit={handleSubmit}>\r\n          <TextInput\r\n            withAsterisk\r\n            label="Routing Number"\r\n            placeholder="123456789"\r\n            {...form.getInputProps("routingNumber")}\r\n          />\r\n          <TextInput\r\n            withAsterisk\r\n            label="Account Number"\r\n            placeholder="112233445566"\r\n            {...form.getInputProps("accountNumber")}\r\n          />\r\n          <Group justify="flex-end" mt="md">\r\n            <Button type="submit">Submit</Button>\r\n          </Group>\r\n        </form>\r\n      </Box>\r\n    );\r\n\r\n  if (\r\n    linkedAccount !== undefined &&\r\n    linkedAccount.status === "MICRODEPOSITS_INITIATED"\r\n  )\r\n    return <MicrodepositForm />;\r\n}\r\n',
  },
};
