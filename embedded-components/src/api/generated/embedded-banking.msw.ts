/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Embedded Finance API
 * Embedded Finance services from J.P. Morgan
 * OpenAPI spec version: 0.9.88
 */
import { faker } from '@faker-js/faker';
import { delay, http, HttpResponse } from 'msw';

import {
  AccountCategory,
  AccountingType,
  AccountState,
  AccountType,
  AddressType,
  ClientStatus,
  DocumentMetadataKeyEnum,
  DocumentRequestStatus,
  DocumentType,
  DocumentTypeSmbdo,
  FeeType,
  OrganizationType,
  OriginatingTransactionType,
  PartyStatus,
  PartyType,
  PartyTypeSmbdo,
  PaymentIntentStatus,
  PaymentIntentType,
  PaymentRoute,
  PaymentRoutingStatus,
  PaymentType,
  PaymentTypeResponse,
  ProcessingStatus,
  ProductType,
  ProfileStatus,
  RecipientStatus,
  RecipientType,
  Role,
  RoutingCode,
  RoutingCodeType,
  RoutingInformationTransactionType,
  SchemasCountryCode,
  SchemasDocumentTypeSmbdo,
  SchemasStatus,
  TransactionStatus,
  TransactionType1,
  ValidationStatus,
  ValidationType,
} from './embedded-banking.schemas';
import type {
  AccountBalanceResponse,
  AddressTypesResponse,
  BalanceHold,
  BalanceHoldGetResponse,
  BalanceHolds,
  BillingClientDetailsResponse,
  BusinessTypesResponse,
  CardDetailResponse,
  CardUpdateResponse,
  ClientInformationResponse,
  ClientListResponse,
  ClientResponse,
  ClientVerificationsInformationResponse,
  CountriesResponse,
  CountrySubdivisionResponse,
  CreateDebitCardResponse,
  DebitCardsResponse,
  DocumentDetails,
  DocumentRequestListResponse,
  DocumentRequestResponse,
  DocumentTypesResponse,
  FAQResponse,
  IdentificationTypeResponse,
  IndustryCategoriesResponse,
  JobTitlesResponse,
  LegalStructureResponse,
  ListBalanceHoldGetResponse,
  ListClientInformationResponse,
  ListDocumentsDetailsResponse,
  ListDocumentsResponse,
  ListRecipientsResponse,
  ListRoleResponse,
  ListTransactionsSearchResponse,
  ListTransactionsSearchResponseV2,
  ListUserResponse,
  ListWebhookResponse,
  MicrodepositVerificationResponse,
  NatureOfOwnershipsResponse,
  PartyListResponse,
  PartyResponse,
  PartyRolesResponse,
  PartyTypesResponse,
  PaymentIntent,
  PaymentIntents,
  ProductResponse,
  QuestionListResponse,
  Recipient,
  SchemasAccountResponseWithStatus,
  SchemasListAccountsResponse,
  SchemasQuestionResponse,
  SchemasUserResponse,
  SmbdoDownloadDocument200Six,
  StatementsResponse,
  TransactionGetResponse,
  TransactionGetResponseV2,
  TransactionResponse,
  TransactionResponseV2,
  UpdateClientResponse,
  WebhookResponse,
} from './embedded-banking.schemas';

export const getGetAllClientsResponseMock = (
  overrideResponse: any = {}
): ListClientInformationResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      address: faker.helpers.arrayElement([
        {
          addressLine1: faker.word.sample(),
          addressLine2: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressLine3: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          city: faker.word.sample(),
          countryCode: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          idDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          idIssuer: faker.word.sample(),
          idType: faker.word.sample(),
          idValue: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
      businessAliasName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      businessDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      businessName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      businessType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      legalStructure: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentClientId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
      createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      enablePayouts: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.word.sample(),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      onboardingStatus: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      products: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      relatedParties: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          address: faker.helpers.arrayElement([
            {
              addressLine1: faker.word.sample(),
              addressLine2: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              addressLine3: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              addressType: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              city: faker.word.sample(),
              countryCode: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              idDescription: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              idIssuer: faker.word.sample(),
              idType: faker.word.sample(),
              idValue: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              ...overrideResponse,
            },
            undefined,
          ]),
          ...overrideResponse,
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          businessName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          partyRole: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          partyType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
          id: faker.word.sample(),
          status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostClientsResponseMock = (
  overrideResponse: any = {}
): ClientInformationResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  identities: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      idDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      idIssuer: faker.word.sample(),
      idType: faker.word.sample(),
      idValue: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
  businessAliasName: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  businessDescription: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  businessType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  countryOfFormation: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  entitiesInOwnership: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  industryCategory: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  industryType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  legalStructure: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  parentClientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  significantOwnership: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  websiteAvailable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  yearOfFormation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  enablePayouts: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  id: faker.word.sample(),
  jurisdiction: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  onboardingStatus: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  relatedParties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      address: faker.helpers.arrayElement([
        {
          addressLine1: faker.word.sample(),
          addressLine2: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressLine3: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          city: faker.word.sample(),
          countryCode: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          idDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          idIssuer: faker.word.sample(),
          idType: faker.word.sample(),
          idValue: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      businessName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyRole: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
      id: faker.word.sample(),
      status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetClientDetailsResponseMock = (
  overrideResponse: any = {}
): ClientInformationResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  identities: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      idDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      idIssuer: faker.word.sample(),
      idType: faker.word.sample(),
      idValue: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
  businessAliasName: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  businessDescription: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  businessType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  countryOfFormation: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  entitiesInOwnership: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  industryCategory: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  industryType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  legalStructure: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  parentClientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  significantOwnership: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  websiteAvailable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  yearOfFormation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  enablePayouts: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  id: faker.word.sample(),
  jurisdiction: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  onboardingStatus: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  relatedParties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      address: faker.helpers.arrayElement([
        {
          addressLine1: faker.word.sample(),
          addressLine2: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressLine3: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          city: faker.word.sample(),
          countryCode: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          idDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          idIssuer: faker.word.sample(),
          idType: faker.word.sample(),
          idValue: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      businessName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyRole: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
      id: faker.word.sample(),
      status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getUpdateClientsResponseMock = (
  overrideResponse: any = {}
): UpdateClientResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  identities: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      action: faker.word.sample(),
      idDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      idIssuer: faker.word.sample(),
      idType: faker.word.sample(),
      idValue: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      phoneNumber: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
  businessAliasName: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  businessDescription: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  businessType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  countryOfFormation: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  entitiesInOwnership: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  industryCategory: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  industryType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  legalStructure: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  significantOwnership: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  websiteAvailable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  yearOfFormation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  relatedParties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      address: faker.helpers.arrayElement([
        {
          addressLine1: faker.word.sample(),
          addressLine2: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressLine3: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          city: faker.word.sample(),
          countryCode: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          action: faker.word.sample(),
          idDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          idIssuer: faker.word.sample(),
          idType: faker.word.sample(),
          idValue: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phoneNumber: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      businessName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyRole: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetClientVerificationResponseMock = (
  overrideResponse: any = {}
): ClientVerificationsInformationResponse => ({
  additionalDocuments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentLevel: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      numberOfDaysRemainingToUpload: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      partyType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      supportedDocuments: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationDateTime: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentVersion: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      fullName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  verifications: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      response: faker.helpers.arrayElement([
        {
          answerOptions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
              label: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          format: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          maxLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          parentId: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          updatedDateTime: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          values: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      verification: faker.helpers.arrayElement([
        {
          id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          label: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAddClientVerificationResponseMock = (
  overrideResponse: any = {}
): ClientVerificationsInformationResponse => ({
  additionalDocuments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentLevel: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      numberOfDaysRemainingToUpload: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      partyType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      supportedDocuments: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationDateTime: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentVersion: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      fullName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  verifications: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      response: faker.helpers.arrayElement([
        {
          answerOptions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
              label: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          format: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          maxLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          parentId: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          updatedDateTime: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          values: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      verification: faker.helpers.arrayElement([
        {
          id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          label: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDocumentsDetailsResponseMock = (
  overrideResponse: any = {}
): ListDocumentsDetailsResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      metadata: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          key: faker.helpers.arrayElement([
            'PARTY_ID',
            'COUNTRY_CODE',
          ] as const),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      productTypes: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(ProductType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetDocumentDetailsResponseMock = (
  overrideResponse: any = {}
): DocumentDetails => ({
  documentType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(DocumentType)),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  metadata: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      key: faker.helpers.arrayElement(['PARTY_ID', 'COUNTRY_CODE'] as const),
      value: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  productType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProductType)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDownloadDocumentResponseMock = (): string =>
  faker.word.sample();

export const getListTransactionsV2ResponseMock = (
  overrideResponse: any = {}
): ListTransactionsSearchResponseV2 => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    amount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    creditorAccountId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    creditorAccountNumber: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    creditorClientId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    debtorAccountId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorAccountNumber: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorClientId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    effectiveDate: faker.helpers.arrayElement([
      faker.date.past().toISOString().split('T')[0],
      undefined,
    ]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ledgerBalance: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    originatingId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    originatingTransactionType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(OriginatingTransactionType)),
      undefined,
    ]),
    paymentDate: faker.helpers.arrayElement([
      faker.date.past().toISOString().split('T')[0],
      undefined,
    ]),
    postingVersion: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(TransactionStatus)),
      undefined,
    ]),
    transactionReferenceId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(PaymentTypeResponse)),
      undefined,
    ]),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getCreateTransactionV2ResponseMock = (
  overrideResponse: any = {}
): TransactionResponseV2 => ({
  amount: faker.number.int({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  creditorAccountId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.word.sample(),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  memo: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  paymentDate: faker.date.past().toISOString().split('T')[0],
  recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement(Object.values(TransactionStatus)),
  transactionReferenceId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentTypeResponse)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTransactionV2ResponseMock = (
  overrideResponse: any = {}
): TransactionGetResponseV2 => ({
  amount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  creditorAccountId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorClientId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  debtorClientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  effectiveDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  error: faker.helpers.arrayElement([
    {
      context: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          field: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          location: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'BODY',
              'QUERY',
              'PATH',
              'HEADER',
            ] as const),
            undefined,
          ]),
          message: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      httpStatus: faker.number.int({ min: undefined, max: undefined }),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      title: faker.word.sample(),
      traceId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  feeType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(FeeType)),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ledgerBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  memo: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  originatingId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  originatingTransactionType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(OriginatingTransactionType)),
    undefined,
  ]),
  paymentDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  postingVersion: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  transactionReferenceId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentTypeResponse)),
    undefined,
  ]),
  ...overrideResponse,
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(TransactionStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateTransactionResponseMock = (
  overrideResponse: any = {}
): TransactionResponse => ({
  accountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  accountNumber: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  amount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  c2ProfileId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debitCardDetails: faker.helpers.arrayElement([
    {
      cardLast4: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      cardPaymentRoutingNumber: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      cardSerialNumber: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      cardTransactionType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      isa: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      merchant: faker.helpers.arrayElement([
        {
          address: faker.helpers.arrayElement([
            {
              addressLine1: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              city: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              countryCode: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              zip: faker.helpers.arrayElement([faker.word.sample(), undefined]),
              ...overrideResponse,
            },
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      messageType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      surcharge: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  memo: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  paymentDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  recipient: faker.helpers.arrayElement([
    {
      account: {
        countryCode: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(SchemasCountryCode)),
          undefined,
        ]),
        number: faker.word.sample(),
        routingCodeType: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(RoutingCodeType)),
          undefined,
        ]),
        routingNumber: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        type: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(AccountType)),
          undefined,
        ]),
        ...overrideResponse,
      },
      partyDetails: faker.helpers.arrayElement([
        {
          address: faker.helpers.arrayElement([
            {
              addressLine1: faker.word.sample(),
              addressLine2: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              addressLine3: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              city: faker.word.sample(),
              countryCode: faker.helpers.arrayElement(
                Object.values(SchemasCountryCode)
              ),
              state: faker.word.sample(),
              zip: faker.word.sample(),
              ...overrideResponse,
            },
            undefined,
          ]),
          businessName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          contacts: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              contactType: faker.helpers.arrayElement([
                'EMAIL',
                'WEBSITE',
                'PHONE',
              ] as const),
              countryCode: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(PartyType)),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(TransactionStatus)),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentType)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListTransactionsResponseMock = (
  overrideResponse: any = {}
): ListTransactionsSearchResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    accountingType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(AccountingType)),
      undefined,
    ]),
    amount: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    creationTimestamp: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    creditorAccount: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    debtorAccount: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    effectiveDate: faker.helpers.arrayElement([
      faker.date.past().toISOString().split('T')[0],
      undefined,
    ]),
    ledgerBalance: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    paymentRoute: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(PaymentRoute)),
      undefined,
    ]),
    postingVersion: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(TransactionStatus)),
      undefined,
    ]),
    transactionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    transactionType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(TransactionType1)),
      undefined,
    ]),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getGetTransactionResponseMock = (
  overrideResponse: any = {}
): TransactionGetResponse => ({
  accountingType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(AccountingType)),
    undefined,
  ]),
  amount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  creationTimestamp: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  creditorAccount: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccount: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  feeType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(FeeType)),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  memo: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  originatingTransactionId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  originatingTransactionType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(OriginatingTransactionType)),
    undefined,
  ]),
  paymentDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  paymentRoute: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentRoute)),
    undefined,
  ]),
  rejectedReason: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  debitCardDetails: faker.helpers.arrayElement([
    {
      cardLast4: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      cardPaymentRoutingNumber: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      cardSerialNumber: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      cardTransactionType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      isa: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      merchant: faker.helpers.arrayElement([
        {
          address: faker.helpers.arrayElement([
            {
              addressLine1: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              city: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              countryCode: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              zip: faker.helpers.arrayElement([faker.word.sample(), undefined]),
              ...overrideResponse,
            },
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      messageType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      surcharge: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(TransactionStatus)),
    undefined,
  ]),
  transactionType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(TransactionType1)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoListClientsResponseMock = (
  overrideResponse: any = {}
): ClientListResponse => ({
  clients: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    outstanding: {
      attestationDocumentIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.string.uuid()),
        undefined,
      ]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyRoles: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          'AUTHORIZED_USER',
          'BENEFICIAL_OWNER',
          'CLIENT',
          'CONTROLLER',
          'DECISION_MAKER',
          'PRIMARY_CONTACT',
        ] as const),
        undefined,
      ]),
      questionIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    },
    partyId: faker.word.sample(),
    products: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    status: faker.helpers.arrayElement(Object.values(ClientStatus)),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getSmbdoPostClientsResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoGetClientResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoUpdateClientResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoListPartiesResponseMock = (
  overrideResponse: any = {}
): PartyListResponse => ({
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoPostPartiesResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetPartyResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoUpdatePartyResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoListQuestionsResponseMock = (
  overrideResponse: any = {}
): QuestionListResponse => ({
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  questions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      content: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          label: faker.word.sample(),
          locale: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      defaultLocale: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentQuestionId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      responseSchema: faker.helpers.arrayElement([
        {
          items: faker.helpers.arrayElement([
            {
              exclusiveMaximum: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              exclusiveMinimum: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              format: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'float',
                  'double',
                  'int32',
                  'int64',
                  'date',
                ] as const),
                undefined,
              ]),
              maximum: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              maxLength: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              minimum: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              minLength: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              pattern: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'boolean',
                  'string',
                  'number',
                  'integer',
                ] as const),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          maxItems: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minItems: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement(['array'] as const),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      subQuestions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          anyValuesMatch: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          questionIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetQuestionResponseMock = (
  overrideResponse: any = {}
): SchemasQuestionResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      label: faker.word.sample(),
      locale: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  defaultLocale: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  parentQuestionId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  responseSchema: faker.helpers.arrayElement([
    {
      items: faker.helpers.arrayElement([
        {
          exclusiveMaximum: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          exclusiveMinimum: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          format: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'float',
              'double',
              'int32',
              'int64',
              'date',
            ] as const),
            undefined,
          ]),
          maximum: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          maxLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minimum: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          pattern: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'boolean',
              'string',
              'number',
              'integer',
            ] as const),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      maxItems: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      minItems: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['array'] as const),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  subQuestions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      anyValuesMatch: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      questionIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoListDocumentRequestsResponseMock = (
  overrideResponse: any = {}
): DocumentRequestListResponse => ({
  documentRequests: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    documentType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(DocumentTypeSmbdo)),
      undefined,
    ]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    requirements: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        documentTypes: faker.helpers.arrayElements(
          Object.values(DocumentTypeSmbdo)
        ),
        level: faker.helpers.arrayElement([
          faker.helpers.arrayElement(['PRIMARY', 'SECONDARY'] as const),
          undefined,
        ]),
        minRequired: faker.helpers.arrayElement([
          faker.number.int({ min: 1, max: 10 }),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(DocumentRequestStatus)),
      undefined,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    validForDays: faker.helpers.arrayElement([
      faker.number.int({ min: 1, max: 180 }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getSmbdoGetDocumentRequestResponseMock = (
  overrideResponse: any = {}
): DocumentRequestResponse => ({
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  documentType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(DocumentTypeSmbdo)),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  requirements: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentTypes: faker.helpers.arrayElements(
        Object.values(DocumentTypeSmbdo)
      ),
      level: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['PRIMARY', 'SECONDARY'] as const),
        undefined,
      ]),
      minRequired: faker.helpers.arrayElement([
        faker.number.int({ min: 1, max: 10 }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(DocumentRequestStatus)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  validForDays: faker.helpers.arrayElement([
    faker.number.int({ min: 1, max: 180 }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetAllDocumentDetailsResponseMock = (
  overrideResponse: any = {}
): ListDocumentsResponse => ({
  documentDetails: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentType: faker.helpers.arrayElement(
        Object.values(SchemasDocumentTypeSmbdo)
      ),
      id: faker.string.uuid(),
      metadata: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        key: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(DocumentMetadataKeyEnum)),
          undefined,
        ]),
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetDocumentDetailResponseMock = (
  overrideResponse: any = {}
): ListDocumentsResponse => ({
  documentDetails: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentType: faker.helpers.arrayElement(
        Object.values(SchemasDocumentTypeSmbdo)
      ),
      id: faker.string.uuid(),
      metadata: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        key: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(DocumentMetadataKeyEnum)),
          undefined,
        ]),
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoDownloadDocumentResponseMock = ():
  | string
  | SmbdoDownloadDocument200Six =>
  faker.helpers.arrayElement([faker.word.sample(), {}]);

export const getGetBalanceHoldsResponseMock = (
  overrideResponse: any = {}
): ListBalanceHoldGetResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    authorizedAmount: faker.number.int({ min: undefined, max: undefined }),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    currency: faker.word.sample(),
    debtorAccountId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorAccountNumber: faker.word.sample(),
    expirationDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`,
    id: faker.word.sample(),
    pendingAmount: faker.number.int({ min: undefined, max: undefined }),
    requestedAmount: faker.number.int({ min: undefined, max: undefined }),
    status: faker.word.sample(),
    typeSpecificAttributes: {
      authCode: faker.word.sample(),
      cardLast4: faker.word.sample(),
      id: faker.word.sample(),
      merchantName: faker.word.sample(),
      ...overrideResponse,
    },
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getGetBalanceHoldsDetailsResponseMock = (
  overrideResponse: any = {}
): BalanceHoldGetResponse => ({
  authorizedAmount: faker.number.int({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  currency: faker.word.sample(),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.word.sample(),
  expirationDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  pendingAmount: faker.number.int({ min: undefined, max: undefined }),
  requestedAmount: faker.number.int({ min: undefined, max: undefined }),
  status: faker.word.sample(),
  typeSpecificAttributes: {
    authCode: faker.word.sample(),
    cardLast4: faker.word.sample(),
    id: faker.word.sample(),
    merchantName: faker.word.sample(),
    ...overrideResponse,
  },
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getGetBalanceHolds1ResponseMock = (
  overrideResponse: any = {}
): BalanceHolds => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    authorizedAmount: faker.word.sample(),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    currency: faker.word.sample(),
    debtorAccountId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorAccountNumber: faker.word.sample(),
    expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    id: faker.word.sample(),
    pendingAmount: faker.word.sample(),
    requestedAmount: faker.word.sample(),
    status: faker.word.sample(),
    typeSpecificAttributes: {
      authCode: faker.word.sample(),
      cardLast4: faker.word.sample(),
      id: faker.word.sample(),
      merchantName: faker.word.sample(),
      ...overrideResponse,
    },
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getGetBalanceHoldsDetails1ResponseMock = (
  overrideResponse: any = {}
): BalanceHold => ({
  authorizedAmount: faker.word.sample(),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  currency: faker.word.sample(),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.word.sample(),
  expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  pendingAmount: faker.word.sample(),
  requestedAmount: faker.word.sample(),
  status: faker.word.sample(),
  typeSpecificAttributes: {
    authCode: faker.word.sample(),
    cardLast4: faker.word.sample(),
    id: faker.word.sample(),
    merchantName: faker.word.sample(),
    ...overrideResponse,
  },
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getCreatePaymentIntentResponseMock = (
  overrideResponse: any = {}
): PaymentIntent => ({
  amount: faker.helpers.arrayElement([
    faker.number.int({ min: 0.01, max: undefined }),
    undefined,
  ]),
  balanceHoldId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  creditorEmail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  expirationDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentIntentStatus)),
    undefined,
  ]),
  transactionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentIntentType)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListPaymentIntentsResponseMock = (
  overrideResponse: any = {}
): PaymentIntents => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    amount: faker.helpers.arrayElement([
      faker.number.int({ min: 0.01, max: undefined }),
      undefined,
    ]),
    balanceHoldId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    creditorEmail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    debtorAccountId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorAccountNumber: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    expirationDate: faker.helpers.arrayElement([
      faker.date.past().toISOString().split('T')[0],
      undefined,
    ]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(PaymentIntentStatus)),
      undefined,
    ]),
    transactionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(PaymentIntentType)),
      undefined,
    ]),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getGetPaymentIntentResponseMock = (
  overrideResponse: any = {}
): PaymentIntent => ({
  amount: faker.helpers.arrayElement([
    faker.number.int({ min: 0.01, max: undefined }),
    undefined,
  ]),
  balanceHoldId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  creditorEmail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  expirationDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentIntentStatus)),
    undefined,
  ]),
  transactionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentIntentType)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdatePaymentIntentResponseMock = (
  overrideResponse: any = {}
): PaymentIntent => ({
  amount: faker.helpers.arrayElement([
    faker.number.int({ min: 0.01, max: undefined }),
    undefined,
  ]),
  balanceHoldId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  creditorEmail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  expirationDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentIntentStatus)),
    undefined,
  ]),
  transactionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentIntentType)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetBillingClientDetailsResponseMock = (
  overrideResponse: any = {}
): BillingClientDetailsResponse => ({
  billingDay: faker.helpers.arrayElement([
    faker.number.int({ min: 1, max: 31 }),
    undefined,
  ]),
  billingMonth: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      'JANUARY',
      'FEBRUARY',
      'MARCH',
      'APRIL',
      'MAY',
      'JUNE',
      'JULY',
      'AUGUST',
      'SEPTEMBER',
      'OCTOBER',
      'NOVEMBER',
      'DECEMBER',
    ] as const),
    undefined,
  ]),
  currency: faker.helpers.arrayElement(['USD'] as const),
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    allowance: faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      undefined,
    ]),
    billingEventSubType: faker.helpers.arrayElement([
      'ACH_PAYOUT',
      'RTP_PAYOUT',
      'WIRE_PAYOUT',
    ] as const),
    billingEventType: faker.helpers.arrayElement(['TRANSACTION'] as const),
    calculationType: faker.helpers.arrayElement([
      'PERCENTAGE',
      'FLAT_AMOUNT',
    ] as const),
    effectiveDateFrom: faker.date.past().toISOString().split('T')[0],
    effectiveDateTo: faker.date.past().toISOString().split('T')[0],
    flatCharge: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    maxCharge: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    minCharge: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    percentageValue: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    usage: faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  nextBillingDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  periodType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['MONTHLY', 'YEARLY'] as const),
    undefined,
  ]),
  subscriptionCharge: faker.helpers.arrayElement([
    faker.number.int({ min: 0.01, max: undefined }),
    undefined,
  ]),
  subscriptionName: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  type: faker.helpers.arrayElement(['SUBSCRIPTION', 'PAY_AS_YOU_GO'] as const),
  ...overrideResponse,
});

export const getGetDebitCardsResponseMock = (
  overrideResponse: any = {}
): DebitCardsResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    accountId: faker.word.sample(),
    expirationDate: faker.word.sample(),
    firstName: faker.word.sample(),
    id: faker.word.sample(),
    last4: faker.word.sample(),
    lastName: faker.word.sample(),
    maxCashWithdrawalLimit: faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      undefined,
    ]),
    maxSpendLimit: faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      undefined,
    ]),
    middleName: faker.word.sample(),
    status: faker.helpers.arrayElement([
      'ACTIVE',
      'INACTIVE',
      'SUSPEND',
      'DAMAGED',
      'DEACTIVE',
      'DEFECTIVE',
      'LOST',
      'STOLEN',
      'UNDELIVER',
      'IRREGACT',
      'OTHER',
    ] as const),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getCreateDebitCardResponseMock = (
  overrideResponse: any = {}
): CreateDebitCardResponse => ({
  accountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  link: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetDebitCardResponseMock = (
  overrideResponse: any = {}
): CardDetailResponse => ({
  accountId: faker.word.sample(),
  link: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateCardResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getLockDebitCardResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getUnlockDebitCardResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getCancelDebitCardResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getReplaceDebitCardResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getSetDebitCardPinResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getSetDebitCardLimitResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetAllRecipientsResponseMock = (
  overrideResponse: any = {}
): ListRecipientsResponse => ({
  limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  total_items: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
  recipients: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      account: faker.helpers.arrayElement([
        {
          countryCode: faker.helpers.arrayElement(
            Object.values(SchemasCountryCode)
          ),
          number: faker.word.sample(),
          routingInformation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              routingCodeType: faker.helpers.arrayElement(
                Object.values(RoutingCodeType)
              ),
              routingNumber: faker.word.sample(),
              transactionType: faker.helpers.arrayElement(
                Object.values(RoutingInformationTransactionType)
              ),
              ...overrideResponse,
            })),
            undefined,
          ]),
          type: faker.helpers.arrayElement(Object.values(AccountType)),
          ...overrideResponse,
        },
        undefined,
      ]),
      accountValidationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          profileName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          requestId: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          responses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              codes: faker.helpers.arrayElement([
                {
                  authentication: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  authenticationMicroDeposit: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  error: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  verification: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  verificationMicroDeposit: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                {
                  accountNumber: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  financialInstitutionId: faker.helpers.arrayElement([
                    {
                      clearingSystemId: faker.helpers.arrayElement([
                        {
                          id: faker.helpers.arrayElement([
                            faker.word.sample(),
                            undefined,
                          ]),
                          idType: faker.helpers.arrayElement([
                            faker.word.sample(),
                            undefined,
                          ]),
                          ...overrideResponse,
                        },
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  paymentCheckContributingStatus: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  providerResponse: faker.helpers.arrayElement([
                    {
                      mdNotification: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      retryCount: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              provider: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      id: faker.word.sample(),
      partyDetails: {
        address: faker.helpers.arrayElement([
          {
            addressLine1: faker.word.sample(),
            addressLine2: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            addressLine3: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            addressType: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            city: faker.word.sample(),
            countryCode: faker.helpers.arrayElement(
              Object.values(SchemasCountryCode)
            ),
            postalCode: faker.word.sample(),
            state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
          },
          undefined,
        ]),
        businessName: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        contacts: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            contactType: faker.helpers.arrayElement([
              'EMAIL',
              'WEBSITE',
              'PHONE',
            ] as const),
            countryCode: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            value: faker.word.sample(),
            ...overrideResponse,
          })),
          undefined,
        ]),
        firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        type: faker.helpers.arrayElement(Object.values(PartyType)),
        ...overrideResponse,
      },
      partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(RecipientStatus)),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(RecipientType)),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateRecipientResponseMock = (
  overrideResponse: any = {}
): Recipient => ({
  account: faker.helpers.arrayElement([
    {
      countryCode: faker.helpers.arrayElement(
        Object.values(SchemasCountryCode)
      ),
      number: faker.word.sample(),
      routingInformation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          routingCodeType: faker.helpers.arrayElement(
            Object.values(RoutingCodeType)
          ),
          routingNumber: faker.word.sample(),
          transactionType: faker.helpers.arrayElement(
            Object.values(RoutingInformationTransactionType)
          ),
          ...overrideResponse,
        })),
        undefined,
      ]),
      type: faker.helpers.arrayElement(Object.values(AccountType)),
      ...overrideResponse,
    },
    undefined,
  ]),
  accountValidationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      profileName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      responses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          codes: faker.helpers.arrayElement([
            {
              authentication: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              authenticationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              error: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verification: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verificationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          details: faker.helpers.arrayElement([
            {
              accountNumber: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              financialInstitutionId: faker.helpers.arrayElement([
                {
                  clearingSystemId: faker.helpers.arrayElement([
                    {
                      id: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      idType: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              paymentCheckContributingStatus: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              providerResponse: faker.helpers.arrayElement([
                {
                  mdNotification: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  retryCount: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  id: faker.word.sample(),
  partyDetails: {
    address: faker.helpers.arrayElement([
      {
        addressLine1: faker.word.sample(),
        addressLine2: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressLine3: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressType: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        city: faker.word.sample(),
        countryCode: faker.helpers.arrayElement(
          Object.values(SchemasCountryCode)
        ),
        postalCode: faker.word.sample(),
        state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    contacts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        contactType: faker.helpers.arrayElement([
          'EMAIL',
          'WEBSITE',
          'PHONE',
        ] as const),
        countryCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        value: faker.word.sample(),
        ...overrideResponse,
      })),
      undefined,
    ]),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(PartyType)),
    ...overrideResponse,
  },
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientStatus)),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientType)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRecipientResponseMock = (
  overrideResponse: any = {}
): Recipient => ({
  account: faker.helpers.arrayElement([
    {
      countryCode: faker.helpers.arrayElement(
        Object.values(SchemasCountryCode)
      ),
      number: faker.word.sample(),
      routingInformation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          routingCodeType: faker.helpers.arrayElement(
            Object.values(RoutingCodeType)
          ),
          routingNumber: faker.word.sample(),
          transactionType: faker.helpers.arrayElement(
            Object.values(RoutingInformationTransactionType)
          ),
          ...overrideResponse,
        })),
        undefined,
      ]),
      type: faker.helpers.arrayElement(Object.values(AccountType)),
      ...overrideResponse,
    },
    undefined,
  ]),
  accountValidationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      profileName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      responses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          codes: faker.helpers.arrayElement([
            {
              authentication: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              authenticationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              error: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verification: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verificationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          details: faker.helpers.arrayElement([
            {
              accountNumber: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              financialInstitutionId: faker.helpers.arrayElement([
                {
                  clearingSystemId: faker.helpers.arrayElement([
                    {
                      id: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      idType: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              paymentCheckContributingStatus: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              providerResponse: faker.helpers.arrayElement([
                {
                  mdNotification: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  retryCount: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  id: faker.word.sample(),
  partyDetails: {
    address: faker.helpers.arrayElement([
      {
        addressLine1: faker.word.sample(),
        addressLine2: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressLine3: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressType: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        city: faker.word.sample(),
        countryCode: faker.helpers.arrayElement(
          Object.values(SchemasCountryCode)
        ),
        postalCode: faker.word.sample(),
        state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    contacts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        contactType: faker.helpers.arrayElement([
          'EMAIL',
          'WEBSITE',
          'PHONE',
        ] as const),
        countryCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        value: faker.word.sample(),
        ...overrideResponse,
      })),
      undefined,
    ]),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(PartyType)),
    ...overrideResponse,
  },
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientStatus)),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientType)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getAmendRecipientResponseMock = (
  overrideResponse: any = {}
): Recipient => ({
  account: faker.helpers.arrayElement([
    {
      countryCode: faker.helpers.arrayElement(
        Object.values(SchemasCountryCode)
      ),
      number: faker.word.sample(),
      routingInformation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          routingCodeType: faker.helpers.arrayElement(
            Object.values(RoutingCodeType)
          ),
          routingNumber: faker.word.sample(),
          transactionType: faker.helpers.arrayElement(
            Object.values(RoutingInformationTransactionType)
          ),
          ...overrideResponse,
        })),
        undefined,
      ]),
      type: faker.helpers.arrayElement(Object.values(AccountType)),
      ...overrideResponse,
    },
    undefined,
  ]),
  accountValidationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      profileName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      responses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          codes: faker.helpers.arrayElement([
            {
              authentication: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              authenticationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              error: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verification: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verificationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          details: faker.helpers.arrayElement([
            {
              accountNumber: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              financialInstitutionId: faker.helpers.arrayElement([
                {
                  clearingSystemId: faker.helpers.arrayElement([
                    {
                      id: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      idType: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              paymentCheckContributingStatus: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              providerResponse: faker.helpers.arrayElement([
                {
                  mdNotification: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  retryCount: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  id: faker.word.sample(),
  partyDetails: {
    address: faker.helpers.arrayElement([
      {
        addressLine1: faker.word.sample(),
        addressLine2: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressLine3: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressType: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        city: faker.word.sample(),
        countryCode: faker.helpers.arrayElement(
          Object.values(SchemasCountryCode)
        ),
        postalCode: faker.word.sample(),
        state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    contacts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        contactType: faker.helpers.arrayElement([
          'EMAIL',
          'WEBSITE',
          'PHONE',
        ] as const),
        countryCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        value: faker.word.sample(),
        ...overrideResponse,
      })),
      undefined,
    ]),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(PartyType)),
    ...overrideResponse,
  },
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientStatus)),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientType)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getRecipientsVerificationResponseMock = (
  overrideResponse: any = {}
): MicrodepositVerificationResponse => ({
  status: faker.helpers.arrayElement([
    'VERIFIED',
    'FAILED',
    'FAILED_MAX_ATTEMPTS_EXCEEDED',
  ] as const),
  ...overrideResponse,
});

export const getGetFaqResponseMock = (
  overrideResponse: any = {}
): FAQResponse => ({
  faqs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    answer: faker.word.sample(),
    question: faker.word.sample(),
    tags: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    type: faker.helpers.arrayElement(['C1 General', 'C1 Specific'] as const),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getListWebhooksResponseMock = (
  overrideResponse: any = {}
): ListWebhookResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    id: faker.word.sample(),
    status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
    subscriptions: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      eventType: faker.helpers.arrayElement([
        'TRANSACTION_COMPLETED',
        'TRANSACTION_FAILED',
        'CLIENT_ONBOARDING',
        'REMITTANCE_STATUS',
        'PARTY_NETWORK_SCREENING',
        'CLIENT_ONBOARDING_COMPLETED',
        'CLIENT_OFFBOARDING_COMPLETED',
        'CLIENT_ADD_INFO_REQUESTED',
        'CLIENT_ADD_INFO_VERIFIED',
        'CLIENT_ADD_INFO_FAILED',
        'ACCOUNT_CREATED',
        'ACCOUNT_CLOSED',
      ] as const),
      ...overrideResponse,
    })),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getCreateWebhookResponseMock = (
  overrideResponse: any = {}
): WebhookResponse => ({
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
  subscriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    eventType: faker.helpers.arrayElement([
      'TRANSACTION_COMPLETED',
      'TRANSACTION_FAILED',
      'CLIENT_ONBOARDING',
      'REMITTANCE_STATUS',
      'PARTY_NETWORK_SCREENING',
      'CLIENT_ONBOARDING_COMPLETED',
      'CLIENT_OFFBOARDING_COMPLETED',
      'CLIENT_ADD_INFO_REQUESTED',
      'CLIENT_ADD_INFO_VERIFIED',
      'CLIENT_ADD_INFO_FAILED',
      'ACCOUNT_CREATED',
      'ACCOUNT_CLOSED',
    ] as const),
    ...overrideResponse,
  })),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getGetWebhookResponseMock = (
  overrideResponse: any = {}
): WebhookResponse => ({
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
  subscriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    eventType: faker.helpers.arrayElement([
      'TRANSACTION_COMPLETED',
      'TRANSACTION_FAILED',
      'CLIENT_ONBOARDING',
      'REMITTANCE_STATUS',
      'PARTY_NETWORK_SCREENING',
      'CLIENT_ONBOARDING_COMPLETED',
      'CLIENT_OFFBOARDING_COMPLETED',
      'CLIENT_ADD_INFO_REQUESTED',
      'CLIENT_ADD_INFO_VERIFIED',
      'CLIENT_ADD_INFO_FAILED',
      'ACCOUNT_CREATED',
      'ACCOUNT_CLOSED',
    ] as const),
    ...overrideResponse,
  })),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getUpdateWebhookResponseMock = (
  overrideResponse: any = {}
): WebhookResponse => ({
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
  subscriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    eventType: faker.helpers.arrayElement([
      'TRANSACTION_COMPLETED',
      'TRANSACTION_FAILED',
      'CLIENT_ONBOARDING',
      'REMITTANCE_STATUS',
      'PARTY_NETWORK_SCREENING',
      'CLIENT_ONBOARDING_COMPLETED',
      'CLIENT_OFFBOARDING_COMPLETED',
      'CLIENT_ADD_INFO_REQUESTED',
      'CLIENT_ADD_INFO_VERIFIED',
      'CLIENT_ADD_INFO_FAILED',
      'ACCOUNT_CREATED',
      'ACCOUNT_CLOSED',
    ] as const),
    ...overrideResponse,
  })),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getGetAllCountriesResponseMock = (
  overrideResponse: any = {}
): CountriesResponse => ({
  countries: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetCountrySubdivisionResponseMock = (
  overrideResponse: any = {}
): CountrySubdivisionResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      countryCode: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      subDivision: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetLegalStructuresResponseMock = (
  overrideResponse: any = {}
): LegalStructureResponse => ({
  legalStructures: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetDocumentTypesResponseMock = (
  overrideResponse: any = {}
): DocumentTypesResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentTypes: faker.helpers.arrayElement([
        {
          category: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individual: faker.helpers.arrayElement([
            {
              primary: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1
                ).map(() => ({
                  id: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  label: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  legalStructures: faker.helpers.arrayElement([
                    Array.from(
                      { length: faker.number.int({ min: 1, max: 10 }) },
                      (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                  ]),
                  ...overrideResponse,
                })),
                undefined,
              ]),
              secondary: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1
                ).map(() => ({
                  id: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  label: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  legalStructures: faker.helpers.arrayElement([
                    Array.from(
                      { length: faker.number.int({ min: 1, max: 10 }) },
                      (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                  ]),
                  ...overrideResponse,
                })),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          organization: faker.helpers.arrayElement([
            {
              primary: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1
                ).map(() => ({
                  id: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  label: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  legalStructures: faker.helpers.arrayElement([
                    Array.from(
                      { length: faker.number.int({ min: 1, max: 10 }) },
                      (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                  ]),
                  ...overrideResponse,
                })),
                undefined,
              ]),
              secondary: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1
                ).map(() => ({
                  id: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  label: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  legalStructures: faker.helpers.arrayElement([
                    Array.from(
                      { length: faker.number.int({ min: 1, max: 10 }) },
                      (_, i) => i + 1
                    ).map(() => faker.word.sample()),
                    undefined,
                  ]),
                  ...overrideResponse,
                })),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetIdTypesResponseMock = (
  overrideResponse: any = {}
): IdentificationTypeResponse => ({
  identificationTypes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      length: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetClientIndustryCategoriesResponseMock = (
  overrideResponse: any = {}
): IndustryCategoriesResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryTypes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRefProductsResponseMock = (
  overrideResponse: any = {}
): ProductResponse => ({
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRefBusinessTypesResponseMock = (
  overrideResponse: any = {}
): BusinessTypesResponse => ({
  businessTypes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRefJobTitlesResponseMock = (
  overrideResponse: any = {}
): JobTitlesResponse => ({
  jobTitles: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRefPartyRolesResponseMock = (
  overrideResponse: any = {}
): PartyRolesResponse => ({
  partyRoles: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRefAddressTypesResponseMock = (
  overrideResponse: any = {}
): AddressTypesResponse => ({
  addressTypes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRefNatureOfOwnershipsResponseMock = (
  overrideResponse: any = {}
): NatureOfOwnershipsResponse => ({
  natureOfOwnerships: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRefPartyTypesResponseMock = (
  overrideResponse: any = {}
): PartyTypesResponse => ({
  partyTypes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetStatementResponseMock = (): string => faker.word.sample();

export const getSearchStatementsResponseMock = (
  overrideResponse: any = {}
): StatementsResponse => ({
  statements: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      metaData: faker.helpers.arrayElement([
        {
          accountNumber: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          createdDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          month: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          year: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAllUsersResponseMock = (
  overrideResponse: any = {}
): ListUserResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      address: faker.helpers.arrayElement([
        {
          addressLine1: faker.word.sample(),
          addressLine2: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressLine3: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(AddressType)),
            undefined,
          ]),
          city: faker.word.sample(),
          countryCode: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      emailAddress: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
      clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      processingStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProcessingStatus)),
        undefined,
      ]),
      relatedPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          id: faker.word.sample(),
          label: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
          resourceId: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          resourceType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(SchemasStatus)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostUsersResponseMock = (
  overrideResponse: any = {}
): SchemasUserResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(AddressType)),
        undefined,
      ]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  emailAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  processingStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProcessingStatus)),
    undefined,
  ]),
  relatedPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  roles: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.word.sample(),
      label: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
      resourceId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      resourceType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SchemasStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetUserDetailsResponseMock = (
  overrideResponse: any = {}
): SchemasUserResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(AddressType)),
        undefined,
      ]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  emailAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  processingStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProcessingStatus)),
    undefined,
  ]),
  relatedPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  roles: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.word.sample(),
      label: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
      resourceId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      resourceType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SchemasStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateUserByIdResponseMock = (
  overrideResponse: any = {}
): SchemasUserResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(AddressType)),
        undefined,
      ]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  emailAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  processingStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProcessingStatus)),
    undefined,
  ]),
  relatedPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  roles: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.word.sample(),
      label: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
      resourceId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      resourceType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SchemasStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAllRolesResponseMock = (
  overrideResponse: any = {}
): ListRoleResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.word.sample(),
      label: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
      resourceTypes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccountsResponseMock = (
  overrideResponse: any = {}
): SchemasListAccountsResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    category: faker.helpers.arrayElement(Object.values(AccountCategory)),
    clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    id: faker.word.sample(),
    label: faker.word.sample(),
    paymentRoutingInformation: faker.helpers.arrayElement([
      {
        accountNumber: faker.word.sample(),
        country: faker.helpers.arrayElement(Object.values(SchemasCountryCode)),
        routingInformation: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            type: faker.helpers.arrayElement(Object.values(RoutingCode)),
            value: faker.word.sample(),
            ...overrideResponse,
          })),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    state: faker.helpers.arrayElement(Object.values(AccountState)),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getPostAccountsResponseMock = (
  overrideResponse: any = {}
): SchemasAccountResponseWithStatus => ({
  category: faker.helpers.arrayElement(Object.values(AccountCategory)),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  closureReason: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  label: faker.word.sample(),
  paymentRoutingInformation: faker.helpers.arrayElement([
    {
      accountNumber: faker.word.sample(),
      country: faker.helpers.arrayElement(Object.values(SchemasCountryCode)),
      routingInformation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          type: faker.helpers.arrayElement(Object.values(RoutingCode)),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      status: faker.helpers.arrayElement(Object.values(PaymentRoutingStatus)),
      ...overrideResponse,
    },
    undefined,
  ]),
  state: faker.helpers.arrayElement(Object.values(AccountState)),
  ...overrideResponse,
});

export const getGetAccountResponseMock = (
  overrideResponse: any = {}
): SchemasAccountResponseWithStatus => ({
  category: faker.helpers.arrayElement(Object.values(AccountCategory)),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  closureReason: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  label: faker.word.sample(),
  paymentRoutingInformation: faker.helpers.arrayElement([
    {
      accountNumber: faker.word.sample(),
      country: faker.helpers.arrayElement(Object.values(SchemasCountryCode)),
      routingInformation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          type: faker.helpers.arrayElement(Object.values(RoutingCode)),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      status: faker.helpers.arrayElement(Object.values(PaymentRoutingStatus)),
      ...overrideResponse,
    },
    undefined,
  ]),
  state: faker.helpers.arrayElement(Object.values(AccountState)),
  ...overrideResponse,
});

export const getGetAccountBalanceResponseMock = (
  overrideResponse: any = {}
): AccountBalanceResponse => ({
  balanceTypes: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    amount: faker.number.int({ min: undefined, max: undefined }),
    typeCode: faker.helpers.arrayElement(['ITAV', 'ITBD'] as const),
    ...overrideResponse,
  })),
  currency: faker.word.sample(),
  date: faker.date.past().toISOString().split('T')[0],
  id: faker.word.sample(),
  ...overrideResponse,
});

export const getGetAllClientsMockHandler = (
  overrideResponse?: ListClientInformationResponse
) => {
  return http.get('*/ef/v1/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getPostClientsMockHandler = (
  overrideResponse?: ClientInformationResponse
) => {
  return http.post('*/ef/v1/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetClientDetailsMockHandler = (
  overrideResponse?: ClientInformationResponse
) => {
  return http.get('*/ef/v1/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetClientDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateClientsMockHandler = (
  overrideResponse?: UpdateClientResponse
) => {
  return http.post('*/ef/v1/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetClientVerificationMockHandler = (
  overrideResponse?: ClientVerificationsInformationResponse
) => {
  return http.get('*/ef/v1/clients/:id/verifications', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetClientVerificationResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getAddClientVerificationMockHandler = (
  overrideResponse?: ClientVerificationsInformationResponse
) => {
  return http.post('*/ef/v1/clients/:id/verifications', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getAddClientVerificationResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getDocumentsDetailsMockHandler = (
  overrideResponse?: ListDocumentsDetailsResponse
) => {
  return http.get('*/ef/v1/documents', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getDocumentsDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetDocumentDetailsMockHandler = (
  overrideResponse?: DocumentDetails
) => {
  return http.get('*/ef/v1/documents/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetDocumentDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getDownloadDocumentMockHandler = (overrideResponse?: string) => {
  return http.get('*/ef/v1/documents/:id/file', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getDownloadDocumentResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getListTransactionsV2MockHandler = (
  overrideResponse?: ListTransactionsSearchResponseV2
) => {
  return http.get('*/ef/v2/transactions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getListTransactionsV2ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateTransactionV2MockHandler = (
  overrideResponse?: TransactionResponseV2
) => {
  return http.post('*/ef/v2/transactions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getCreateTransactionV2ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetTransactionV2MockHandler = (
  overrideResponse?: TransactionGetResponseV2
) => {
  return http.get('*/ef/v2/transactions/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetTransactionV2ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateTransactionMockHandler = (
  overrideResponse?: TransactionResponse
) => {
  return http.post('*/ef/v1/transactions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateTransactionResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getListTransactionsMockHandler = (
  overrideResponse?: ListTransactionsSearchResponse
) => {
  return http.get('*/ef/v1/transactions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListTransactionsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetTransactionMockHandler = (
  overrideResponse?: TransactionGetResponse
) => {
  return http.get('*/ef/v1/transactions/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetTransactionResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoListClientsMockHandler = (
  overrideResponse?: ClientListResponse
) => {
  return http.get('*/ef/do/v1/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoListClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostClientsMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.post('*/ef/do/v1/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoPostClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetClientMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.get('*/ef/do/v1/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetClientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoUpdateClientMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.post('*/ef/do/v1/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoUpdateClientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostClientVerificationsMockHandler = () => {
  return http.post('*/ef/do/v1/clients/:id/verifications', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getSmbdoListPartiesMockHandler = (
  overrideResponse?: PartyListResponse
) => {
  return http.get('*/ef/do/v1/parties', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoListPartiesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostPartiesMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.post('*/ef/do/v1/parties', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoPostPartiesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetPartyMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.get('*/ef/do/v1/parties/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetPartyResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoUpdatePartyMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.post('*/ef/do/v1/parties/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoUpdatePartyResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoListQuestionsMockHandler = (
  overrideResponse?: QuestionListResponse
) => {
  return http.get('*/ef/do/v1/questions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoListQuestionsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetQuestionMockHandler = (
  overrideResponse?: SchemasQuestionResponse
) => {
  return http.get('*/ef/do/v1/questions/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetQuestionResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoListDocumentRequestsMockHandler = (
  overrideResponse?: DocumentRequestListResponse
) => {
  return http.get('*/ef/do/v1/document-requests', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoListDocumentRequestsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetDocumentRequestMockHandler = (
  overrideResponse?: DocumentRequestResponse
) => {
  return http.get('*/ef/do/v1/document-requests/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetDocumentRequestResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetAllDocumentDetailsMockHandler = (
  overrideResponse?: ListDocumentsResponse
) => {
  return http.get('*/ef/do/v1/documents', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetAllDocumentDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetDocumentDetailMockHandler = (
  overrideResponse?: ListDocumentsResponse
) => {
  return http.get('*/ef/do/v1/documents/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetDocumentDetailResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoDownloadDocumentMockHandler = (
  overrideResponse?: string | SmbdoDownloadDocument200Six
) => {
  return http.get('*/ef/do/v1/documents/:id/file', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoDownloadDocumentResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetBalanceHoldsMockHandler = (
  overrideResponse?: ListBalanceHoldGetResponse
) => {
  return http.get('*/ef/v1/balance-holds', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetBalanceHoldsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetBalanceHoldsDetailsMockHandler = (
  overrideResponse?: BalanceHoldGetResponse
) => {
  return http.get('*/ef/v1/balance-holds/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetBalanceHoldsDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetBalanceHolds1MockHandler = (
  overrideResponse?: BalanceHolds
) => {
  return http.get('*/ef/v2/balance-holds', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetBalanceHolds1ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetBalanceHoldsDetails1MockHandler = (
  overrideResponse?: BalanceHold
) => {
  return http.get('*/ef/v2/balance-holds/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetBalanceHoldsDetails1ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreatePaymentIntentMockHandler = (
  overrideResponse?: PaymentIntent
) => {
  return http.post('*/ef/v1/payment-intents', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getCreatePaymentIntentResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getListPaymentIntentsMockHandler = (
  overrideResponse?: PaymentIntents
) => {
  return http.get('*/ef/v1/payment-intents', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getListPaymentIntentsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetPaymentIntentMockHandler = (
  overrideResponse?: PaymentIntent
) => {
  return http.get('*/ef/v1/payment-intents/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetPaymentIntentResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdatePaymentIntentMockHandler = (
  overrideResponse?: PaymentIntent
) => {
  return http.post('*/ef/v1/payment-intents/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getUpdatePaymentIntentResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetBillingClientDetailsMockHandler = (
  overrideResponse?: BillingClientDetailsResponse
) => {
  return http.get('*/ef/v1/billing-configuration', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetBillingClientDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetDebitCardsMockHandler = (
  overrideResponse?: DebitCardsResponse
) => {
  return http.get('*/ef/v1/debit-cards', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetDebitCardsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateDebitCardMockHandler = (
  overrideResponse?: CreateDebitCardResponse
) => {
  return http.post('*/ef/v1/debit-cards', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetDebitCardMockHandler = (
  overrideResponse?: CardDetailResponse
) => {
  return http.get('*/ef/v1/debit-cards/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateCardMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/ef/v1/debit-cards/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getLockDebitCardMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/ef/v1/debit-cards/:id/lock', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getLockDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUnlockDebitCardMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/ef/v1/debit-cards/:id/unlock', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUnlockDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCancelDebitCardMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/ef/v1/debit-cards/:id/cancel', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCancelDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getReplaceDebitCardMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/ef/v1/debit-cards/:id/replace', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getReplaceDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSetDebitCardPinMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/ef/v1/debit-cards/:id/set-pin', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSetDebitCardPinResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSetDebitCardLimitMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/ef/v1/debit-cards/:id/set-limit', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSetDebitCardLimitResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAllRecipientsMockHandler = (
  overrideResponse?: ListRecipientsResponse
) => {
  return http.get('*/ef/v1/recipients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllRecipientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateRecipientMockHandler = (overrideResponse?: Recipient) => {
  return http.post('*/ef/v1/recipients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateRecipientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRecipientMockHandler = (overrideResponse?: Recipient) => {
  return http.get('*/ef/v1/recipients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRecipientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getAmendRecipientMockHandler = (overrideResponse?: Recipient) => {
  return http.post('*/ef/v1/recipients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getAmendRecipientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getRecipientsVerificationMockHandler = (
  overrideResponse?: MicrodepositVerificationResponse
) => {
  return http.post('*/ef/v1/recipients/:id/verify-microdeposit', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getRecipientsVerificationResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetFaqMockHandler = (overrideResponse?: FAQResponse) => {
  return http.get('*/ef/v1/faqs', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetFaqResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getListWebhooksMockHandler = (
  overrideResponse?: ListWebhookResponse
) => {
  return http.get('*/ef/v1/webhooks', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListWebhooksResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateWebhookMockHandler = (
  overrideResponse?: WebhookResponse
) => {
  return http.post('*/ef/v1/webhooks', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateWebhookResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetWebhookMockHandler = (
  overrideResponse?: WebhookResponse
) => {
  return http.get('*/ef/v1/webhooks/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetWebhookResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateWebhookMockHandler = (
  overrideResponse?: WebhookResponse
) => {
  return http.post('*/ef/v1/webhooks/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateWebhookResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAllCountriesMockHandler = (
  overrideResponse?: CountriesResponse
) => {
  return http.get('*/ef/v1/countries', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllCountriesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetCountrySubdivisionMockHandler = (
  overrideResponse?: CountrySubdivisionResponse
) => {
  return http.get('*/ef/v1/country-subdivision', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetCountrySubdivisionResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetLegalStructuresMockHandler = (
  overrideResponse?: LegalStructureResponse
) => {
  return http.get('*/ef/v1/legal-structures', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetLegalStructuresResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetDocumentTypesMockHandler = (
  overrideResponse?: DocumentTypesResponse
) => {
  return http.get('*/ef/v1/document-types', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetDocumentTypesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetIdTypesMockHandler = (
  overrideResponse?: IdentificationTypeResponse
) => {
  return http.get('*/ef/v1/id-types', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetIdTypesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetClientIndustryCategoriesMockHandler = (
  overrideResponse?: IndustryCategoriesResponse
) => {
  return http.get('*/ef/v1/industry-categories', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetClientIndustryCategoriesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRefProductsMockHandler = (
  overrideResponse?: ProductResponse
) => {
  return http.get('*/ef/v1/products', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRefProductsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRefBusinessTypesMockHandler = (
  overrideResponse?: BusinessTypesResponse
) => {
  return http.get('*/ef/v1/business-types', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetRefBusinessTypesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRefJobTitlesMockHandler = (
  overrideResponse?: JobTitlesResponse
) => {
  return http.get('*/ef/v1/job-titles', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRefJobTitlesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRefPartyRolesMockHandler = (
  overrideResponse?: PartyRolesResponse
) => {
  return http.get('*/ef/v1/party-roles', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRefPartyRolesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRefAddressTypesMockHandler = (
  overrideResponse?: AddressTypesResponse
) => {
  return http.get('*/ef/v1/address-types', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetRefAddressTypesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRefNatureOfOwnershipsMockHandler = (
  overrideResponse?: NatureOfOwnershipsResponse
) => {
  return http.get('*/ef/v1/nature-of-ownerships', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetRefNatureOfOwnershipsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRefPartyTypesMockHandler = (
  overrideResponse?: PartyTypesResponse
) => {
  return http.get('*/ef/v1/party-types', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRefPartyTypesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetStatementMockHandler = (overrideResponse?: string) => {
  return http.get('*/ef/v1/statements/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetStatementResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSearchStatementsMockHandler = (
  overrideResponse?: StatementsResponse
) => {
  return http.get('*/ef/v1/statements/search', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSearchStatementsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAllUsersMockHandler = (
  overrideResponse?: ListUserResponse
) => {
  return http.get('*/ef/v1/users', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllUsersResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getPostUsersMockHandler = (
  overrideResponse?: SchemasUserResponse
) => {
  return http.post('*/ef/v1/users', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostUsersResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetUserDetailsMockHandler = (
  overrideResponse?: SchemasUserResponse
) => {
  return http.get('*/ef/v1/users/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetUserDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateUserByIdMockHandler = (
  overrideResponse?: SchemasUserResponse
) => {
  return http.post('*/ef/v1/users/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateUserByIdResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAllRolesMockHandler = (
  overrideResponse?: ListRoleResponse
) => {
  return http.get('*/ef/v1/roles', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllRolesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAccountsMockHandler = (
  overrideResponse?: SchemasListAccountsResponse
) => {
  return http.get('*/ef/v1/accounts', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAccountsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getPostAccountsMockHandler = (
  overrideResponse?: SchemasAccountResponseWithStatus
) => {
  return http.post('*/ef/v1/accounts', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostAccountsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAccountMockHandler = (
  overrideResponse?: SchemasAccountResponseWithStatus
) => {
  return http.get('*/ef/v1/accounts/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAccountResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAccountBalanceMockHandler = (
  overrideResponse?: AccountBalanceResponse
) => {
  return http.get('*/ef/v1/accounts/:id/balances', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAccountBalanceResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};
export const getEmbeddedFinanceAPIMock = () => [
  getGetAllClientsMockHandler(),
  getPostClientsMockHandler(),
  getGetClientDetailsMockHandler(),
  getUpdateClientsMockHandler(),
  getGetClientVerificationMockHandler(),
  getAddClientVerificationMockHandler(),
  getDocumentsDetailsMockHandler(),
  getGetDocumentDetailsMockHandler(),
  getDownloadDocumentMockHandler(),
  getListTransactionsV2MockHandler(),
  getCreateTransactionV2MockHandler(),
  getGetTransactionV2MockHandler(),
  getCreateTransactionMockHandler(),
  getListTransactionsMockHandler(),
  getGetTransactionMockHandler(),
  getSmbdoListClientsMockHandler(),
  getSmbdoPostClientsMockHandler(),
  getSmbdoGetClientMockHandler(),
  getSmbdoUpdateClientMockHandler(),
  getSmbdoPostClientVerificationsMockHandler(),
  getSmbdoListPartiesMockHandler(),
  getSmbdoPostPartiesMockHandler(),
  getSmbdoGetPartyMockHandler(),
  getSmbdoUpdatePartyMockHandler(),
  getSmbdoListQuestionsMockHandler(),
  getSmbdoGetQuestionMockHandler(),
  getSmbdoListDocumentRequestsMockHandler(),
  getSmbdoGetDocumentRequestMockHandler(),
  getSmbdoGetAllDocumentDetailsMockHandler(),
  getSmbdoGetDocumentDetailMockHandler(),
  getSmbdoDownloadDocumentMockHandler(),
  getGetBalanceHoldsMockHandler(),
  getGetBalanceHoldsDetailsMockHandler(),
  getGetBalanceHolds1MockHandler(),
  getGetBalanceHoldsDetails1MockHandler(),
  getCreatePaymentIntentMockHandler(),
  getListPaymentIntentsMockHandler(),
  getGetPaymentIntentMockHandler(),
  getUpdatePaymentIntentMockHandler(),
  getGetBillingClientDetailsMockHandler(),
  getGetDebitCardsMockHandler(),
  getCreateDebitCardMockHandler(),
  getGetDebitCardMockHandler(),
  getUpdateCardMockHandler(),
  getLockDebitCardMockHandler(),
  getUnlockDebitCardMockHandler(),
  getCancelDebitCardMockHandler(),
  getReplaceDebitCardMockHandler(),
  getSetDebitCardPinMockHandler(),
  getSetDebitCardLimitMockHandler(),
  getGetAllRecipientsMockHandler(),
  getCreateRecipientMockHandler(),
  getGetRecipientMockHandler(),
  getAmendRecipientMockHandler(),
  getRecipientsVerificationMockHandler(),
  getGetFaqMockHandler(),
  getListWebhooksMockHandler(),
  getCreateWebhookMockHandler(),
  getGetWebhookMockHandler(),
  getUpdateWebhookMockHandler(),
  getGetAllCountriesMockHandler(),
  getGetCountrySubdivisionMockHandler(),
  getGetLegalStructuresMockHandler(),
  getGetDocumentTypesMockHandler(),
  getGetIdTypesMockHandler(),
  getGetClientIndustryCategoriesMockHandler(),
  getGetRefProductsMockHandler(),
  getGetRefBusinessTypesMockHandler(),
  getGetRefJobTitlesMockHandler(),
  getGetRefPartyRolesMockHandler(),
  getGetRefAddressTypesMockHandler(),
  getGetRefNatureOfOwnershipsMockHandler(),
  getGetRefPartyTypesMockHandler(),
  getGetStatementMockHandler(),
  getSearchStatementsMockHandler(),
  getGetAllUsersMockHandler(),
  getPostUsersMockHandler(),
  getGetUserDetailsMockHandler(),
  getUpdateUserByIdMockHandler(),
  getGetAllRolesMockHandler(),
  getGetAccountsMockHandler(),
  getPostAccountsMockHandler(),
  getGetAccountMockHandler(),
  getGetAccountBalanceMockHandler(),
];
