/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Embedded Finance Digital Onboarding API
 * Embedded Finance services from J.P. Morgan
 * OpenAPI spec version: 1.0.3
 */
import { faker } from '@faker-js/faker';
import { delay, http, HttpResponse } from 'msw';

import {
  ClientStatus,
  DocumentMetadataKeyEnum,
  DocumentRequestStatus,
  DocumentTypeSmbdo,
  NetworkRegistrationCurrencyCode,
  OrganizationType,
  PartyStatus,
  PartyTypeSmbdo,
  ProfileStatus,
  Role,
  SchemasDocumentTypeSmbdo,
  ServiceEstablishmentStatus,
  SettlementPaymentMethods,
  TransactionDeviceType,
  ValidationStatus,
  ValidationType,
  VisaDebitAcceptance,
} from './embedded-banking.schemas';
import type {
  ClientListResponse,
  ClientResponse,
  DocumentRequestListResponse,
  DocumentRequestResponse,
  ListDocumentsResponse,
  PartyListResponse,
  PartyResponse,
  QuestionListResponse,
  SchemasQuestionResponse,
  SmbdoDownloadDocument200Six,
} from './embedded-banking.schemas';

export const getSmbdoListClientsResponseMock = (
  overrideResponse: any = {}
): ClientListResponse => ({
  clients: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    outstanding: {
      attestationDocumentIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.string.uuid()),
        undefined,
      ]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyRoles: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          'AUTHORIZED_USER',
          'BENEFICIAL_OWNER',
          'CLIENT',
          'CONTROLLER',
          'DECISION_MAKER',
          'PRIMARY_CONTACT',
        ] as const),
        undefined,
      ]),
      questionIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    },
    partyId: faker.word.sample(),
    products: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    status: faker.helpers.arrayElement(Object.values(ClientStatus)),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getSmbdoPostClientsResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      networkRegistration: faker.helpers.arrayElement([
        {
          currencyCode: faker.helpers.arrayElement([
            faker.helpers.arrayElement(
              Object.values(NetworkRegistrationCurrencyCode)
            ),
            undefined,
          ]),
          serviceEstablishmentStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(
              Object.values(ServiceEstablishmentStatus)
            ),
            undefined,
          ]),
          serviceEstablishmentStatusUpdateDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          settlementPaymentMethods: faker.helpers.arrayElement([
            faker.helpers.arrayElements(
              Object.values(SettlementPaymentMethods)
            ),
            undefined,
          ]),
          settlementPaymentMethodsOptOut: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          transactionDeviceType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(TransactionDeviceType)),
            undefined,
          ]),
          visaDebitAcceptance: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(VisaDebitAcceptance)),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          mcc: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          secondaryMccList: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoGetClientResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      networkRegistration: faker.helpers.arrayElement([
        {
          currencyCode: faker.helpers.arrayElement([
            faker.helpers.arrayElement(
              Object.values(NetworkRegistrationCurrencyCode)
            ),
            undefined,
          ]),
          serviceEstablishmentStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(
              Object.values(ServiceEstablishmentStatus)
            ),
            undefined,
          ]),
          serviceEstablishmentStatusUpdateDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          settlementPaymentMethods: faker.helpers.arrayElement([
            faker.helpers.arrayElements(
              Object.values(SettlementPaymentMethods)
            ),
            undefined,
          ]),
          settlementPaymentMethodsOptOut: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          transactionDeviceType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(TransactionDeviceType)),
            undefined,
          ]),
          visaDebitAcceptance: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(VisaDebitAcceptance)),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          mcc: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          secondaryMccList: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoUpdateClientResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      networkRegistration: faker.helpers.arrayElement([
        {
          currencyCode: faker.helpers.arrayElement([
            faker.helpers.arrayElement(
              Object.values(NetworkRegistrationCurrencyCode)
            ),
            undefined,
          ]),
          serviceEstablishmentStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(
              Object.values(ServiceEstablishmentStatus)
            ),
            undefined,
          ]),
          serviceEstablishmentStatusUpdateDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          settlementPaymentMethods: faker.helpers.arrayElement([
            faker.helpers.arrayElements(
              Object.values(SettlementPaymentMethods)
            ),
            undefined,
          ]),
          settlementPaymentMethodsOptOut: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          transactionDeviceType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(TransactionDeviceType)),
            undefined,
          ]),
          visaDebitAcceptance: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(VisaDebitAcceptance)),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          mcc: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          secondaryMccList: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoListPartiesResponseMock = (
  overrideResponse: any = {}
): PartyListResponse => ({
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoPostPartiesResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  networkRegistration: faker.helpers.arrayElement([
    {
      currencyCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(
          Object.values(NetworkRegistrationCurrencyCode)
        ),
        undefined,
      ]),
      serviceEstablishmentStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ServiceEstablishmentStatus)),
        undefined,
      ]),
      serviceEstablishmentStatusUpdateDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      settlementPaymentMethods: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(SettlementPaymentMethods)),
        undefined,
      ]),
      settlementPaymentMethodsOptOut: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      transactionDeviceType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(TransactionDeviceType)),
        undefined,
      ]),
      visaDebitAcceptance: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(VisaDebitAcceptance)),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      mcc: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      secondaryMccList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetPartyResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  networkRegistration: faker.helpers.arrayElement([
    {
      currencyCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(
          Object.values(NetworkRegistrationCurrencyCode)
        ),
        undefined,
      ]),
      serviceEstablishmentStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ServiceEstablishmentStatus)),
        undefined,
      ]),
      serviceEstablishmentStatusUpdateDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      settlementPaymentMethods: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(SettlementPaymentMethods)),
        undefined,
      ]),
      settlementPaymentMethodsOptOut: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      transactionDeviceType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(TransactionDeviceType)),
        undefined,
      ]),
      visaDebitAcceptance: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(VisaDebitAcceptance)),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      mcc: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      secondaryMccList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoUpdatePartyResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  networkRegistration: faker.helpers.arrayElement([
    {
      currencyCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(
          Object.values(NetworkRegistrationCurrencyCode)
        ),
        undefined,
      ]),
      serviceEstablishmentStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ServiceEstablishmentStatus)),
        undefined,
      ]),
      serviceEstablishmentStatusUpdateDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      settlementPaymentMethods: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(SettlementPaymentMethods)),
        undefined,
      ]),
      settlementPaymentMethodsOptOut: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      transactionDeviceType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(TransactionDeviceType)),
        undefined,
      ]),
      visaDebitAcceptance: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(VisaDebitAcceptance)),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      mcc: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      secondaryMccList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoListQuestionsResponseMock = (
  overrideResponse: any = {}
): QuestionListResponse => ({
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  questions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      content: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          label: faker.word.sample(),
          locale: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      defaultLocale: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentQuestionId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      responseSchema: faker.helpers.arrayElement([
        {
          items: faker.helpers.arrayElement([
            {
              exclusiveMaximum: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              exclusiveMinimum: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              format: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'float',
                  'double',
                  'int32',
                  'int64',
                  'date',
                ] as const),
                undefined,
              ]),
              maximum: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              maxLength: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              minimum: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              minLength: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              pattern: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'boolean',
                  'string',
                  'number',
                  'integer',
                ] as const),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          maxItems: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minItems: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement(['array'] as const),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      subQuestions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          anyValuesMatch: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          questionIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetQuestionResponseMock = (
  overrideResponse: any = {}
): SchemasQuestionResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      label: faker.word.sample(),
      locale: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  defaultLocale: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  parentQuestionId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  responseSchema: faker.helpers.arrayElement([
    {
      items: faker.helpers.arrayElement([
        {
          exclusiveMaximum: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          exclusiveMinimum: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          format: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'float',
              'double',
              'int32',
              'int64',
              'date',
            ] as const),
            undefined,
          ]),
          maximum: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          maxLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minimum: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          pattern: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'boolean',
              'string',
              'number',
              'integer',
            ] as const),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      maxItems: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      minItems: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['array'] as const),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  subQuestions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      anyValuesMatch: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      questionIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoListDocumentRequestsResponseMock = (
  overrideResponse: any = {}
): DocumentRequestListResponse => ({
  documentRequests: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    documentType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(DocumentTypeSmbdo)),
      undefined,
    ]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    requirements: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        documentTypes: faker.helpers.arrayElements(
          Object.values(DocumentTypeSmbdo)
        ),
        level: faker.helpers.arrayElement([
          faker.helpers.arrayElement(['PRIMARY', 'SECONDARY'] as const),
          undefined,
        ]),
        minRequired: faker.helpers.arrayElement([
          faker.number.int({ min: 1, max: 10 }),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(DocumentRequestStatus)),
      undefined,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    validForDays: faker.helpers.arrayElement([
      faker.number.int({ min: 1, max: 180 }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getSmbdoGetDocumentRequestResponseMock = (
  overrideResponse: any = {}
): DocumentRequestResponse => ({
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  documentType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(DocumentTypeSmbdo)),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  requirements: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentTypes: faker.helpers.arrayElements(
        Object.values(DocumentTypeSmbdo)
      ),
      level: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['PRIMARY', 'SECONDARY'] as const),
        undefined,
      ]),
      minRequired: faker.helpers.arrayElement([
        faker.number.int({ min: 1, max: 10 }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(DocumentRequestStatus)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  validForDays: faker.helpers.arrayElement([
    faker.number.int({ min: 1, max: 180 }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetAllDocumentDetailsResponseMock = (
  overrideResponse: any = {}
): ListDocumentsResponse => ({
  documentDetails: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentType: faker.helpers.arrayElement(
        Object.values(SchemasDocumentTypeSmbdo)
      ),
      id: faker.string.uuid(),
      metadata: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        key: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(DocumentMetadataKeyEnum)),
          undefined,
        ]),
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetDocumentDetailResponseMock = (
  overrideResponse: any = {}
): ListDocumentsResponse => ({
  documentDetails: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentType: faker.helpers.arrayElement(
        Object.values(SchemasDocumentTypeSmbdo)
      ),
      id: faker.string.uuid(),
      metadata: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        key: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(DocumentMetadataKeyEnum)),
          undefined,
        ]),
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoDownloadDocumentResponseMock = ():
  | string
  | SmbdoDownloadDocument200Six =>
  faker.helpers.arrayElement([faker.word.sample(), {}]);

export const getSmbdoListClientsMockHandler = (
  overrideResponse?: ClientListResponse
) => {
  return http.get('*/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoListClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostClientsMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.post('*/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoPostClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetClientMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.get('*/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetClientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoUpdateClientMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.post('*/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoUpdateClientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostClientVerificationsMockHandler = () => {
  return http.post('*/clients/:id/verifications', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getSmbdoListPartiesMockHandler = (
  overrideResponse?: PartyListResponse
) => {
  return http.get('*/parties', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoListPartiesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostPartiesMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.post('*/parties', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoPostPartiesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetPartyMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.get('*/parties/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetPartyResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoUpdatePartyMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.post('*/parties/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoUpdatePartyResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostPartyValidationsMockHandler = () => {
  return http.post('*/parties/:id/validations', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getSmbdoListQuestionsMockHandler = (
  overrideResponse?: QuestionListResponse
) => {
  return http.get('*/questions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoListQuestionsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetQuestionMockHandler = (
  overrideResponse?: SchemasQuestionResponse
) => {
  return http.get('*/questions/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetQuestionResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoListDocumentRequestsMockHandler = (
  overrideResponse?: DocumentRequestListResponse
) => {
  return http.get('*/document-requests', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoListDocumentRequestsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetDocumentRequestMockHandler = (
  overrideResponse?: DocumentRequestResponse
) => {
  return http.get('*/document-requests/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetDocumentRequestResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetAllDocumentDetailsMockHandler = (
  overrideResponse?: ListDocumentsResponse
) => {
  return http.get('*/documents', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetAllDocumentDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetDocumentDetailMockHandler = (
  overrideResponse?: ListDocumentsResponse
) => {
  return http.get('*/documents/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetDocumentDetailResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoDownloadDocumentMockHandler = (
  overrideResponse?: string | SmbdoDownloadDocument200Six
) => {
  return http.get('*/documents/:id/file', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoDownloadDocumentResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};
export const getEmbeddedFinanceDigitalOnboardingAPIMock = () => [
  getSmbdoListClientsMockHandler(),
  getSmbdoPostClientsMockHandler(),
  getSmbdoGetClientMockHandler(),
  getSmbdoUpdateClientMockHandler(),
  getSmbdoPostClientVerificationsMockHandler(),
  getSmbdoListPartiesMockHandler(),
  getSmbdoPostPartiesMockHandler(),
  getSmbdoGetPartyMockHandler(),
  getSmbdoUpdatePartyMockHandler(),
  getSmbdoPostPartyValidationsMockHandler(),
  getSmbdoListQuestionsMockHandler(),
  getSmbdoGetQuestionMockHandler(),
  getSmbdoListDocumentRequestsMockHandler(),
  getSmbdoGetDocumentRequestMockHandler(),
  getSmbdoGetAllDocumentDetailsMockHandler(),
  getSmbdoGetDocumentDetailMockHandler(),
  getSmbdoDownloadDocumentMockHandler(),
];
