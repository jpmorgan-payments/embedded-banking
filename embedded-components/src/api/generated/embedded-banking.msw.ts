/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Embedded Banking Solutions API
 * Embedded Banking Solutions services from J.P. Morgan
 * OpenAPI spec version: 2.0.3
 */
import { faker } from '@faker-js/faker';
import { delay, http, HttpResponse } from 'msw';

import {
  AccountCategory,
  AccountState,
  AccountType,
  ClientStatus,
  CountryCode,
  DocumentMetadataKeyEnum,
  DocumentRequestStatus,
  DocumentTypeSmbdo,
  FeeType,
  OrganizationType,
  PartyStatus,
  PartyType,
  PartyTypeSmbdo,
  PaymentRoutingStatus,
  PaymentTypeResponse,
  ProfileStatus,
  RecipientStatus,
  RecipientType,
  Role,
  RoutingCode,
  RoutingCodeType,
  RoutingInformationTransactionType,
  SchemasDocumentTypeSmbdo,
  Status,
  TransactionStatus,
  ValidationStatus,
  ValidationType,
} from './embedded-banking.schemas';
import type {
  AccountBalanceResponse,
  AccountResponseWithStatus,
  CardDetailResponse,
  CardUpdateResponse,
  CaseCreateResponse,
  CaseDetails,
  CasesPaginationResponse,
  ClientListResponse,
  ClientResponse,
  CreateDebitCardResponse,
  DebitCardsResponse,
  DocumentRequestListResponse,
  DocumentRequestResponse,
  ListAccountsResponse,
  ListDocumentsResponse,
  ListRecipientsResponse,
  ListTransactionsSearchResponseV2,
  ListUserResponse,
  ListWebhookResponse,
  MicrodepositVerificationResponse,
  PartyListResponse,
  PartyResponse,
  QuestionListResponse,
  Recipient,
  SchemasQuestionResponse,
  SmbdoDownloadDocument200Six,
  StatementsResponse,
  TransactionGetResponseV2,
  TransactionResponseV2,
  UserResponse,
  WebhookResponse,
} from './embedded-banking.schemas';

export const getSmbdoListClientsResponseMock = (
  overrideResponse: any = {}
): ClientListResponse => ({
  clients: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    outstanding: {
      attestationDocumentIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.string.uuid()),
        undefined,
      ]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      partyRoles: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          'AUTHORIZED_USER',
          'BENEFICIAL_OWNER',
          'CLIENT',
          'CONTROLLER',
          'DECISION_MAKER',
          'PRIMARY_CONTACT',
        ] as const),
        undefined,
      ]),
      questionIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    },
    partyId: faker.word.sample(),
    products: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    status: faker.helpers.arrayElement(Object.values(ClientStatus)),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getSmbdoPostClientsResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoGetClientResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoUpdateClientResponseMock = (
  overrideResponse: any = {}
): ClientResponse => ({
  attestations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      attestationTime: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      attesterFullName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      documentId: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      ipAddress: faker.helpers.arrayElement([faker.internet.ipv4(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.word.sample(),
  outstanding: {
    attestationDocumentIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.string.uuid()),
      undefined,
    ]),
    documentRequestIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    partyRoles: faker.helpers.arrayElement([
      faker.helpers.arrayElements([
        'AUTHORIZED_USER',
        'BENEFICIAL_OWNER',
        'CLIENT',
        'CONTROLLER',
        'DECISION_MAKER',
        'PRIMARY_CONTACT',
      ] as const),
      undefined,
    ]),
    questionIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    ...overrideResponse,
  },
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      access: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          birthDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          countryOfResidence: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          firstName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          individualIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          jobTitle: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jobTitleDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          lastName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          middleName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          nameSuffix: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          natureOfOwnership: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          soleOwner: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      organizationDetails: faker.helpers.arrayElement([
        {
          addresses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              addressLines: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.word.sample()),
              addressType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'LEGAL_ADDRESS',
                  'MAILING_ADDRESS',
                  'BUSINESS_ADDRESS',
                  'RESIDENTIAL_ADDRESS',
                ] as const),
                undefined,
              ]),
              city: faker.word.sample(),
              country: faker.word.sample(),
              postalCode: faker.word.sample(),
              state: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          associatedCountries: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          countryOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          entitiesInOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          industryCategory: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          industryType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          jurisdiction: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationDescription: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              description: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              expiryDate: faker.helpers.arrayElement([
                faker.date.past().toISOString().split('T')[0],
                undefined,
              ]),
              idType: faker.helpers.arrayElement([
                'EIN',
                'BUSINESS_REGISTRATION_ID',
              ] as const),
              issuer: faker.word.sample(),
              value: faker.word.sample(),
              ...overrideResponse,
            })),
            undefined,
          ]),
          organizationName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          organizationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(OrganizationType)),
            undefined,
          ]),
          phone: faker.helpers.arrayElement([
            {
              countryCode: faker.word.sample(),
              phoneNumber: faker.word.sample(),
              phoneType: faker.helpers.arrayElement([
                'BUSINESS_PHONE',
                'MOBILE_PHONE',
                'ALTERNATE_PHONE',
              ] as const),
              ...overrideResponse,
            },
            undefined,
          ]),
          significantOwnership: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          tradeOverInternet: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          websiteAvailable: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          yearOfFormation: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      parentExternalId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      validationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          comments: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          documentRequestIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          fields: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              displayName: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              name: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          identities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          validationStatus: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationStatus)),
            undefined,
          ]),
          validationType: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(ValidationType)),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  partyId: faker.word.sample(),
  products: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.word.sample()),
  questionResponses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      questionId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      values: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(ClientStatus)),
  ...overrideResponse,
});

export const getSmbdoListPartiesResponseMock = (
  overrideResponse: any = {}
): PartyListResponse => ({
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parties: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      partyType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
        undefined,
      ]),
      profileStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ProfileStatus)),
        undefined,
      ]),
      roles: faker.helpers.arrayElement([
        faker.helpers.arrayElements(Object.values(Role)),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(PartyStatus)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoPostPartiesResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetPartyResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoUpdatePartyResponseMock = (
  overrideResponse: any = {}
): PartyResponse => ({
  access: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  externalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  individualDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      birthDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      countryOfResidence: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      individualIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement(['SSN', 'ITIN'] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      jobTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      jobTitleDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      nameSuffix: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      natureOfOwnership: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      soleOwner: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  organizationDetails: faker.helpers.arrayElement([
    {
      addresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          addressLines: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.word.sample()),
          addressType: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'LEGAL_ADDRESS',
              'MAILING_ADDRESS',
              'BUSINESS_ADDRESS',
              'RESIDENTIAL_ADDRESS',
            ] as const),
            undefined,
          ]),
          city: faker.word.sample(),
          country: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      associatedCountries: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      countryOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      dbaName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitiesInOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      industryCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      industryType: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      jurisdiction: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationDescription: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          expiryDate: faker.helpers.arrayElement([
            faker.date.past().toISOString().split('T')[0],
            undefined,
          ]),
          idType: faker.helpers.arrayElement([
            'EIN',
            'BUSINESS_REGISTRATION_ID',
          ] as const),
          issuer: faker.word.sample(),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      organizationName: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      organizationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(OrganizationType)),
        undefined,
      ]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          phoneType: faker.helpers.arrayElement([
            'BUSINESS_PHONE',
            'MOBILE_PHONE',
            'ALTERNATE_PHONE',
          ] as const),
          ...overrideResponse,
        },
        undefined,
      ]),
      significantOwnership: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      tradeOverInternet: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      websiteAvailable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      yearOfFormation: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  parentExternalId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  parentPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyTypeSmbdo)),
    undefined,
  ]),
  profileStatus: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(ProfileStatus)),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Role)),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PartyStatus)),
    undefined,
  ]),
  validationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comments: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      documentRequestIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      fields: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          displayName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      identities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      validationStatus: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationStatus)),
        undefined,
      ]),
      validationType: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ValidationType)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoListQuestionsResponseMock = (
  overrideResponse: any = {}
): QuestionListResponse => ({
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  questions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      content: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          label: faker.word.sample(),
          locale: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      defaultLocale: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      parentQuestionId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      responseSchema: faker.helpers.arrayElement([
        {
          items: faker.helpers.arrayElement([
            {
              exclusiveMaximum: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              exclusiveMinimum: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              format: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'float',
                  'double',
                  'int32',
                  'int64',
                  'date',
                ] as const),
                undefined,
              ]),
              maximum: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              maxLength: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              minimum: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              minLength: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              pattern: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  'boolean',
                  'string',
                  'number',
                  'integer',
                ] as const),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          maxItems: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minItems: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement(['array'] as const),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      subQuestions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          anyValuesMatch: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          questionIds: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.word.sample()),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetQuestionResponseMock = (
  overrideResponse: any = {}
): SchemasQuestionResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      label: faker.word.sample(),
      locale: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  defaultLocale: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  parentQuestionId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  responseSchema: faker.helpers.arrayElement([
    {
      items: faker.helpers.arrayElement([
        {
          exclusiveMaximum: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          exclusiveMinimum: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          format: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'float',
              'double',
              'int32',
              'int64',
              'date',
            ] as const),
            undefined,
          ]),
          maximum: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          maxLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minimum: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          minLength: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          pattern: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'boolean',
              'string',
              'number',
              'integer',
            ] as const),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      maxItems: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      minItems: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['array'] as const),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  subQuestions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      anyValuesMatch: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      questionIds: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetAllDocumentDetailsResponseMock = (
  overrideResponse: any = {}
): ListDocumentsResponse => ({
  documentDetails: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentType: faker.helpers.arrayElement(
        Object.values(DocumentTypeSmbdo)
      ),
      id: faker.string.uuid(),
      metadata: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        key: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(DocumentMetadataKeyEnum)),
          undefined,
        ]),
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoGetDocumentDetailResponseMock = (
  overrideResponse: any = {}
): ListDocumentsResponse => ({
  documentDetails: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentType: faker.helpers.arrayElement(
        Object.values(DocumentTypeSmbdo)
      ),
      id: faker.string.uuid(),
      metadata: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        key: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(DocumentMetadataKeyEnum)),
          undefined,
        ]),
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSmbdoDownloadDocumentResponseMock = ():
  | string
  | SmbdoDownloadDocument200Six =>
  faker.helpers.arrayElement([faker.word.sample(), {}]);

export const getSmbdoListDocumentRequestsResponseMock = (
  overrideResponse: any = {}
): DocumentRequestListResponse => ({
  documentRequests: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    documentType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(SchemasDocumentTypeSmbdo)),
      undefined,
    ]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    requirements: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        documentTypes: faker.helpers.arrayElements(
          Object.values(SchemasDocumentTypeSmbdo)
        ),
        level: faker.helpers.arrayElement([
          faker.helpers.arrayElement(['PRIMARY', 'SECONDARY'] as const),
          undefined,
        ]),
        minRequired: faker.helpers.arrayElement([
          faker.number.int({ min: 1, max: 10 }),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(DocumentRequestStatus)),
      undefined,
    ]),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    validForDays: faker.helpers.arrayElement([
      faker.number.int({ min: 1, max: 180 }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getSmbdoGetDocumentRequestResponseMock = (
  overrideResponse: any = {}
): DocumentRequestResponse => ({
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  country: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  documentType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SchemasDocumentTypeSmbdo)),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  requirements: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      documentTypes: faker.helpers.arrayElements(
        Object.values(SchemasDocumentTypeSmbdo)
      ),
      level: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['PRIMARY', 'SECONDARY'] as const),
        undefined,
      ]),
      minRequired: faker.helpers.arrayElement([
        faker.number.int({ min: 1, max: 10 }),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(DocumentRequestStatus)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  validForDays: faker.helpers.arrayElement([
    faker.number.int({ min: 1, max: 180 }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccountsResponseMock = (
  overrideResponse: any = {}
): ListAccountsResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    category: faker.helpers.arrayElement(Object.values(AccountCategory)),
    clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    id: faker.word.sample(),
    label: faker.word.sample(),
    paymentRoutingInformation: faker.helpers.arrayElement([
      {
        accountNumber: faker.word.sample(),
        country: faker.helpers.arrayElement(Object.values(CountryCode)),
        routingInformation: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            type: faker.helpers.arrayElement(Object.values(RoutingCode)),
            value: faker.word.sample(),
            ...overrideResponse,
          })),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    state: faker.helpers.arrayElement(Object.values(AccountState)),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getPostAccountsResponseMock = (
  overrideResponse: any = {}
): AccountResponseWithStatus => ({
  category: faker.helpers.arrayElement(Object.values(AccountCategory)),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  closureReason: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  label: faker.word.sample(),
  paymentRoutingInformation: faker.helpers.arrayElement([
    {
      accountNumber: faker.word.sample(),
      country: faker.helpers.arrayElement(Object.values(CountryCode)),
      routingInformation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          type: faker.helpers.arrayElement(Object.values(RoutingCode)),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      status: faker.helpers.arrayElement(Object.values(PaymentRoutingStatus)),
      ...overrideResponse,
    },
    undefined,
  ]),
  state: faker.helpers.arrayElement(Object.values(AccountState)),
  ...overrideResponse,
});

export const getGetAccountResponseMock = (
  overrideResponse: any = {}
): AccountResponseWithStatus => ({
  category: faker.helpers.arrayElement(Object.values(AccountCategory)),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  closureReason: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  label: faker.word.sample(),
  paymentRoutingInformation: faker.helpers.arrayElement([
    {
      accountNumber: faker.word.sample(),
      country: faker.helpers.arrayElement(Object.values(CountryCode)),
      routingInformation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          type: faker.helpers.arrayElement(Object.values(RoutingCode)),
          value: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      status: faker.helpers.arrayElement(Object.values(PaymentRoutingStatus)),
      ...overrideResponse,
    },
    undefined,
  ]),
  state: faker.helpers.arrayElement(Object.values(AccountState)),
  ...overrideResponse,
});

export const getGetAccountBalanceResponseMock = (
  overrideResponse: any = {}
): AccountBalanceResponse => ({
  balanceTypes: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    amount: faker.number.int({ min: undefined, max: undefined }),
    typeCode: faker.helpers.arrayElement(['ITAV', 'ITBD'] as const),
    ...overrideResponse,
  })),
  currency: faker.word.sample(),
  date: faker.date.past().toISOString().split('T')[0],
  id: faker.word.sample(),
  ...overrideResponse,
});

export const getGetAllRecipientsResponseMock = (
  overrideResponse: any = {}
): ListRecipientsResponse => ({
  limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  total_items: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
  recipients: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      account: {
        countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
        number: faker.word.sample(),
        routingCodeType: faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(RoutingCodeType)),
          undefined,
        ]),
        routingInformation: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            routingCodeType: faker.helpers.arrayElement(
              Object.values(RoutingCodeType)
            ),
            routingNumber: faker.word.sample(),
            transactionType: faker.helpers.arrayElement(
              Object.values(RoutingInformationTransactionType)
            ),
            ...overrideResponse,
          })),
          undefined,
        ]),
        routingNumber: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        type: faker.helpers.arrayElement(Object.values(AccountType)),
        ...overrideResponse,
      },
      accountValidationResponse: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          profileName: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          requestId: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          responses: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              codes: faker.helpers.arrayElement([
                {
                  authentication: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  authenticationMicroDeposit: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  error: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  verification: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  verificationMicroDeposit: faker.helpers.arrayElement([
                    {
                      code: faker.helpers.arrayElement([
                        faker.number.int({ min: undefined, max: undefined }),
                        undefined,
                      ]),
                      message: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                {
                  accountNumber: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  financialInstitutionId: faker.helpers.arrayElement([
                    {
                      clearingSystemId: faker.helpers.arrayElement([
                        {
                          id: faker.helpers.arrayElement([
                            faker.word.sample(),
                            undefined,
                          ]),
                          idType: faker.helpers.arrayElement([
                            faker.word.sample(),
                            undefined,
                          ]),
                          ...overrideResponse,
                        },
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              provider: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              ...overrideResponse,
            })),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      id: faker.word.sample(),
      partyDetails: {
        address: faker.helpers.arrayElement([
          {
            addressLine1: faker.word.sample(),
            addressLine2: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            addressLine3: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            addressType: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            city: faker.word.sample(),
            countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
            postalCode: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
            ...overrideResponse,
          },
          undefined,
        ]),
        businessName: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        contacts: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            contactType: faker.helpers.arrayElement([
              'EMAIL',
              'WEBSITE',
              'PHONE',
            ] as const),
            countryCode: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            value: faker.word.sample(),
            ...overrideResponse,
          })),
          undefined,
        ]),
        firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        type: faker.helpers.arrayElement(Object.values(PartyType)),
        ...overrideResponse,
      },
      partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(RecipientStatus)),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(RecipientType)),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateRecipientResponseMock = (
  overrideResponse: any = {}
): Recipient => ({
  account: {
    countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
    number: faker.word.sample(),
    routingCodeType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(RoutingCodeType)),
      undefined,
    ]),
    routingInformation: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        routingCodeType: faker.helpers.arrayElement(
          Object.values(RoutingCodeType)
        ),
        routingNumber: faker.word.sample(),
        transactionType: faker.helpers.arrayElement(
          Object.values(RoutingInformationTransactionType)
        ),
        ...overrideResponse,
      })),
      undefined,
    ]),
    routingNumber: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(AccountType)),
    ...overrideResponse,
  },
  accountValidationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      profileName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      responses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          codes: faker.helpers.arrayElement([
            {
              authentication: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              authenticationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              error: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verification: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verificationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          details: faker.helpers.arrayElement([
            {
              accountNumber: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              financialInstitutionId: faker.helpers.arrayElement([
                {
                  clearingSystemId: faker.helpers.arrayElement([
                    {
                      id: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      idType: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  id: faker.word.sample(),
  partyDetails: {
    address: faker.helpers.arrayElement([
      {
        addressLine1: faker.word.sample(),
        addressLine2: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressLine3: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressType: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        city: faker.word.sample(),
        countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
        postalCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    contacts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        contactType: faker.helpers.arrayElement([
          'EMAIL',
          'WEBSITE',
          'PHONE',
        ] as const),
        countryCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        value: faker.word.sample(),
        ...overrideResponse,
      })),
      undefined,
    ]),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(PartyType)),
    ...overrideResponse,
  },
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientStatus)),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientType)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRecipientResponseMock = (
  overrideResponse: any = {}
): Recipient => ({
  account: {
    countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
    number: faker.word.sample(),
    routingCodeType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(RoutingCodeType)),
      undefined,
    ]),
    routingInformation: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        routingCodeType: faker.helpers.arrayElement(
          Object.values(RoutingCodeType)
        ),
        routingNumber: faker.word.sample(),
        transactionType: faker.helpers.arrayElement(
          Object.values(RoutingInformationTransactionType)
        ),
        ...overrideResponse,
      })),
      undefined,
    ]),
    routingNumber: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(AccountType)),
    ...overrideResponse,
  },
  accountValidationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      profileName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      responses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          codes: faker.helpers.arrayElement([
            {
              authentication: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              authenticationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              error: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verification: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verificationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          details: faker.helpers.arrayElement([
            {
              accountNumber: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              financialInstitutionId: faker.helpers.arrayElement([
                {
                  clearingSystemId: faker.helpers.arrayElement([
                    {
                      id: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      idType: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  id: faker.word.sample(),
  partyDetails: {
    address: faker.helpers.arrayElement([
      {
        addressLine1: faker.word.sample(),
        addressLine2: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressLine3: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressType: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        city: faker.word.sample(),
        countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
        postalCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    contacts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        contactType: faker.helpers.arrayElement([
          'EMAIL',
          'WEBSITE',
          'PHONE',
        ] as const),
        countryCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        value: faker.word.sample(),
        ...overrideResponse,
      })),
      undefined,
    ]),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(PartyType)),
    ...overrideResponse,
  },
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientStatus)),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientType)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getAmendRecipientResponseMock = (
  overrideResponse: any = {}
): Recipient => ({
  account: {
    countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
    number: faker.word.sample(),
    routingCodeType: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(RoutingCodeType)),
      undefined,
    ]),
    routingInformation: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        routingCodeType: faker.helpers.arrayElement(
          Object.values(RoutingCodeType)
        ),
        routingNumber: faker.word.sample(),
        transactionType: faker.helpers.arrayElement(
          Object.values(RoutingInformationTransactionType)
        ),
        ...overrideResponse,
      })),
      undefined,
    ]),
    routingNumber: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(AccountType)),
    ...overrideResponse,
  },
  accountValidationResponse: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      profileName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      responses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          codes: faker.helpers.arrayElement([
            {
              authentication: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              authenticationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              error: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verification: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              verificationMicroDeposit: faker.helpers.arrayElement([
                {
                  code: faker.helpers.arrayElement([
                    faker.number.int({ min: undefined, max: undefined }),
                    undefined,
                  ]),
                  message: faker.helpers.arrayElement([
                    faker.word.sample(),
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          details: faker.helpers.arrayElement([
            {
              accountNumber: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              financialInstitutionId: faker.helpers.arrayElement([
                {
                  clearingSystemId: faker.helpers.arrayElement([
                    {
                      id: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      idType: faker.helpers.arrayElement([
                        faker.word.sample(),
                        undefined,
                      ]),
                      ...overrideResponse,
                    },
                    undefined,
                  ]),
                  ...overrideResponse,
                },
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  id: faker.word.sample(),
  partyDetails: {
    address: faker.helpers.arrayElement([
      {
        addressLine1: faker.word.sample(),
        addressLine2: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressLine3: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        addressType: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        city: faker.word.sample(),
        countryCode: faker.helpers.arrayElement(Object.values(CountryCode)),
        postalCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    businessName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    contacts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        contactType: faker.helpers.arrayElement([
          'EMAIL',
          'WEBSITE',
          'PHONE',
        ] as const),
        countryCode: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        value: faker.word.sample(),
        ...overrideResponse,
      })),
      undefined,
    ]),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement(Object.values(PartyType)),
    ...overrideResponse,
  },
  partyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientStatus)),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(RecipientType)),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getRecipientsVerificationResponseMock = (
  overrideResponse: any = {}
): MicrodepositVerificationResponse => ({
  status: faker.helpers.arrayElement([
    'VERIFIED',
    'FAILED',
    'FAILED_MAX_ATTEMPTS_EXCEEDED',
  ] as const),
  ...overrideResponse,
});

export const getListTransactionsV2ResponseMock = (
  overrideResponse: any = {}
): ListTransactionsSearchResponseV2 => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    amount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    creditorAccountId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    creditorAccountNumber: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    creditorClientId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    debtorAccountId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorAccountNumber: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorClientId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ledgerBalance: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    originatingId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    originatingTransactionType: faker.helpers.arrayElement([{}, undefined]),
    paymentDate: faker.helpers.arrayElement([
      faker.date.past().toISOString().split('T')[0],
      undefined,
    ]),
    postingVersion: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(TransactionStatus)),
      undefined,
    ]),
    transactionReferenceId: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(PaymentTypeResponse)),
      undefined,
    ]),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getCreateTransactionV2ResponseMock = (
  overrideResponse: any = {}
): TransactionResponseV2 => ({
  amount: faker.number.int({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  creditorAccountId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.word.sample(),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  memo: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  paymentDate: faker.date.past().toISOString().split('T')[0],
  recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement(Object.values(TransactionStatus)),
  transactionReferenceId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentTypeResponse)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTransactionV2ResponseMock = (
  overrideResponse: any = {}
): TransactionGetResponseV2 => ({
  amount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  creditorAccountId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorClientId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  creditorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  currency: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorAccountNumber: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  debtorClientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  debtorName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  effectiveDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  error: faker.helpers.arrayElement([
    {
      context: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          field: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          location: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              'BODY',
              'QUERY',
              'PATH',
              'HEADER',
            ] as const),
            undefined,
          ]),
          message: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      httpStatus: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      requestId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      title: faker.word.sample(),
      traceId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  feeType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(FeeType)),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ledgerBalance: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  memo: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  originatingId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  originatingTransactionType: faker.helpers.arrayElement([{}, undefined]),
  paymentDate: faker.helpers.arrayElement([
    faker.date.past().toISOString().split('T')[0],
    undefined,
  ]),
  postingVersion: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  recipientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  transactionReferenceId: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(PaymentTypeResponse)),
    undefined,
  ]),
  ...overrideResponse,
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(TransactionStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetStatementResponseMock = (): string => faker.word.sample();

export const getSearchStatementsResponseMock = (
  overrideResponse: any = {}
): StatementsResponse => ({
  statements: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      metaData: faker.helpers.arrayElement([
        {
          accountNumber: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          createdDate: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          month: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          year: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetCasesResponseMock = (
  overrideResponse: any = {}
): CasesPaginationResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    createdBy: {
      agent: faker.datatype.boolean(),
      name: faker.word.sample(),
      ...overrideResponse,
    },
    createdDate: faker.word.sample(),
    id: faker.word.sample(),
    status: faker.helpers.arrayElement(['CLOSED', 'REOPEN', 'OPEN'] as const),
    subject: faker.word.sample(),
    type: faker.helpers.arrayElement([
      'ACCOUNT',
      'CARD',
      'ENROLLMENT_OR_SIGNUP',
      'OTHER',
      'PROFILE',
      'STATEMENT',
      'SUSPICIOUS_ACTIVITY',
      'TRANSACTION',
    ] as const),
    updatedDate: faker.word.sample(),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.number.int({ min: undefined, max: undefined }),
    page: faker.number.int({ min: undefined, max: undefined }),
    totalItems: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getCreateCaseResponseMock = (
  overrideResponse: any = {}
): CaseCreateResponse => ({
  createdDate: faker.word.sample(),
  id: faker.word.sample(),
  ...overrideResponse,
});

export const getGetCaseResponseMock = (
  overrideResponse: any = {}
): CaseDetails => ({
  comments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comment: faker.word.sample(),
      commentedBy: {
        agent: faker.datatype.boolean(),
        name: faker.word.sample(),
        ...overrideResponse,
      },
      createdDate: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  createdBy: {
    agent: faker.datatype.boolean(),
    name: faker.word.sample(),
    ...overrideResponse,
  },
  createdDate: faker.word.sample(),
  description: faker.word.sample(),
  id: faker.word.sample(),
  origin: faker.helpers.arrayElement(['PHONE', 'FORM', 'EMAIL'] as const),
  status: faker.helpers.arrayElement(['CLOSED', 'REOPEN', 'OPEN'] as const),
  subject: faker.word.sample(),
  type: faker.helpers.arrayElement([
    'ACCOUNT',
    'CARD',
    'ENROLLMENT_OR_SIGNUP',
    'OTHER',
    'PROFILE',
    'STATEMENT',
    'SUSPICIOUS_ACTIVITY',
    'TRANSACTION',
  ] as const),
  updatedDate: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateCaseResponseMock = (
  overrideResponse: any = {}
): CaseDetails => ({
  comments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      comment: faker.word.sample(),
      commentedBy: {
        agent: faker.datatype.boolean(),
        name: faker.word.sample(),
        ...overrideResponse,
      },
      createdDate: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  createdBy: {
    agent: faker.datatype.boolean(),
    name: faker.word.sample(),
    ...overrideResponse,
  },
  createdDate: faker.word.sample(),
  description: faker.word.sample(),
  id: faker.word.sample(),
  origin: faker.helpers.arrayElement(['PHONE', 'FORM', 'EMAIL'] as const),
  status: faker.helpers.arrayElement(['CLOSED', 'REOPEN', 'OPEN'] as const),
  subject: faker.word.sample(),
  type: faker.helpers.arrayElement([
    'ACCOUNT',
    'CARD',
    'ENROLLMENT_OR_SIGNUP',
    'OTHER',
    'PROFILE',
    'STATEMENT',
    'SUSPICIOUS_ACTIVITY',
    'TRANSACTION',
  ] as const),
  updatedDate: faker.word.sample(),
  ...overrideResponse,
});

export const getGetDebitCardsResponseMock = (
  overrideResponse: any = {}
): DebitCardsResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    accountId: faker.word.sample(),
    expirationDate: faker.word.sample(),
    firstName: faker.word.sample(),
    id: faker.word.sample(),
    last4: faker.word.sample(),
    lastName: faker.word.sample(),
    maxCashWithdrawalLimit: faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      undefined,
    ]),
    maxSpendLimit: faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      undefined,
    ]),
    middleName: faker.word.sample(),
    status: faker.helpers.arrayElement([
      'ACTIVE',
      'INACTIVE',
      'SUSPEND',
      'DAMAGED',
      'DEACTIVE',
      'DEFECTIVE',
      'LOST',
      'STOLEN',
      'UNDELIVER',
      'IRREGACT',
    ] as const),
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getCreateDebitCardResponseMock = (
  overrideResponse: any = {}
): CreateDebitCardResponse => ({
  accountId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  link: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetDebitCardResponseMock = (
  overrideResponse: any = {}
): CardDetailResponse => ({
  accountId: faker.word.sample(),
  link: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateCardResponseMock = (
  overrideResponse: any = {}
): CardUpdateResponse => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetAllUsersResponseMock = (
  overrideResponse: any = {}
): ListUserResponse => ({
  items: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      address: faker.helpers.arrayElement([
        {
          addressLine1: faker.word.sample(),
          addressLine2: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressLine3: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          addressType: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          city: faker.word.sample(),
          countryCode: faker.word.sample(),
          postalCode: faker.word.sample(),
          state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          ...overrideResponse,
        },
        undefined,
      ]),
      emailAddress: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      phone: faker.helpers.arrayElement([
        {
          countryCode: faker.word.sample(),
          phoneNumber: faker.word.sample(),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
      clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      relatedPartyId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(Status)),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      limit: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_items: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostUsersResponseMock = (
  overrideResponse: any = {}
): UserResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  emailAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  relatedPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(Status)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetUserDetailsResponseMock = (
  overrideResponse: any = {}
): UserResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  emailAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  relatedPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(Status)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateUserByIdResponseMock = (
  overrideResponse: any = {}
): UserResponse => ({
  address: faker.helpers.arrayElement([
    {
      addressLine1: faker.word.sample(),
      addressLine2: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressLine3: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      addressType: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      city: faker.word.sample(),
      countryCode: faker.word.sample(),
      postalCode: faker.word.sample(),
      state: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  emailAddress: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  middleName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([
    {
      countryCode: faker.word.sample(),
      phoneNumber: faker.word.sample(),
      ...overrideResponse,
    },
    undefined,
  ]),
  ...overrideResponse,
  clientId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  relatedPartyId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(Status)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListWebhooksResponseMock = (
  overrideResponse: any = {}
): ListWebhookResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    id: faker.word.sample(),
    status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
    subscriptions: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      eventType: faker.helpers.arrayElement([
        'TRANSACTION_COMPLETED',
        'TRANSACTION_FAILED',
        'CLIENT_ONBOARDING',
        'REMITTANCE_STATUS',
        'PARTY_NETWORK_SCREENING',
        'CLIENT_ONBOARDING_COMPLETED',
        'CLIENT_OFFBOARDING_COMPLETED',
        'CLIENT_ADD_INFO_REQUESTED',
        'CLIENT_ADD_INFO_VERIFIED',
        'CLIENT_ADD_INFO_FAILED',
      ] as const),
      ...overrideResponse,
    })),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    ...overrideResponse,
  })),
  metadata: {
    limit: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    total_items: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getCreateWebhookResponseMock = (
  overrideResponse: any = {}
): WebhookResponse => ({
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
  subscriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    eventType: faker.helpers.arrayElement([
      'TRANSACTION_COMPLETED',
      'TRANSACTION_FAILED',
      'CLIENT_ONBOARDING',
      'REMITTANCE_STATUS',
      'PARTY_NETWORK_SCREENING',
      'CLIENT_ONBOARDING_COMPLETED',
      'CLIENT_OFFBOARDING_COMPLETED',
      'CLIENT_ADD_INFO_REQUESTED',
      'CLIENT_ADD_INFO_VERIFIED',
      'CLIENT_ADD_INFO_FAILED',
    ] as const),
    ...overrideResponse,
  })),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getGetWebhookResponseMock = (
  overrideResponse: any = {}
): WebhookResponse => ({
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
  subscriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    eventType: faker.helpers.arrayElement([
      'TRANSACTION_COMPLETED',
      'TRANSACTION_FAILED',
      'CLIENT_ONBOARDING',
      'REMITTANCE_STATUS',
      'PARTY_NETWORK_SCREENING',
      'CLIENT_ONBOARDING_COMPLETED',
      'CLIENT_OFFBOARDING_COMPLETED',
      'CLIENT_ADD_INFO_REQUESTED',
      'CLIENT_ADD_INFO_VERIFIED',
      'CLIENT_ADD_INFO_FAILED',
    ] as const),
    ...overrideResponse,
  })),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getUpdateWebhookResponseMock = (
  overrideResponse: any = {}
): WebhookResponse => ({
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  status: faker.helpers.arrayElement(['ACTIVE', 'INACTIVE'] as const),
  subscriptions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    eventType: faker.helpers.arrayElement([
      'TRANSACTION_COMPLETED',
      'TRANSACTION_FAILED',
      'CLIENT_ONBOARDING',
      'REMITTANCE_STATUS',
      'PARTY_NETWORK_SCREENING',
      'CLIENT_ONBOARDING_COMPLETED',
      'CLIENT_OFFBOARDING_COMPLETED',
      'CLIENT_ADD_INFO_REQUESTED',
      'CLIENT_ADD_INFO_VERIFIED',
      'CLIENT_ADD_INFO_FAILED',
    ] as const),
    ...overrideResponse,
  })),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getSmbdoListClientsMockHandler = (
  overrideResponse?: ClientListResponse
) => {
  return http.get('*/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoListClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostClientsMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.post('*/clients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoPostClientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetClientMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.get('*/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetClientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoUpdateClientMockHandler = (
  overrideResponse?: ClientResponse
) => {
  return http.post('*/clients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoUpdateClientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostClientVerificationsMockHandler = () => {
  return http.post('*/clients/:id/verifications', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getSmbdoListPartiesMockHandler = (
  overrideResponse?: PartyListResponse
) => {
  return http.get('*/parties', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoListPartiesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoPostPartiesMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.post('*/parties', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoPostPartiesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetPartyMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.get('*/parties/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetPartyResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoUpdatePartyMockHandler = (
  overrideResponse?: PartyResponse
) => {
  return http.post('*/parties/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoUpdatePartyResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoListQuestionsMockHandler = (
  overrideResponse?: QuestionListResponse
) => {
  return http.get('*/questions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoListQuestionsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetQuestionMockHandler = (
  overrideResponse?: SchemasQuestionResponse
) => {
  return http.get('*/questions/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSmbdoGetQuestionResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetAllDocumentDetailsMockHandler = (
  overrideResponse?: ListDocumentsResponse
) => {
  return http.get('*/documents', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetAllDocumentDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetDocumentDetailMockHandler = (
  overrideResponse?: ListDocumentsResponse
) => {
  return http.get('*/documents/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetDocumentDetailResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoDownloadDocumentMockHandler = (
  overrideResponse?: string | SmbdoDownloadDocument200Six
) => {
  return http.get('*/documents/:id/file', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoDownloadDocumentResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoListDocumentRequestsMockHandler = (
  overrideResponse?: DocumentRequestListResponse
) => {
  return http.get('*/document-requests', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoListDocumentRequestsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSmbdoGetDocumentRequestMockHandler = (
  overrideResponse?: DocumentRequestResponse
) => {
  return http.get('*/document-requests/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSmbdoGetDocumentRequestResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAccountsMockHandler = (
  overrideResponse?: ListAccountsResponse
) => {
  return http.get('*/accounts', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAccountsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getPostAccountsMockHandler = (
  overrideResponse?: AccountResponseWithStatus
) => {
  return http.post('*/accounts', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostAccountsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAccountMockHandler = (
  overrideResponse?: AccountResponseWithStatus
) => {
  return http.get('*/accounts/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAccountResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAccountBalanceMockHandler = (
  overrideResponse?: AccountBalanceResponse
) => {
  return http.get('*/accounts/:id/balances', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAccountBalanceResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAllRecipientsMockHandler = (
  overrideResponse?: ListRecipientsResponse
) => {
  return http.get('*/recipients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllRecipientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateRecipientMockHandler = (overrideResponse?: Recipient) => {
  return http.post('*/recipients', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateRecipientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRecipientMockHandler = (overrideResponse?: Recipient) => {
  return http.get('*/recipients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetRecipientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getAmendRecipientMockHandler = (overrideResponse?: Recipient) => {
  return http.post('*/recipients/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getAmendRecipientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getRecipientsVerificationMockHandler = (
  overrideResponse?: MicrodepositVerificationResponse
) => {
  return http.post('*/recipients/:id/verify-microdeposit', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getRecipientsVerificationResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getListTransactionsV2MockHandler = (
  overrideResponse?: ListTransactionsSearchResponseV2
) => {
  return http.get('*/transactions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getListTransactionsV2ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateTransactionV2MockHandler = (
  overrideResponse?: TransactionResponseV2
) => {
  return http.post('*/transactions', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getCreateTransactionV2ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetTransactionV2MockHandler = (
  overrideResponse?: TransactionGetResponseV2
) => {
  return http.get('*/transactions/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetTransactionV2ResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetStatementMockHandler = (overrideResponse?: string) => {
  return http.get('*/statements/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetStatementResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getSearchStatementsMockHandler = (
  overrideResponse?: StatementsResponse
) => {
  return http.get('*/statements/search', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getSearchStatementsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetCasesMockHandler = (
  overrideResponse?: CasesPaginationResponse
) => {
  return http.get('*/cases', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetCasesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateCaseMockHandler = (
  overrideResponse?: CaseCreateResponse
) => {
  return http.post('*/cases', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateCaseResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetCaseMockHandler = (overrideResponse?: CaseDetails) => {
  return http.get('*/cases/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetCaseResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateCaseMockHandler = (overrideResponse?: CaseDetails) => {
  return http.post('*/cases/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateCaseResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetDebitCardsMockHandler = (
  overrideResponse?: DebitCardsResponse
) => {
  return http.get('*/debit-cards', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetDebitCardsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateDebitCardMockHandler = (
  overrideResponse?: CreateDebitCardResponse
) => {
  return http.post('*/debit-cards', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetDebitCardMockHandler = (
  overrideResponse?: CardDetailResponse
) => {
  return http.get('*/debit-cards/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetDebitCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateCardMockHandler = (
  overrideResponse?: CardUpdateResponse
) => {
  return http.post('*/debit-cards/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateCardResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetAllUsersMockHandler = (
  overrideResponse?: ListUserResponse
) => {
  return http.get('*/users', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetAllUsersResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getPostUsersMockHandler = (overrideResponse?: UserResponse) => {
  return http.post('*/users', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostUsersResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetUserDetailsMockHandler = (
  overrideResponse?: UserResponse
) => {
  return http.get('*/users/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetUserDetailsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateUserByIdMockHandler = (
  overrideResponse?: UserResponse
) => {
  return http.post('*/users/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateUserByIdResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getListWebhooksMockHandler = (
  overrideResponse?: ListWebhookResponse
) => {
  return http.get('*/webhooks', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getListWebhooksResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateWebhookMockHandler = (
  overrideResponse?: WebhookResponse
) => {
  return http.post('*/webhooks', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCreateWebhookResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetWebhookMockHandler = (
  overrideResponse?: WebhookResponse
) => {
  return http.get('*/webhooks/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetWebhookResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateWebhookMockHandler = (
  overrideResponse?: WebhookResponse
) => {
  return http.post('*/webhooks/:id', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getUpdateWebhookResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};
export const getEmbeddedBankingSolutionsAPIMock = () => [
  getSmbdoListClientsMockHandler(),
  getSmbdoPostClientsMockHandler(),
  getSmbdoGetClientMockHandler(),
  getSmbdoUpdateClientMockHandler(),
  getSmbdoPostClientVerificationsMockHandler(),
  getSmbdoListPartiesMockHandler(),
  getSmbdoPostPartiesMockHandler(),
  getSmbdoGetPartyMockHandler(),
  getSmbdoUpdatePartyMockHandler(),
  getSmbdoListQuestionsMockHandler(),
  getSmbdoGetQuestionMockHandler(),
  getSmbdoGetAllDocumentDetailsMockHandler(),
  getSmbdoGetDocumentDetailMockHandler(),
  getSmbdoDownloadDocumentMockHandler(),
  getSmbdoListDocumentRequestsMockHandler(),
  getSmbdoGetDocumentRequestMockHandler(),
  getGetAccountsMockHandler(),
  getPostAccountsMockHandler(),
  getGetAccountMockHandler(),
  getGetAccountBalanceMockHandler(),
  getGetAllRecipientsMockHandler(),
  getCreateRecipientMockHandler(),
  getGetRecipientMockHandler(),
  getAmendRecipientMockHandler(),
  getRecipientsVerificationMockHandler(),
  getListTransactionsV2MockHandler(),
  getCreateTransactionV2MockHandler(),
  getGetTransactionV2MockHandler(),
  getGetStatementMockHandler(),
  getSearchStatementsMockHandler(),
  getGetCasesMockHandler(),
  getCreateCaseMockHandler(),
  getGetCaseMockHandler(),
  getUpdateCaseMockHandler(),
  getGetDebitCardsMockHandler(),
  getCreateDebitCardMockHandler(),
  getGetDebitCardMockHandler(),
  getUpdateCardMockHandler(),
  getGetAllUsersMockHandler(),
  getPostUsersMockHandler(),
  getGetUserDetailsMockHandler(),
  getUpdateUserByIdMockHandler(),
  getListWebhooksMockHandler(),
  getCreateWebhookMockHandler(),
  getGetWebhookMockHandler(),
  getUpdateWebhookMockHandler(),
];
