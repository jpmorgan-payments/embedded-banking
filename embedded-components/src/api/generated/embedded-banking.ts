/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Embedded Banking Solutions API
 * Embedded Banking Solutions services from J.P. Morgan
 * OpenAPI spec version: 2.0.3
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { ebInstance } from '../axios-instance';
import type { BodyType, ErrorType } from '../axios-instance';
import type {
  AccountBalanceResponse,
  AccountResponseWithStatus,
  CardDetailResponse,
  CardDetailsErrorResponse,
  CardUpdateRequest,
  CardUpdateResponse,
  CaseCreateRequest,
  CaseCreateResponse,
  CaseDetails,
  CasesPaginationResponse,
  CaseUpdateRequest,
  ClientListResponse,
  ClientResponse,
  CreateAccountRequest,
  CreateClientRequestSmbdo,
  CreateDebitCardRequest,
  CreateDebitCardResponse,
  CreatePartyRequest,
  CreateUserRequest,
  DebitCardsResponse,
  DocumentRequestListResponse,
  DocumentRequestResponse,
  GetAccountsParams,
  GetAllRecipientsParams,
  GetAllUsersParams,
  GetCasesParams,
  GetDebitCardsParams,
  ListAccountsResponse,
  ListDocumentsResponse,
  ListRecipientsResponse,
  ListTransactionsSearchResponseV2,
  ListTransactionsV2Params,
  ListUserResponse,
  ListWebhookResponse,
  ListWebhooksParams,
  MicrodepositAmounts,
  MicrodepositVerificationResponse,
  N400DoResponse,
  N400RecipientsResponse,
  N400Response,
  N400v2Response,
  N401DoResponse,
  N401Response,
  N401v2Response,
  N403DoResponse,
  N403Response,
  N403v2Response,
  N404DoResponse,
  N404Response,
  N404v2Response,
  N422DoResponse,
  N500DoResponse,
  N500Response,
  N500v2Response,
  N503DoResponse,
  N503Response,
  N503v2Response,
  PartyListResponse,
  PartyResponse,
  PostTransactionRequestV2,
  QuestionListResponse,
  Recipient,
  RecipientRequest,
  SchemasQuestionResponse,
  SearchStatementsParams,
  SmbdoDownloadDocument200Six,
  SmbdoGetAllDocumentDetailsParams,
  SmbdoListClientsParams,
  SmbdoListDocumentRequestsParams,
  SmbdoListPartiesParams,
  SmbdoListQuestionsParams,
  StatementsResponse,
  TransactionGetResponseV2,
  TransactionResponseV2,
  UpdateClientRequestSmbdo,
  UpdatePartyRequest,
  UpdateRecipientRequest,
  UpdateUserRequest,
  User400ClientIdResponse,
  User400Response,
  User401Response,
  User403Response,
  User404Response,
  User500Response,
  User503Response,
  UserResponse,
  WebhookRequest,
  WebhookResponse,
  WebhookUpdateRequest,
} from './embedded-banking.schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Returns a list of clients associated with your platform.
 * @summary List clients
 */
export const smbdoListClients = (
  params?: SmbdoListClientsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ClientListResponse>(
    { url: `/clients`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoListClientsQueryKey = (
  params?: SmbdoListClientsParams
) => {
  return [`/clients`, ...(params ? [params] : [])] as const;
};

export const getSmbdoListClientsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoListClients>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoListClientsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoListClients>>
  > = ({ signal }) => smbdoListClients(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoListClients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoListClientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoListClients>>
>;
export type SmbdoListClientsQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary List clients
 */
export const useSmbdoListClients = <
  TData = Awaited<ReturnType<typeof smbdoListClients>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoListClientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Creates a client.
 * @summary Create client
 */
export const smbdoPostClients = (
  createClientRequestSmbdo: BodyType<CreateClientRequestSmbdo>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<ClientResponse>(
    {
      url: `/clients`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createClientRequestSmbdo,
    },
    options
  );
};

export const getSmbdoPostClientsMutationOptions = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClients>>,
    TError,
    { data: BodyType<CreateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoPostClients>>,
  TError,
  { data: BodyType<CreateClientRequestSmbdo> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoPostClients>>,
    { data: BodyType<CreateClientRequestSmbdo> }
  > = (props) => {
    const { data } = props ?? {};

    return smbdoPostClients(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoPostClientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoPostClients>>
>;
export type SmbdoPostClientsMutationBody = BodyType<CreateClientRequestSmbdo>;
export type SmbdoPostClientsMutationError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Create client
 */
export const useSmbdoPostClients = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClients>>,
    TError,
    { data: BodyType<CreateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoPostClients>>,
  TError,
  { data: BodyType<CreateClientRequestSmbdo> },
  TContext
> => {
  const mutationOptions = getSmbdoPostClientsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieve client details by its ID.
 * @summary Get client
 */
export const smbdoGetClient = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ClientResponse>(
    { url: `/clients/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetClientQueryKey = (id: string) => {
  return [`/clients/${id}`] as const;
};

export const getSmbdoGetClientQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetClient>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetClient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSmbdoGetClientQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smbdoGetClient>>> = ({
    signal,
  }) => smbdoGetClient(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetClient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetClientQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetClient>>
>;
export type SmbdoGetClientQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Get client
 */
export const useSmbdoGetClient = <
  TData = Awaited<ReturnType<typeof smbdoGetClient>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetClient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoGetClientQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updates a client.
 * @summary Update client
 */
export const smbdoUpdateClient = (
  id: string,
  updateClientRequestSmbdo: BodyType<UpdateClientRequestSmbdo>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<ClientResponse>(
    {
      url: `/clients/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateClientRequestSmbdo,
    },
    options
  );
};

export const getSmbdoUpdateClientMutationOptions = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUpdateClient>>,
    TError,
    { id: string; data: BodyType<UpdateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoUpdateClient>>,
  TError,
  { id: string; data: BodyType<UpdateClientRequestSmbdo> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoUpdateClient>>,
    { id: string; data: BodyType<UpdateClientRequestSmbdo> }
  > = (props) => {
    const { id, data } = props ?? {};

    return smbdoUpdateClient(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoUpdateClientMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoUpdateClient>>
>;
export type SmbdoUpdateClientMutationBody = BodyType<UpdateClientRequestSmbdo>;
export type SmbdoUpdateClientMutationError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Update client
 */
export const useSmbdoUpdateClient = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUpdateClient>>,
    TError,
    { id: string; data: BodyType<UpdateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoUpdateClient>>,
  TError,
  { id: string; data: BodyType<UpdateClientRequestSmbdo> },
  TContext
> => {
  const mutationOptions = getSmbdoUpdateClientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Performs client verifications
 * @summary Perform client verifications
 */
export const smbdoPostClientVerifications = (
  id: string,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<void>(
    { url: `/clients/${id}/verifications`, method: 'POST' },
    options
  );
};

export const getSmbdoPostClientVerificationsMutationOptions = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N422DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return smbdoPostClientVerifications(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoPostClientVerificationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoPostClientVerifications>>
>;

export type SmbdoPostClientVerificationsMutationError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N422DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Perform client verifications
 */
export const useSmbdoPostClientVerifications = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N422DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getSmbdoPostClientVerificationsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves a list of parties.
 * @summary List parties
 */
export const smbdoListParties = (
  params?: SmbdoListPartiesParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<PartyListResponse>(
    { url: `/parties`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoListPartiesQueryKey = (
  params?: SmbdoListPartiesParams
) => {
  return [`/parties`, ...(params ? [params] : [])] as const;
};

export const getSmbdoListPartiesQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoListParties>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListPartiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListParties>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoListPartiesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoListParties>>
  > = ({ signal }) => smbdoListParties(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoListParties>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoListPartiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoListParties>>
>;
export type SmbdoListPartiesQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary List parties
 */
export const useSmbdoListParties = <
  TData = Awaited<ReturnType<typeof smbdoListParties>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListPartiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListParties>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoListPartiesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Creates a new party.
 * @summary Create party
 */
export const smbdoPostParties = (
  createPartyRequest: BodyType<CreatePartyRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<PartyResponse>(
    {
      url: `/parties`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPartyRequest,
    },
    options
  );
};

export const getSmbdoPostPartiesMutationOptions = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostParties>>,
    TError,
    { data: BodyType<CreatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoPostParties>>,
  TError,
  { data: BodyType<CreatePartyRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoPostParties>>,
    { data: BodyType<CreatePartyRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return smbdoPostParties(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoPostPartiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoPostParties>>
>;
export type SmbdoPostPartiesMutationBody = BodyType<CreatePartyRequest>;
export type SmbdoPostPartiesMutationError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Create party
 */
export const useSmbdoPostParties = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostParties>>,
    TError,
    { data: BodyType<CreatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoPostParties>>,
  TError,
  { data: BodyType<CreatePartyRequest> },
  TContext
> => {
  const mutationOptions = getSmbdoPostPartiesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Details a party by its unique identifier.
 * @summary Get party
 */
export const smbdoGetParty = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<PartyResponse>(
    { url: `/parties/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetPartyQueryKey = (id: string) => {
  return [`/parties/${id}`] as const;
};

export const getSmbdoGetPartyQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetParty>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetParty>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSmbdoGetPartyQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smbdoGetParty>>> = ({
    signal,
  }) => smbdoGetParty(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetParty>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetPartyQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetParty>>
>;
export type SmbdoGetPartyQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Get party
 */
export const useSmbdoGetParty = <
  TData = Awaited<ReturnType<typeof smbdoGetParty>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetParty>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoGetPartyQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updates a party.
 * @summary Update party
 */
export const smbdoUpdateParty = (
  id: string,
  updatePartyRequest: BodyType<UpdatePartyRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<PartyResponse>(
    {
      url: `/parties/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updatePartyRequest,
    },
    options
  );
};

export const getSmbdoUpdatePartyMutationOptions = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUpdateParty>>,
    TError,
    { id: string; data: BodyType<UpdatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoUpdateParty>>,
  TError,
  { id: string; data: BodyType<UpdatePartyRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoUpdateParty>>,
    { id: string; data: BodyType<UpdatePartyRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return smbdoUpdateParty(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoUpdatePartyMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoUpdateParty>>
>;
export type SmbdoUpdatePartyMutationBody = BodyType<UpdatePartyRequest>;
export type SmbdoUpdatePartyMutationError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Update party
 */
export const useSmbdoUpdateParty = <
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUpdateParty>>,
    TError,
    { id: string; data: BodyType<UpdatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoUpdateParty>>,
  TError,
  { id: string; data: BodyType<UpdatePartyRequest> },
  TContext
> => {
  const mutationOptions = getSmbdoUpdatePartyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists customer due diligence questions.

 * @summary List questions
 */
export const smbdoListQuestions = (
  params?: SmbdoListQuestionsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<QuestionListResponse>(
    { url: `/questions`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoListQuestionsQueryKey = (
  params?: SmbdoListQuestionsParams
) => {
  return [`/questions`, ...(params ? [params] : [])] as const;
};

export const getSmbdoListQuestionsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoListQuestions>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListQuestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListQuestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoListQuestionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoListQuestions>>
  > = ({ signal }) => smbdoListQuestions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoListQuestions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoListQuestionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoListQuestions>>
>;
export type SmbdoListQuestionsQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary List questions
 */
export const useSmbdoListQuestions = <
  TData = Awaited<ReturnType<typeof smbdoListQuestions>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListQuestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListQuestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoListQuestionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a customer due diligence question.

 * @summary Get question
 */
export const smbdoGetQuestion = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<SchemasQuestionResponse>(
    { url: `/questions/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetQuestionQueryKey = (id: string) => {
  return [`/questions/${id}`] as const;
};

export const getSmbdoGetQuestionQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetQuestion>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetQuestion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSmbdoGetQuestionQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetQuestion>>
  > = ({ signal }) => smbdoGetQuestion(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetQuestion>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetQuestionQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetQuestion>>
>;
export type SmbdoGetQuestionQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Get question
 */
export const useSmbdoGetQuestion = <
  TData = Awaited<ReturnType<typeof smbdoGetQuestion>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetQuestion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoGetQuestionQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Retrieves a list of document details.

 * @summary List document details
 */
export const smbdoGetAllDocumentDetails = (
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListDocumentsResponse>(
    { url: `/documents`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoGetAllDocumentDetailsQueryKey = (
  params?: SmbdoGetAllDocumentDetailsParams
) => {
  return [`/documents`, ...(params ? [params] : [])] as const;
};

export const getSmbdoGetAllDocumentDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoGetAllDocumentDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>
  > = ({ signal }) =>
    smbdoGetAllDocumentDetails(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetAllDocumentDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>
>;
export type SmbdoGetAllDocumentDetailsQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary List document details
 */
export const useSmbdoGetAllDocumentDetails = <
  TData = Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoGetAllDocumentDetailsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Retrieve details of a document.

 * @summary Get document details
 */
export const smbdoGetDocumentDetail = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListDocumentsResponse>(
    { url: `/documents/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetDocumentDetailQueryKey = (id: string) => {
  return [`/documents/${id}`] as const;
};

export const getSmbdoGetDocumentDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoGetDocumentDetailQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetDocumentDetail>>
  > = ({ signal }) => smbdoGetDocumentDetail(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetDocumentDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetDocumentDetail>>
>;
export type SmbdoGetDocumentDetailQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Get document details
 */
export const useSmbdoGetDocumentDetail = <
  TData = Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoGetDocumentDetailQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Download a document using its unique identifier.
 * @summary Download a document
 */
export const smbdoDownloadDocument = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<string | SmbdoDownloadDocument200Six>(
    {
      url: `/documents/${id}/file`,
      method: 'GET',
      signal,
      responseType: 'blob',
    },
    options
  );
};

export const getSmbdoDownloadDocumentQueryKey = (id: string) => {
  return [`/documents/${id}/file`] as const;
};

export const getSmbdoDownloadDocumentQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoDownloadDocument>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoDownloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoDownloadDocumentQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoDownloadDocument>>
  > = ({ signal }) => smbdoDownloadDocument(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoDownloadDocument>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoDownloadDocumentQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoDownloadDocument>>
>;
export type SmbdoDownloadDocumentQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Download a document
 */
export const useSmbdoDownloadDocument = <
  TData = Awaited<ReturnType<typeof smbdoDownloadDocument>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoDownloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoDownloadDocumentQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a list of document requests.

 * @summary List document requests
 */
export const smbdoListDocumentRequests = (
  params?: SmbdoListDocumentRequestsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DocumentRequestListResponse>(
    { url: `/document-requests`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoListDocumentRequestsQueryKey = (
  params?: SmbdoListDocumentRequestsParams
) => {
  return [`/document-requests`, ...(params ? [params] : [])] as const;
};

export const getSmbdoListDocumentRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListDocumentRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoListDocumentRequestsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoListDocumentRequests>>
  > = ({ signal }) => smbdoListDocumentRequests(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoListDocumentRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoListDocumentRequests>>
>;
export type SmbdoListDocumentRequestsQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary List document requests
 */
export const useSmbdoListDocumentRequests = <
  TData = Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  params?: SmbdoListDocumentRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoListDocumentRequestsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Returns details for a document request using its unique identifier.
 * @summary Get document request
 */
export const smbdoGetDocumentRequest = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DocumentRequestResponse>(
    { url: `/document-requests/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetDocumentRequestQueryKey = (id: string) => {
  return [`/document-requests/${id}`] as const;
};

export const getSmbdoGetDocumentRequestQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoGetDocumentRequestQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetDocumentRequest>>
  > = ({ signal }) => smbdoGetDocumentRequest(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetDocumentRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetDocumentRequest>>
>;
export type SmbdoGetDocumentRequestQueryError = ErrorType<
  | N400DoResponse
  | N401DoResponse
  | N403DoResponse
  | N404DoResponse
  | N500DoResponse
  | N503DoResponse
>;

/**
 * @summary Get document request
 */
export const useSmbdoGetDocumentRequest = <
  TData = Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
  TError = ErrorType<
    | N400DoResponse
    | N401DoResponse
    | N403DoResponse
    | N404DoResponse
    | N500DoResponse
    | N503DoResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSmbdoGetDocumentRequestQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Returns a list of accounts for a specific client.
 * @summary List accounts
 */
export const getAccounts = (
  params?: GetAccountsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListAccountsResponse>(
    { url: `/accounts`, method: 'GET', params, signal },
    options
  );
};

export const getGetAccountsQueryKey = (params?: GetAccountsParams) => {
  return [`/accounts`, ...(params ? [params] : [])] as const;
};

export const getGetAccountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccounts>>> = ({
    signal,
  }) => getAccounts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccounts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccounts>>
>;
export type GetAccountsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary List accounts
 */
export const useGetAccounts = <
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAccountsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create an account for a specific client
 * @summary Create account
 */
export const postAccounts = (
  createAccountRequest: BodyType<CreateAccountRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<AccountResponseWithStatus>(
    {
      url: `/accounts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAccountRequest,
    },
    options
  );
};

export const getPostAccountsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccounts>>,
    TError,
    { data: BodyType<CreateAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAccounts>>,
  TError,
  { data: BodyType<CreateAccountRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAccounts>>,
    { data: BodyType<CreateAccountRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postAccounts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAccountsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAccounts>>
>;
export type PostAccountsMutationBody = BodyType<CreateAccountRequest>;
export type PostAccountsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create account
 */
export const usePostAccounts = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccounts>>,
    TError,
    { data: BodyType<CreateAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAccounts>>,
  TError,
  { data: BodyType<CreateAccountRequest> },
  TContext
> => {
  const mutationOptions = getPostAccountsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Look up a single account by account ID
 * @summary Get account
 */
export const getAccount = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<AccountResponseWithStatus>(
    { url: `/accounts/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetAccountQueryKey = (id: string) => {
  return [`/accounts/${id}`] as const;
};

export const getGetAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({
    signal,
  }) => getAccount(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccount>>
>;
export type GetAccountQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Get account
 */
export const useGetAccount = <
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAccountQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get the balance details for an account
 * @summary Get an account balance
 */
export const getAccountBalance = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<AccountBalanceResponse>(
    { url: `/accounts/${id}/balances`, method: 'GET', signal },
    options
  );
};

export const getGetAccountBalanceQueryKey = (id: string) => {
  return [`/accounts/${id}/balances`] as const;
};

export const getGetAccountBalanceQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountBalanceQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccountBalance>>
  > = ({ signal }) => getAccountBalance(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccountBalance>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountBalanceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountBalance>>
>;
export type GetAccountBalanceQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Get an account balance
 */
export const useGetAccountBalance = <
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAccountBalanceQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Returns a list of all recipients for a given client profile.
 * @summary List recipients
 */
export const getAllRecipients = (
  params?: GetAllRecipientsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListRecipientsResponse>(
    { url: `/recipients`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllRecipientsQueryKey = (
  params?: GetAllRecipientsParams
) => {
  return [`/recipients`, ...(params ? [params] : [])] as const;
};

export const getGetAllRecipientsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllRecipientsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllRecipients>>
  > = ({ signal }) => getAllRecipients(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllRecipients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllRecipientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllRecipients>>
>;
export type GetAllRecipientsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary List recipients
 */
export const useGetAllRecipients = <
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllRecipientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Creates a new recipient.
 * @summary Create recipient
 */
export const createRecipient = (
  recipientRequest: BodyType<RecipientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<Recipient>(
    {
      url: `/recipients`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: recipientRequest,
    },
    options
  );
};

export const getCreateRecipientMutationOptions = <
  TError = ErrorType<
    | N400RecipientsResponse
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipient>>,
    TError,
    { data: BodyType<RecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRecipient>>,
  TError,
  { data: BodyType<RecipientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRecipient>>,
    { data: BodyType<RecipientRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createRecipient(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRecipientMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRecipient>>
>;
export type CreateRecipientMutationBody = BodyType<RecipientRequest>;
export type CreateRecipientMutationError = ErrorType<
  | N400RecipientsResponse
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create recipient
 */
export const useCreateRecipient = <
  TError = ErrorType<
    | N400RecipientsResponse
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipient>>,
    TError,
    { data: BodyType<RecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createRecipient>>,
  TError,
  { data: BodyType<RecipientRequest> },
  TContext
> => {
  const mutationOptions = getCreateRecipientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns information about a specific recipient.
 * @summary Get recipient
 */
export const getRecipient = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<Recipient>(
    { url: `/recipients/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetRecipientQueryKey = (id: string) => {
  return [`/recipients/${id}`] as const;
};

export const getGetRecipientQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecipientQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipient>>> = ({
    signal,
  }) => getRecipient(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecipient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecipientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecipient>>
>;
export type GetRecipientQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Get recipient
 */
export const useGetRecipient = <
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRecipientQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updates details of a recipient, such as adding values for attributes related to payment types. All attributes must be provided in the same format as when creating a recipient. The value partyDetails.type cannot be amended after creation.
 * @summary Update recipient
 */
export const amendRecipient = (
  id: string,
  updateRecipientRequest: BodyType<UpdateRecipientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<Recipient>(
    {
      url: `/recipients/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateRecipientRequest,
    },
    options
  );
};

export const getAmendRecipientMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof amendRecipient>>,
    TError,
    { id: string; data: BodyType<UpdateRecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof amendRecipient>>,
  TError,
  { id: string; data: BodyType<UpdateRecipientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof amendRecipient>>,
    { id: string; data: BodyType<UpdateRecipientRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return amendRecipient(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AmendRecipientMutationResult = NonNullable<
  Awaited<ReturnType<typeof amendRecipient>>
>;
export type AmendRecipientMutationBody = BodyType<UpdateRecipientRequest>;
export type AmendRecipientMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update recipient
 */
export const useAmendRecipient = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof amendRecipient>>,
    TError,
    { id: string; data: BodyType<UpdateRecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof amendRecipient>>,
  TError,
  { id: string; data: BodyType<UpdateRecipientRequest> },
  TContext
> => {
  const mutationOptions = getAmendRecipientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Creates a microdeposits verification process.
 * @summary Creates a microdeposits verification process.
 */
export const recipientsVerification = (
  id: string,
  microdepositAmounts: BodyType<MicrodepositAmounts>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<MicrodepositVerificationResponse>(
    {
      url: `/recipients/${id}/verify-microdeposit`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: microdepositAmounts,
    },
    options
  );
};

export const getRecipientsVerificationMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recipientsVerification>>,
    TError,
    { id: string; data: BodyType<MicrodepositAmounts> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recipientsVerification>>,
  TError,
  { id: string; data: BodyType<MicrodepositAmounts> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recipientsVerification>>,
    { id: string; data: BodyType<MicrodepositAmounts> }
  > = (props) => {
    const { id, data } = props ?? {};

    return recipientsVerification(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecipientsVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof recipientsVerification>>
>;
export type RecipientsVerificationMutationBody = BodyType<MicrodepositAmounts>;
export type RecipientsVerificationMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Creates a microdeposits verification process.
 */
export const useRecipientsVerification = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recipientsVerification>>,
    TError,
    { id: string; data: BodyType<MicrodepositAmounts> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof recipientsVerification>>,
  TError,
  { id: string; data: BodyType<MicrodepositAmounts> },
  TContext
> => {
  const mutationOptions = getRecipientsVerificationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists transactions for a specific client, which can be filtered using optional parameters.
 * @summary List transactions
 */
export const listTransactionsV2 = (
  params?: ListTransactionsV2Params,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListTransactionsSearchResponseV2>(
    { url: `/transactions`, method: 'GET', params, signal },
    options
  );
};

export const getListTransactionsV2QueryKey = (
  params?: ListTransactionsV2Params
) => {
  return [`/transactions`, ...(params ? [params] : [])] as const;
};

export const getListTransactionsV2QueryOptions = <
  TData = Awaited<ReturnType<typeof listTransactionsV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListTransactionsV2Params,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactionsV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListTransactionsV2QueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listTransactionsV2>>
  > = ({ signal }) => listTransactionsV2(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTransactionsV2>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListTransactionsV2QueryResult = NonNullable<
  Awaited<ReturnType<typeof listTransactionsV2>>
>;
export type ListTransactionsV2QueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary List transactions
 */
export const useListTransactionsV2 = <
  TData = Awaited<ReturnType<typeof listTransactionsV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListTransactionsV2Params,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactionsV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListTransactionsV2QueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).
 * @summary Create transaction
 */
export const createTransactionV2 = (
  postTransactionRequestV2: BodyType<PostTransactionRequestV2>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<TransactionResponseV2>(
    {
      url: `/transactions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postTransactionRequestV2,
    },
    options
  );
};

export const getCreateTransactionV2MutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransactionV2>>,
    TError,
    { data: BodyType<PostTransactionRequestV2> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTransactionV2>>,
  TError,
  { data: BodyType<PostTransactionRequestV2> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTransactionV2>>,
    { data: BodyType<PostTransactionRequestV2> }
  > = (props) => {
    const { data } = props ?? {};

    return createTransactionV2(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTransactionV2MutationResult = NonNullable<
  Awaited<ReturnType<typeof createTransactionV2>>
>;
export type CreateTransactionV2MutationBody =
  BodyType<PostTransactionRequestV2>;
export type CreateTransactionV2MutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Create transaction
 */
export const useCreateTransactionV2 = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransactionV2>>,
    TError,
    { data: BodyType<PostTransactionRequestV2> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createTransactionV2>>,
  TError,
  { data: BodyType<PostTransactionRequestV2> },
  TContext
> => {
  const mutationOptions = getCreateTransactionV2MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns details for a specific transaction using its unique identifier.
 * @summary Get transaction
 */
export const getTransactionV2 = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<TransactionGetResponseV2>(
    { url: `/transactions/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetTransactionV2QueryKey = (id: string) => {
  return [`/transactions/${id}`] as const;
};

export const getGetTransactionV2QueryOptions = <
  TData = Awaited<ReturnType<typeof getTransactionV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTransactionV2QueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTransactionV2>>
  > = ({ signal }) => getTransactionV2(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTransactionV2>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTransactionV2QueryResult = NonNullable<
  Awaited<ReturnType<typeof getTransactionV2>>
>;
export type GetTransactionV2QueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Get transaction
 */
export const useGetTransactionV2 = <
  TData = Awaited<ReturnType<typeof getTransactionV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTransactionV2QueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a statement document using its identifier
 * @summary Get a statement
 */
export const getStatement = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<string>(
    { url: `/statements/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetStatementQueryKey = (id: string) => {
  return [`/statements/${id}`] as const;
};

export const getGetStatementQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatement>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStatement>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStatementQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatement>>> = ({
    signal,
  }) => getStatement(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatement>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStatementQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatement>>
>;
export type GetStatementQueryError = ErrorType<
  N401Response | N403Response | N404Response | N500Response | N503Response
>;

/**
 * @summary Get a statement
 */
export const useGetStatement = <
  TData = Awaited<ReturnType<typeof getStatement>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStatement>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStatementQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Returns statements filtered by search criteria.
 * @summary Search statements
 */
export const searchStatements = (
  params: SearchStatementsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<StatementsResponse>(
    { url: `/statements/search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchStatementsQueryKey = (params: SearchStatementsParams) => {
  return [`/statements/search`, ...(params ? [params] : [])] as const;
};

export const getSearchStatementsQueryOptions = <
  TData = Awaited<ReturnType<typeof searchStatements>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  params: SearchStatementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchStatements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchStatementsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchStatements>>
  > = ({ signal }) => searchStatements(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchStatements>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchStatementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchStatements>>
>;
export type SearchStatementsQueryError = ErrorType<
  N401Response | N403Response | N404Response | N500Response | N503Response
>;

/**
 * @summary Search statements
 */
export const useSearchStatements = <
  TData = Awaited<ReturnType<typeof searchStatements>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  params: SearchStatementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchStatements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchStatementsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get cases for client profile
 * @summary Returns all cases for client profile.
 */
export const getCases = (
  params?: GetCasesParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CasesPaginationResponse>(
    { url: `/cases`, method: 'GET', params, signal },
    options
  );
};

export const getGetCasesQueryKey = (params?: GetCasesParams) => {
  return [`/cases`, ...(params ? [params] : [])] as const;
};

export const getGetCasesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCases>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetCasesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCases>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCasesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCases>>> = ({
    signal,
  }) => getCases(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCases>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCasesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCases>>
>;
export type GetCasesQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Returns all cases for client profile.
 */
export const useGetCases = <
  TData = Awaited<ReturnType<typeof getCases>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetCasesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCases>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCasesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Raises a case for support with Embedded Finance.
 * @summary Create a new case
 */
export const createCase = (
  caseCreateRequest: BodyType<CaseCreateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CaseCreateResponse>(
    {
      url: `/cases`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: caseCreateRequest,
    },
    options
  );
};

export const getCreateCaseMutationOptions = <
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCase>>,
    TError,
    { data: BodyType<CaseCreateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCase>>,
  TError,
  { data: BodyType<CaseCreateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCase>>,
    { data: BodyType<CaseCreateRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createCase(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCase>>
>;
export type CreateCaseMutationBody = BodyType<CaseCreateRequest>;
export type CreateCaseMutationError = ErrorType<
  N401Response | N403Response | N404Response | N500Response | N503Response
>;

/**
 * @summary Create a new case
 */
export const useCreateCase = <
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCase>>,
    TError,
    { data: BodyType<CaseCreateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createCase>>,
  TError,
  { data: BodyType<CaseCreateRequest> },
  TContext
> => {
  const mutationOptions = getCreateCaseMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get case details
 * @summary Returns details of a case using the unique case ID.
 */
export const getCase = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CaseDetails>(
    { url: `/cases/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetCaseQueryKey = (id: string) => {
  return [`/cases/${id}`] as const;
};

export const getGetCaseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCase>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCaseQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCase>>> = ({
    signal,
  }) => getCase(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCase>>
>;
export type GetCaseQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Returns details of a case using the unique case ID.
 */
export const useGetCase = <
  TData = Awaited<ReturnType<typeof getCase>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCaseQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update case
 * @summary Update information on a specific case.
 */
export const updateCase = (
  id: string,
  caseUpdateRequest: BodyType<CaseUpdateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CaseDetails>(
    {
      url: `/cases/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: caseUpdateRequest,
    },
    options
  );
};

export const getUpdateCaseMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCase>>,
    TError,
    { id: string; data: BodyType<CaseUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCase>>,
  TError,
  { id: string; data: BodyType<CaseUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCase>>,
    { id: string; data: BodyType<CaseUpdateRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCase(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCase>>
>;
export type UpdateCaseMutationBody = BodyType<CaseUpdateRequest>;
export type UpdateCaseMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update information on a specific case.
 */
export const useUpdateCase = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCase>>,
    TError,
    { id: string; data: BodyType<CaseUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCase>>,
  TError,
  { id: string; data: BodyType<CaseUpdateRequest> },
  TContext
> => {
  const mutationOptions = getUpdateCaseMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a list of debit cards for a specific client.
 * @summary List cards
 */
export const getDebitCards = (
  params?: GetDebitCardsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DebitCardsResponse>(
    { url: `/debit-cards`, method: 'GET', params, signal },
    options
  );
};

export const getGetDebitCardsQueryKey = (params?: GetDebitCardsParams) => {
  return [`/debit-cards`, ...(params ? [params] : [])] as const;
};

export const getGetDebitCardsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDebitCards>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | CardDetailsErrorResponse
  >,
>(
  params?: GetDebitCardsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCards>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDebitCardsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDebitCards>>> = ({
    signal,
  }) => getDebitCards(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDebitCards>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDebitCardsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDebitCards>>
>;
export type GetDebitCardsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | CardDetailsErrorResponse
>;

/**
 * @summary List cards
 */
export const useGetDebitCards = <
  TData = Awaited<ReturnType<typeof getDebitCards>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | CardDetailsErrorResponse
  >,
>(
  params?: GetDebitCardsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCards>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDebitCardsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Creates a new debit card.
 * @summary Create debit card
 */
export const createDebitCard = (
  createDebitCardRequest: BodyType<CreateDebitCardRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CreateDebitCardResponse>(
    {
      url: `/debit-cards`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createDebitCardRequest,
    },
    options
  );
};

export const getCreateDebitCardMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDebitCard>>,
    TError,
    { data: BodyType<CreateDebitCardRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDebitCard>>,
  TError,
  { data: BodyType<CreateDebitCardRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDebitCard>>,
    { data: BodyType<CreateDebitCardRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createDebitCard(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateDebitCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDebitCard>>
>;
export type CreateDebitCardMutationBody = BodyType<CreateDebitCardRequest>;
export type CreateDebitCardMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create debit card
 */
export const useCreateDebitCard = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDebitCard>>,
    TError,
    { data: BodyType<CreateDebitCardRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createDebitCard>>,
  TError,
  { data: BodyType<CreateDebitCardRequest> },
  TContext
> => {
  const mutationOptions = getCreateDebitCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns card ID and iFrame link for virtual card details for a specific card.
 * @summary Get card
 */
export const getDebitCard = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CardDetailResponse>(
    { url: `/debit-cards/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetDebitCardQueryKey = (id: string) => {
  return [`/debit-cards/${id}`] as const;
};

export const getGetDebitCardQueryOptions = <
  TData = Awaited<ReturnType<typeof getDebitCard>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCard>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDebitCardQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDebitCard>>> = ({
    signal,
  }) => getDebitCard(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDebitCard>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDebitCardQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDebitCard>>
>;
export type GetDebitCardQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Get card
 */
export const useGetDebitCard = <
  TData = Awaited<ReturnType<typeof getDebitCard>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCard>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDebitCardQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updates card details, such as PIN reset or to lock a lost card.
 * @summary Update card
 */
export const updateCard = (
  id: string,
  cardUpdateRequest: BodyType<CardUpdateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    {
      url: `/debit-cards/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: cardUpdateRequest,
    },
    options
  );
};

export const getUpdateCardMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCard>>,
    TError,
    { id: string; data: BodyType<CardUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCard>>,
  TError,
  { id: string; data: BodyType<CardUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCard>>,
    { id: string; data: BodyType<CardUpdateRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCard(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCard>>
>;
export type UpdateCardMutationBody = BodyType<CardUpdateRequest>;
export type UpdateCardMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update card
 */
export const useUpdateCard = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCard>>,
    TError,
    { id: string; data: BodyType<CardUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCard>>,
  TError,
  { id: string; data: BodyType<CardUpdateRequest> },
  TContext
> => {
  const mutationOptions = getUpdateCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves list of users for a client. The API by default retrieves a lighter version of data.
 * @summary List users
 */
export const getAllUsers = (
  params?: GetAllUsersParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListUserResponse>(
    { url: `/users`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllUsersQueryKey = (params?: GetAllUsersParams) => {
  return [`/users`, ...(params ? [params] : [])] as const;
};

export const getGetAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<
    | User400ClientIdResponse
    | User401Response
    | User403Response
    | User500Response
    | User503Response
  >,
>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({
    signal,
  }) => getAllUsers(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsers>>
>;
export type GetAllUsersQueryError = ErrorType<
  | User400ClientIdResponse
  | User401Response
  | User403Response
  | User500Response
  | User503Response
>;

/**
 * @summary List users
 */
export const useGetAllUsers = <
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<
    | User400ClientIdResponse
    | User401Response
    | User403Response
    | User500Response
    | User503Response
  >,
>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Creates a new user. This API is developed to enable clients to create a user for accessing and managing resources for that client. The payload has a property partyId. This partyId is used to add an existing party as a user. Phone field is optional when partyId is provided. When partyId is not provided, then phone field should be populated. When providing a role, if the role is a DEBIT_CARD_HOLDER then the resourceType and resourceId and action should be provided.
 * @summary Create user
 */
export const postUsers = (
  createUserRequest: BodyType<CreateUserRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<UserResponse>(
    {
      url: `/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createUserRequest,
    },
    options
  );
};

export const getPostUsersMutationOptions = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: BodyType<CreateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: BodyType<CreateUserRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsers>>,
    { data: BodyType<CreateUserRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postUsers(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsers>>
>;
export type PostUsersMutationBody = BodyType<CreateUserRequest>;
export type PostUsersMutationError = ErrorType<
  | User400Response
  | User401Response
  | User403Response
  | User500Response
  | User503Response
>;

/**
 * @summary Create user
 */
export const usePostUsers = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: BodyType<CreateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: BodyType<CreateUserRequest> },
  TContext
> => {
  const mutationOptions = getPostUsersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves details for a specific user.
 * @summary Get user
 */
export const getUserDetails = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<UserResponse>(
    { url: `/users/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetUserDetailsQueryKey = (id: string) => {
  return [`/users/${id}`] as const;
};

export const getGetUserDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserDetails>>,
  TError = ErrorType<
    | User401Response
    | User403Response
    | User404Response
    | User500Response
    | User503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserDetails>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserDetailsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetails>>> = ({
    signal,
  }) => getUserDetails(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserDetails>>
>;
export type GetUserDetailsQueryError = ErrorType<
  | User401Response
  | User403Response
  | User404Response
  | User500Response
  | User503Response
>;

/**
 * @summary Get user
 */
export const useGetUserDetails = <
  TData = Awaited<ReturnType<typeof getUserDetails>>,
  TError = ErrorType<
    | User401Response
    | User403Response
    | User404Response
    | User500Response
    | User503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserDetails>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserDetailsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updates information about user. For additional users only, full details like name, email, address phone and role can be updated.
 * @summary Update user
 */
export const updateUserById = (
  id: string,
  updateUserRequest: BodyType<UpdateUserRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<UserResponse>(
    {
      url: `/users/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserRequest,
    },
    options
  );
};

export const getUpdateUserByIdMutationOptions = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserById>>,
    TError,
    { id: string; data: BodyType<UpdateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserById>>,
  TError,
  { id: string; data: BodyType<UpdateUserRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserById>>,
    { id: string; data: BodyType<UpdateUserRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateUserById(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserById>>
>;
export type UpdateUserByIdMutationBody = BodyType<UpdateUserRequest>;
export type UpdateUserByIdMutationError = ErrorType<
  | User400Response
  | User401Response
  | User403Response
  | User500Response
  | User503Response
>;

/**
 * @summary Update user
 */
export const useUpdateUserById = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserById>>,
    TError,
    { id: string; data: BodyType<UpdateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUserById>>,
  TError,
  { id: string; data: BodyType<UpdateUserRequest> },
  TContext
> => {
  const mutationOptions = getUpdateUserByIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * List all your webhooks
 * @summary List webhooks
 */
export const listWebhooks = (
  params?: ListWebhooksParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListWebhookResponse>(
    { url: `/webhooks`, method: 'GET', params, signal },
    options
  );
};

export const getListWebhooksQueryKey = (params?: ListWebhooksParams) => {
  return [`/webhooks`, ...(params ? [params] : [])] as const;
};

export const getListWebhooksQueryOptions = <
  TData = Awaited<ReturnType<typeof listWebhooks>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListWebhooksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWebhooks>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListWebhooksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listWebhooks>>> = ({
    signal,
  }) => listWebhooks(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listWebhooks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListWebhooksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listWebhooks>>
>;
export type ListWebhooksQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary List webhooks
 */
export const useListWebhooks = <
  TData = Awaited<ReturnType<typeof listWebhooks>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListWebhooksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWebhooks>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListWebhooksQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a webhook subscription
 * @summary Create a webhook subscription.
 */
export const createWebhook = (
  webhookRequest: BodyType<WebhookRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<WebhookResponse>(
    {
      url: `/webhooks`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: webhookRequest,
    },
    options
  );
};

export const getCreateWebhookMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebhook>>,
    TError,
    { data: BodyType<WebhookRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWebhook>>,
  TError,
  { data: BodyType<WebhookRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWebhook>>,
    { data: BodyType<WebhookRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createWebhook(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWebhook>>
>;
export type CreateWebhookMutationBody = BodyType<WebhookRequest>;
export type CreateWebhookMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create a webhook subscription.
 */
export const useCreateWebhook = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebhook>>,
    TError,
    { data: BodyType<WebhookRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createWebhook>>,
  TError,
  { data: BodyType<WebhookRequest> },
  TContext
> => {
  const mutationOptions = getCreateWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get details of your subscription to a specific webhook.
 * @summary Get a webhook subscription by ID.
 */
export const getWebhook = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<WebhookResponse>(
    { url: `/webhooks/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetWebhookQueryKey = (id: string) => {
  return [`/webhooks/${id}`] as const;
};

export const getGetWebhookQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebhook>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWebhook>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWebhookQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebhook>>> = ({
    signal,
  }) => getWebhook(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWebhook>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWebhookQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebhook>>
>;
export type GetWebhookQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Get a webhook subscription by ID.
 */
export const useGetWebhook = <
  TData = Awaited<ReturnType<typeof getWebhook>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWebhook>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWebhookQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add or Remove webhook subscriptions and change a webhook status to ACTIVE or INACTIVE
 * @summary Update a webhook by ID.
 */
export const updateWebhook = (
  id: string,
  webhookUpdateRequest: BodyType<WebhookUpdateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<WebhookResponse>(
    {
      url: `/webhooks/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: webhookUpdateRequest,
    },
    options
  );
};

export const getUpdateWebhookMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebhook>>,
    TError,
    { id: string; data: BodyType<WebhookUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateWebhook>>,
  TError,
  { id: string; data: BodyType<WebhookUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateWebhook>>,
    { id: string; data: BodyType<WebhookUpdateRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateWebhook(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateWebhook>>
>;
export type UpdateWebhookMutationBody = BodyType<WebhookUpdateRequest>;
export type UpdateWebhookMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update a webhook by ID.
 */
export const useUpdateWebhook = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebhook>>,
    TError,
    { id: string; data: BodyType<WebhookUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateWebhook>>,
  TError,
  { id: string; data: BodyType<WebhookUpdateRequest> },
  TContext
> => {
  const mutationOptions = getUpdateWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};
