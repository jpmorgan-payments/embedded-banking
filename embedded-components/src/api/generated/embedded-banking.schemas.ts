/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Embedded Finance Digital Onboarding API
 * Embedded Finance services from J.P. Morgan
 * OpenAPI spec version: 1.0.3
 */
export type SmbdoDownloadDocument200Six = { [key: string]: any };

export type SmbdoListDocumentRequestsParams = {
  /**
   * Unique Client identifier.
   */
  clientId?: ClientIdQueryParameter;
  /**
   * Unique Party identifier.
   */
  partyId?: PartyIdQueryParameter;
};

export type SmbdoListQuestionsParams = {
  /**
   * Comma-separated list of Question IDs.
   */
  questionIds?: QuestionIdListInQueryParameter;
};

/**
 * Page Number
 */
export type PageNoParameter = number;

export type SmbdoGetAllDocumentDetailsParams = {
  /**
   * Unique Client identifier
   */
  clientId?: ClientIdInQueryParameter;
  /**
   * Unique Party identifier.
   */
  partyId?: PartyIdQueryParameter;
  /**
   * Unique identifier for the platform.
   */
  platformId?: PlatformIdInQueryParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
};

export type SmbdoListClientsParams = {
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
};

/**
 * ID of the parent party.
 */
export type ParentPartyIdParameter = string;

/**
 * Number of records per page.
 */
export type PageSizeParameter = number;

export type SmbdoListPartiesParams = {
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
  /**
   * ID of the parent party.
   */
  parentPartyId?: ParentPartyIdParameter;
};

/**
 * Unique Client identifier
 */
export type ClientIdInQueryParameter = string;

/**
 * Comma-separated list of Question IDs.
 */
export type QuestionIdListInQueryParameter = string;

/**
 * Unique identifier for the platform.
 */
export type PlatformIdInQueryParameter = string;

/**
 * Unique Party identifier.
 */
export type PartyIdQueryParameter = string;

/**
 * Unique Client identifier.
 */
export type ClientIdQueryParameter = string;

/**
 * Service Unavailable
 */
export type Responses503Response = ApiErrorV2;

/**
 * Internal Server Error
 */
export type Responses500Response = ApiErrorV2;

/**
 * Not Found
 */
export type Responses404Response = ApiErrorV2;

/**
 * Forbidden
 */
export type Responses403Response = ApiErrorV2;

/**
 * Unauthenticated
 */
export type Responses401Response = ApiErrorV2;

/**
 * Bad Request
 */
export type Responses400Response = ApiErrorV2;

/**
 * Unprocessable Entity
 */
export type N422Response = ApiErrorV2;

/**
 * The merchant category code describing the merchant's industry.
 * @minLength 4
 * @maxLength 4
 */
export type Mcc = string;

/**
 * The merchant's preferred currency for transactions.
 */
export type NetworkRegistrationCurrencyCode =
  (typeof NetworkRegistrationCurrencyCode)[keyof typeof NetworkRegistrationCurrencyCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NetworkRegistrationCurrencyCode = {
  GBP: 'GBP',
  USD: 'USD',
  CAD: 'CAD',
  EUR: 'EUR',
} as const;

/**
 * The American Express status code for the merchant if they are terminated or reinstated.
 */
export type ServiceEstablishmentStatus =
  (typeof ServiceEstablishmentStatus)[keyof typeof ServiceEstablishmentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceEstablishmentStatus = {
  D_CANCELLED: 'D_CANCELLED',
  N_CANCELLED: 'N_CANCELLED',
  R_REINSTATED: 'R_REINSTATED',
} as const;

/**
 * The mechanism used to provide details at the merchant's terminal for transactions. Required when DISCOVER is selected.
 */
export type TransactionDeviceType =
  (typeof TransactionDeviceType)[keyof typeof TransactionDeviceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionDeviceType = {
  HOST_BASED_POS_DEVICE: 'HOST_BASED_POS_DEVICE',
  TERMINAL_BASED_POS_DEVICE: 'TERMINAL_BASED_POS_DEVICE',
  SOFTWARE_POS_DEVICE: 'SOFTWARE_POS_DEVICE',
  ALL_OTHER_POS_DEVICES: 'ALL_OTHER_POS_DEVICES',
  UNKNOWN: 'UNKNOWN',
} as const;

/**
 * The type of Visa debit card acceptance. Required when VISA is selected.
 */
export type VisaDebitAcceptance =
  (typeof VisaDebitAcceptance)[keyof typeof VisaDebitAcceptance];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VisaDebitAcceptance = {
  DEBIT_NOT_ACCEPTED: 'DEBIT_NOT_ACCEPTED',
  DEBIT_ACCEPTED_CARD_PRESENT: 'DEBIT_ACCEPTED_CARD_PRESENT',
  DEBIT_ACCEPTED_CARD_NOT_PRESENT: 'DEBIT_ACCEPTED_CARD_NOT_PRESENT',
  DEBIT_ACCEPTED_ALL: 'DEBIT_ACCEPTED_ALL',
} as const;

/**
 * The selection of method of payments used in network registration.
 */
export type SettlementPaymentMethods =
  (typeof SettlementPaymentMethods)[keyof typeof SettlementPaymentMethods];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SettlementPaymentMethods = {
  VISA: 'VISA',
  AMEX_OPT_BLUE: 'AMEX_OPT_BLUE',
  DISCOVER: 'DISCOVER',
} as const;

export interface NetworkRegistration {
  currencyCode?: NetworkRegistrationCurrencyCode;
  serviceEstablishmentStatus?: ServiceEstablishmentStatus;
  /** The last update date of the service establishment status. Required if the service establishment status is provided. */
  serviceEstablishmentStatusUpdateDate?: string;
  /**
   * @minItems 0
   * @maxItems 5
   */
  settlementPaymentMethods?: SettlementPaymentMethods[];
  /** Required to specify true if the merchant is not selecting any settlement payment method. */
  settlementPaymentMethodsOptOut?: boolean;
  transactionDeviceType?: TransactionDeviceType;
  visaDebitAcceptance?: VisaDebitAcceptance;
}

export interface DocumentUploadDataSmbdo {
  documentType: SchemasDocumentTypeSmbdo;
  /**
   * @minItems 0
   * @maxItems 50
   */
  metadata: DocumentMetadataSmbdo[];
}

export type SchemasQuestionResponseSubQuestionsItem = {
  anyValuesMatch?: AnyValuesMatch;
  questionIds?: SchemasQuestionIdList;
};

export interface SchemasQuestionResponse {
  /**
   * @minItems 1
   * @maxItems 50
   */
  content?: ContentItem[];
  defaultLocale?: LocaleId;
  description?: QuestionDescription;
  id?: QuestionId;
  parentQuestionId?: QuestionId;
  responseSchema?: ResponseSchema;
  /** @minItems 0 */
  subQuestions?: SchemasQuestionResponseSubQuestionsItem[];
}

export interface QuestionListResponse {
  metadata?: PageMetaDataSmbdo;
  /**
   * @minItems 0
   * @maxItems 100
   */
  questions?: SchemasQuestionResponse[];
}

export interface ListDocumentsResponse {
  /**
   * @minItems 0
   * @maxItems 100
   */
  documentDetails?: SchemasDocumentResponse[];
  metadata?: PageMetaDataSmbdo;
}

export interface DocumentRequestListResponse {
  /**
   * @minItems 0
   * @maxItems 100
   */
  documentRequests: DocumentRequestResponse[];
  metadata: PageMetaDataSmbdo;
}

export interface SchemasDocumentResponse {
  documentType: SchemasDocumentTypeSmbdo;
  id: string;
  /**
   * @minItems 0
   * @maxItems 50
   */
  metadata: DocumentMetadataSmbdo[];
}

export type ResponseSchemaType =
  (typeof ResponseSchemaType)[keyof typeof ResponseSchemaType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseSchemaType = {
  array: 'array',
} as const;

/**
 * Describes the answer value that would require dependent questions.
 * @maxLength 255
 */
export type AnyValuesMatch = string;

export type ResponseSchemaItemType =
  (typeof ResponseSchemaItemType)[keyof typeof ResponseSchemaItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseSchemaItemType = {
  boolean: 'boolean',
  string: 'string',
  number: 'number',
  integer: 'integer',
} as const;

/**
 * Only applicable to string, number, and integer.
 */
export type ResponseSchemaItemFormat =
  (typeof ResponseSchemaItemFormat)[keyof typeof ResponseSchemaItemFormat];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseSchemaItemFormat = {
  float: 'float',
  double: 'double',
  int32: 'int32',
  int64: 'int64',
  date: 'date',
} as const;

/**
 * A limited subset of JSON Schema used to validate the response value items.
 */
export interface ResponseSchemaItem {
  exclusiveMaximum?: boolean;
  exclusiveMinimum?: boolean;
  /** Only applicable to string, number, and integer. */
  format?: ResponseSchemaItemFormat;
  maximum?: number;
  maxLength?: number;
  minimum?: number;
  minLength?: number;
  /** Only applicable to string. */
  pattern?: string;
  type?: ResponseSchemaItemType;
}

/**
 * A subset of JSON Schema used to validate the response values.
 */
export interface ResponseSchema {
  items?: ResponseSchemaItem;
  maxItems?: number;
  minItems?: number;
  type?: ResponseSchemaType;
}

/**
 * The ID uniquely identifying a question.
 * @maxLength 10
 */
export type QuestionId = string;

/**
 * A list of question IDs.
 * @minItems 1
 * @maxItems 100
 */
export type SchemasQuestionIdList = QuestionId[];

/**
 * A description of the question.
 */
export type QuestionDescription = string;

/**
 * The identifier for a language and location.
 */
export type LocaleId = string;

/**
 * Content displayed to a user for a given locale.
 */
export interface ContentItem {
  description?: string;
  /** Exact text to be displayed to a user. */
  label: string;
  locale: LocaleId;
}

export type DocumentMetadataKeyEnum =
  (typeof DocumentMetadataKeyEnum)[keyof typeof DocumentMetadataKeyEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentMetadataKeyEnum = {
  DOCUMENT_REQUEST_ID: 'DOCUMENT_REQUEST_ID',
  PARTY_ID: 'PARTY_ID',
  FILE_EXTENSION: 'FILE_EXTENSION',
  COUNTRY: 'COUNTRY',
  STATUS: 'STATUS',
  UPLOAD_TIME: 'UPLOAD_TIME',
  UPLOADED_FILE_NAME: 'UPLOADED_FILE_NAME',
} as const;

export interface DocumentMetadataSmbdo {
  key?: DocumentMetadataKeyEnum;
  value?: string;
}

/**
 * Supported document types
 */
export type SchemasDocumentTypeSmbdo =
  (typeof SchemasDocumentTypeSmbdo)[keyof typeof SchemasDocumentTypeSmbdo];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SchemasDocumentTypeSmbdo = {
  TERMS_CONDITIONS: 'TERMS_CONDITIONS',
  DISCLOSURE_AND_CONSENT: 'DISCLOSURE_AND_CONSENT',
  JPMC_DISCLOSURE: 'JPMC_DISCLOSURE',
  PASSPORT: 'PASSPORT',
  EIN: 'EIN',
  SSN_CARD: 'SSN_CARD',
  GOV_ISSUED_ID_CARD: 'GOV_ISSUED_ID_CARD',
  STANDARD_OPERATING_PROCEDURE: 'STANDARD_OPERATING_PROCEDURE',
  BRAND_LOGO: 'BRAND_LOGO',
  SUPPORT_CONTACT: 'SUPPORT_CONTACT',
  LEGAL_DOCUMENTS: 'LEGAL_DOCUMENTS',
  EVIDENCE: 'EVIDENCE',
  BULK_PARTY: 'BULK_PARTY',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  IRS_DOCUMENT_TIN: 'IRS_DOCUMENT_TIN',
  ARTICLES_OF_INCORPORATION: 'ARTICLES_OF_INCORPORATION',
  MOA: 'MOA',
  MAA: 'MAA',
  CONSTITUTIONAL_DOCUMENT: 'CONSTITUTIONAL_DOCUMENT',
  TRUST_DEED: 'TRUST_DEED',
  PARTNERSHIP_AGREEMENT: 'PARTNERSHIP_AGREEMENT',
  LLC_AGREEMENT: 'LLC_AGREEMENT',
  OPERATING_AGREEMENT: 'OPERATING_AGREEMENT',
  OFFERING_MEMO: 'OFFERING_MEMO',
  BANKING_LICENSE: 'BANKING_LICENSE',
  BUSINESS_LICENSE: 'BUSINESS_LICENSE',
  BUSINESS_REGISTRATION_CERT: 'BUSINESS_REGISTRATION_CERT',
  OTHER_GOV_REGISTRATION_DOCS: 'OTHER_GOV_REGISTRATION_DOCS',
  SEC_FILINGS_10K: 'SEC_FILINGS_10K',
} as const;

/**
 * Number of days from the day of its creation that this request will expire.
 * @minimum 1
 * @maximum 180
 */
export type ValidForDays = number;

export type DocumentRequestStatus =
  (typeof DocumentRequestStatus)[keyof typeof DocumentRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentRequestStatus = {
  ACTIVE: 'ACTIVE',
  CLOSED: 'CLOSED',
  EXPIRED: 'EXPIRED',
} as const;

export interface DocumentRequestResponse {
  clientId?: ClientId;
  country?: CountryCodeSmbdo;
  createdAt?: string;
  documentType?: DocumentTypeSmbdo;
  id?: DocumentRequestId;
  partyId?: PartyId;
  /**
   * Any one requirement must be fulfilled.
   * @minItems 1
   * @maxItems 10
   */
  requirements?: DocumentRequestRequirement[];
  status?: DocumentRequestStatus;
  updatedAt?: string;
  validForDays?: ValidForDays;
}

export type OrganizationDetailsRequired = OrganizationDetails;

/**
 * Year of company formation.
 * @minLength 4
 * @maxLength 4
 * @pattern \d{4}
 */
export type YearOfFormation = string;

/**
 * Whether the party has a website. False if opted out.
 */
export type WebsiteAvailable = boolean;

/**
 * Name/URL of the website
 * @minLength 1
 * @maxLength 500
 */
export type Website = string;

export type TradeOverInternet = boolean;

/**
 * Significant ownership means there individuals who own 25% or more of the client's business. Always required for a Privately Owned Business. If Significant Ownership is selected as `true`, at least one related party should have the role of owner.

 */
export type SignificantOwnership = boolean;

/**
 * The ID type
 */
export type OrganizationIdentityDtoIdType =
  (typeof OrganizationIdentityDtoIdType)[keyof typeof OrganizationIdentityDtoIdType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationIdentityDtoIdType = {
  EIN: 'EIN',
  BUSINESS_REGISTRATION_ID: 'BUSINESS_REGISTRATION_ID',
} as const;

/**
 * The tax ID of the organization.
 */
export interface OrganizationIdentityDto {
  /** Description of the ID. */
  description?: string;
  expiryDate?: string;
  /** The ID type */
  idType: OrganizationIdentityDtoIdType;
  /**
   * Issuing authority
   * @minLength 1
   * @maxLength 500
   */
  issuer: string;
  /**
   * ID value
   * @minLength 1
   * @maxLength 100
   */
  value: string;
}

export type OrganizationType =
  (typeof OrganizationType)[keyof typeof OrganizationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationType = {
  LIMITED_LIABILITY_COMPANY: 'LIMITED_LIABILITY_COMPANY',
  C_CORPORATION: 'C_CORPORATION',
  S_CORPORATION: 'S_CORPORATION',
  PARTNERSHIP: 'PARTNERSHIP',
  PUBLICLY_TRADED_COMPANY: 'PUBLICLY_TRADED_COMPANY',
  NON_PROFIT_CORPORATION: 'NON_PROFIT_CORPORATION',
  GOVERNMENT_ENTITY: 'GOVERNMENT_ENTITY',
  SOLE_PROPRIETORSHIP: 'SOLE_PROPRIETORSHIP',
  UNINCORPORATED_ASSOCIATION: 'UNINCORPORATED_ASSOCIATION',
} as const;

/**
 * The organization‚Äôs description.

 */
export type OrganizationDescription = string;

/**
 * The organization‚Äôs legal name. It is the official name of the person or entity that owns a company. Must be the name used on the legal party's government forms and business paperwork

 */
export type OrganizationName = string;

/**
 * The industry type of the business connected to the client.

 */
export type OrganizationIndustryType = string;

/**
 * The industry category of the business connected to the client. For example, Accommodation and Food Services.

 */
export type OrganizationIndustryCategory = string;

/**
 * Entities in ownership means that one or more businesses own part of the business connected to the client. Always required for a Privately Owned Business.

 */
export type EntitiesInOwnership = boolean;

/**
 * @minLength 1
 * @maxLength 100
 */
export type DbaName = string;

export interface OrganizationDetails {
  /**
   * @minItems 1
   * @maxItems 5
   */
  addresses?: AddressDtoSmbdo[];
  /**
   * @minItems 0
   * @maxItems 100
   */
  associatedCountries?: CountryCodeIsoAlpha2[];
  countryOfFormation?: CountryCodeIsoAlpha2;
  dbaName?: DbaName;
  entitiesInOwnership?: EntitiesInOwnership;
  industryCategory?: OrganizationIndustryCategory;
  industryType?: OrganizationIndustryType;
  jurisdiction?: CountryCodeIsoAlpha2;
  mcc?: Mcc;
  organizationDescription?: OrganizationDescription;
  /**
   * @minItems 0
   * @maxItems 6
   */
  organizationIds?: OrganizationIdentityDto[];
  organizationName?: OrganizationName;
  organizationType?: OrganizationType;
  phone?: PhoneSmbdo;
  /**
   * The list of additional merchant category codes describing industries that the business is in.
   * @minItems 0
   * @maxItems 50
   */
  secondaryMccList?: Mcc[];
  significantOwnership?: SignificantOwnership;
  tradeOverInternet?: TradeOverInternet;
  website?: Website;
  websiteAvailable?: WebsiteAvailable;
  yearOfFormation?: YearOfFormation;
}

export interface IndividualDetails {
  /**
   * @minItems 1
   * @maxItems 5
   */
  addresses?: AddressDtoSmbdo[];
  birthDate?: BirthDate;
  countryOfResidence?: CountryCodeIsoAlpha2;
  firstName?: FirstName;
  /**
   * @minItems 0
   * @maxItems 16
   */
  individualIds?: IndividualIdentityDTO[];
  jobTitle?: IndividualJobTitle;
  jobTitleDescription?: IndividualJobTitleDescription;
  lastName?: LastName;
  middleName?: MiddleName;
  nameSuffix?: NameSuffix;
  natureOfOwnership?: NatureOfOwnership;
  phone?: PhoneSmbdo;
  soleOwner?: SoleOwner;
}

export type IndividualDetailsRequired = IndividualDetails;

export type SoleOwner = boolean;

/**
 * Nature of ownership e.g. Direct|Indirect

 */
export type NatureOfOwnership = string;

export type PhoneSmbdoPhoneType =
  (typeof PhoneSmbdoPhoneType)[keyof typeof PhoneSmbdoPhoneType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PhoneSmbdoPhoneType = {
  BUSINESS_PHONE: 'BUSINESS_PHONE',
  MOBILE_PHONE: 'MOBILE_PHONE',
  ALTERNATE_PHONE: 'ALTERNATE_PHONE',
} as const;

/**
 * Phone Number Information of the account

 */
export interface PhoneSmbdo {
  countryCode: string;
  phoneNumber: string;
  phoneType: PhoneSmbdoPhoneType;
}

/**
 * If `jobTitle` is Other, then job title description is required.

 * @maxLength 50
 */
export type IndividualJobTitleDescription = string;

/**
 * Job title in the case of party type being an `INDIVIDUAL`. Job title is a required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other

 */
export type IndividualJobTitle = string;

/**
 * `idType` denotes the type of taxpayer identification number (e.g. Social Security Number or Individual Taxpayer Identification Number). A Social Security Number or Individual Taxpayer Identification Number is accepted for an owner or controller individual. Decision makers do not require any tax identifier.

 */
export type IndividualIdentityDTOIdType =
  (typeof IndividualIdentityDTOIdType)[keyof typeof IndividualIdentityDTOIdType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IndividualIdentityDTOIdType = {
  SSN: 'SSN',
  ITIN: 'ITIN',
} as const;

export interface IndividualIdentityDTO {
  /** Description of the ID. */
  description?: string;
  expiryDate?: string;
  /** `idType` denotes the type of taxpayer identification number (e.g. Social Security Number or Individual Taxpayer Identification Number). A Social Security Number or Individual Taxpayer Identification Number is accepted for an owner or controller individual. Decision makers do not require any tax identifier.
   */
  idType: IndividualIdentityDTOIdType;
  /** Identification issuer country code e.g. US */
  issuer: string;
  /**
   * Value of the identification type. EIN/SSN/ITIN must be of 9 digits.
   * @minLength 1
   * @maxLength 20
   */
  value: string;
}

/**
 * The name suffix used by the party
 * @minLength 1
 * @maxLength 5
 */
export type NameSuffix = string;

/**
 * Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.

 * @minLength 2
 * @maxLength 30
 */
export type LastName = string;

/**
 * Middle name of the individual in case of party type being an individual.

 * @maxLength 30
 */
export type MiddleName = string;

/**
 * First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.

 * @minLength 2
 * @maxLength 30
 */
export type FirstName = string;

/**
 * Country code in ISO alpha-2 format.
 * @minLength 2
 * @maxLength 2
 */
export type CountryCodeIsoAlpha2 = string;

/**
 * The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.

 */
export type BirthDate = string;

export interface UpdatePartyRequest {
  access?: AccessList;
  email?: Email;
  externalId?: ExternalId;
  individualDetails?: IndividualDetails;
  networkRegistration?: NetworkRegistration;
  organizationDetails?: OrganizationDetails;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles?: Role[];
  status?: PartyStatus;
}

export interface CreatePartyRequest {
  access?: AccessList;
  email?: Email;
  externalId?: ExternalId;
  individualDetails?: IndividualDetailsRequired;
  networkRegistration?: NetworkRegistration;
  organizationDetails?: OrganizationDetailsRequired;
  parentExternalId?: ExternalId;
  parentPartyId?: ParentPartyId;
  partyType: PartyTypeSmbdo;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles: Role[];
}

/**
 * The name of the party. A party can be an individual or an organization.
 * @minLength 1
 * @maxLength 500
 */
export type Name = string;

export interface PartySummaryResponse {
  country?: CountryCodeIsoAlpha2;
  createdAt?: string;
  externalId?: ExternalId;
  id?: PartyId;
  name?: Name;
  parentPartyId?: ParentPartyId;
  partyType?: PartyTypeSmbdo;
  profileStatus?: ProfileStatus;
  /**
   * @minItems 0
   * @maxItems 10
   */
  roles?: Role[];
  status?: PartyStatus;
}

export interface PartyListResponse {
  metadata?: PageMetaDataSmbdo;
  /**
   * @minItems 0
   * @maxItems 100
   */
  parties?: PartySummaryResponse[];
}

/**
 * Describes which attestation to remove. An existing attestation with a matching `documentId` will be removed.
 */
export interface AttestationRemoval {
  documentId: DocumentId;
}

export interface UpdateClientRequestSmbdo {
  /**
   * @minItems 1
   * @maxItems 10
   */
  addAttestations?: Attestation[];
  /**
   * Update a party by specifying its ID in the object. Create a party by setting `parentPartyId` to the client's root party. `partyType` and `roles` are required when creating a new party.

   * @minLength 1
   * @maxLength 10
   * @minItems 0
   */
  addParties?: UpdateClientRequestSmbdoAddPartiesItem[];
  addProducts?: ProductList;
  /**
   * @minItems 0
   * @maxItems 200
   */
  questionResponses?: QuestionResponse[];
  /**
   * @minItems 1
   * @maxItems 10
   */
  removeAttestations?: AttestationRemoval[];
}

/**
 * Update a party inline within the clients API by supplying its ID.
 */
export interface UpdatePartyRequestInline {
  access?: AccessList;
  email?: Email;
  id?: PartyId;
  individualDetails?: IndividualDetails;
  organizationDetails?: OrganizationDetails;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles?: Role[];
}

/**
 * Create a party within the clients payload.
 */
export interface CreatePartyRequestInline {
  access?: AccessList;
  email?: Email;
  externalId?: ExternalId;
  individualDetails?: IndividualDetailsRequired;
  organizationDetails?: OrganizationDetailsRequired;
  parentPartyId?: ParentPartyId;
  partyType?: PartyTypeSmbdo;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles?: Role[];
}

export type UpdateClientRequestSmbdoAddPartiesItem = CreatePartyRequestInline &
  UpdatePartyRequestInline;

/**
 * A list of question IDs.
 * @minItems 0
 * @maxItems 200
 */
export type QuestionIdList = string[];

/**
 * A list of document request IDs.
 * @minItems 0
 * @maxItems 10
 */
export type DocumentRequestIdList = string[];

export type ClientResponseOutstanding = {
  attestationDocumentIds?: DocumentIdList;
  documentRequestIds?: DocumentRequestIdList;
  partyIds?: PartyIdList;
  partyRoles?: PartyRoleList;
  questionIds?: QuestionIdList;
};

export interface ClientResponse {
  /**
   * @minItems 0
   * @maxItems 10
   */
  attestations?: Attestation[];
  id: ClientId;
  outstanding: ClientResponseOutstanding;
  /** @minItems 0 */
  parties?: PartyResponse[];
  partyId: PartyId;
  products: ProductList;
  /**
   * @minItems 0
   * @maxItems 200
   */
  questionResponses?: QuestionResponse[];
  status: ClientStatus;
}

/**
 * Create a party within the clients payload.
 */
export type CreatePartyRequestInlineRequired = CreatePartyRequestInline;

export interface CreateClientRequestSmbdo {
  /**
   * @minItems 1
   * @maxItems 10
   */
  attestations?: Attestation[];
  /**
   * @minItems 1
   * @maxItems 10
   */
  parties?: CreatePartyRequestInlineRequired[];
  partyId?: PartyId;
  products: ProductList;
}

export type ClientSummaryResponseOutstanding = {
  attestationDocumentIds?: DocumentIdList;
  documentRequestIds?: DocumentRequestIdList;
  partyIds?: PartyIdList;
  partyRoles?: PartyRoleList;
  questionIds?: QuestionIdList;
};

export interface ClientSummaryResponse {
  id: ClientId;
  outstanding: ClientSummaryResponseOutstanding;
  partyId: PartyId;
  products: ProductList;
  status: ClientStatus;
}

/**
 * Collection of clients.
 */
export interface ClientListResponse {
  /**
   * @minItems 0
   * @maxItems 100
   */
  clients: ClientSummaryResponse[];
  metadata: PageMetaDataSmbdo;
}

/**
 * A product available for a client in a jurisdiction.
 */
export type ClientProduct = string;

/**
 * A list of product selections.
 * @minItems 1
 * @maxItems 50
 */
export type ProductList = ClientProduct[];

export type PartyRoleListItem =
  (typeof PartyRoleListItem)[keyof typeof PartyRoleListItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyRoleListItem = {
  AUTHORIZED_USER: 'AUTHORIZED_USER',
  BENEFICIAL_OWNER: 'BENEFICIAL_OWNER',
  CLIENT: 'CLIENT',
  CONTROLLER: 'CONTROLLER',
  DECISION_MAKER: 'DECISION_MAKER',
  PRIMARY_CONTACT: 'PRIMARY_CONTACT',
} as const;

/**
 * A list of party roles.
 * @minItems 0
 * @maxItems 10
 */
export type PartyRoleList = PartyRoleListItem[];

/**
 * A list of party IDs.
 * @minItems 0
 * @maxItems 10
 */
export type PartyIdList = PartyId[];

/**
 * The unique id generated by the system for the uploaded document,  which can be used for future retrieval.

 */
export type DocumentId = string;

/**
 * A list of document IDs.
 * @minItems 0
 * @maxItems 10
 */
export type DocumentIdList = DocumentId[];

export interface Attestation {
  attestationTime?: string;
  /** The full name of an individual. */
  attesterFullName?: string;
  documentId?: DocumentId;
  /** IPv4 Address. */
  ipAddress?: string;
}

/**
 * The values of a question response. Each item is a string that will be validated according to the question's responseSchema.

 * @minItems 1
 * @maxItems 20
 */
export type ResponseValueList = string[];

/**
 * The client's response to a question.
 */
export interface QuestionResponse {
  /** @maxLength 10 */
  questionId?: string;
  values?: ResponseValueList;
}

export interface PartyResponse {
  access?: AccessList;
  createdAt?: string;
  email?: Email;
  externalId?: ExternalId;
  id?: PartyId;
  individualDetails?: IndividualDetails;
  networkRegistration?: NetworkRegistration;
  organizationDetails?: OrganizationDetails;
  parentExternalId?: ExternalId;
  parentPartyId?: ParentPartyId;
  partyType?: PartyTypeSmbdo;
  profileStatus?: ProfileStatus;
  /**
   * @minItems 0
   * @maxItems 10
   */
  roles?: Role[];
  status?: PartyStatus;
  validationResponse?: ValidationResponse;
}

/**
 * A party field. It refers to either a missing field or a field that needs to be updated.
 */
export interface PartyField {
  /** Display name of the field. */
  displayName?: string;
  /** Name of the field. */
  name?: string;
  /** Type of the field. */
  type?: string;
}

export type ValidationType =
  (typeof ValidationType)[keyof typeof ValidationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationType = {
  ENTITY_VALIDATION: 'ENTITY_VALIDATION',
} as const;

/**
 * Status of a party validation. Missing fields result in `NEEDS_INFO`.

 */
export type ValidationStatus =
  (typeof ValidationStatus)[keyof typeof ValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  NOT_VALIDATED: 'NOT_VALIDATED',
  NEEDS_INFO: 'NEEDS_INFO',
  NEEDS_REVIEW: 'NEEDS_REVIEW',
  VALIDATED: 'VALIDATED',
} as const;

export type ValidationResponseItem = {
  /** Comments/basic response related to the workflow step of validation response. */
  comments?: string;
  /**
   * @minItems 0
   * @maxItems 10
   */
  documentRequestIds?: string[];
  /**
   * @minItems 0
   * @maxItems 100
   */
  fields?: PartyField[];
  /**
   * @minItems 0
   * @maxItems 10
   */
  identities?: string[];
  validationStatus?: ValidationStatus;
  validationType?: ValidationType;
};

/**
 * List of validation info.
 * @minItems 0
 * @maxItems 10
 */
export type ValidationResponse = ValidationResponseItem[];

export type PartyStatus = (typeof PartyStatus)[keyof typeof PartyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
} as const;

export type ProfileStatus = (typeof ProfileStatus)[keyof typeof ProfileStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileStatus = {
  NEW: 'NEW',
  REVIEW_IN_PROGRESS: 'REVIEW_IN_PROGRESS',
  INFORMATION_REQUESTED: 'INFORMATION_REQUESTED',
  APPROVED: 'APPROVED',
  DECLINED: 'DECLINED',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
} as const;

export type DocumentRequestRequirementLevel =
  (typeof DocumentRequestRequirementLevel)[keyof typeof DocumentRequestRequirementLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentRequestRequirementLevel = {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
} as const;

/**
 * Unique Document Request identifier.
 * @maxLength 10
 */
export type DocumentRequestId = string;

export type DocumentTypeSmbdo =
  (typeof DocumentTypeSmbdo)[keyof typeof DocumentTypeSmbdo];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentTypeSmbdo = {
  TERMS_CONDITIONS: 'TERMS_CONDITIONS',
  DISCLOSURE_AND_CONSENT: 'DISCLOSURE_AND_CONSENT',
  JPMC_DISCLOSURE: 'JPMC_DISCLOSURE',
  PASSPORT: 'PASSPORT',
  EIN: 'EIN',
  SSN_CARD: 'SSN_CARD',
  GOV_ISSUED_ID_CARD: 'GOV_ISSUED_ID_CARD',
  STANDARD_OPERATING_PROCEDURE: 'STANDARD_OPERATING_PROCEDURE',
  BRAND_LOGO: 'BRAND_LOGO',
  SUPPORT_CONTACT: 'SUPPORT_CONTACT',
  LEGAL_DOCUMENTS: 'LEGAL_DOCUMENTS',
  EVIDENCE: 'EVIDENCE',
  BULK_PARTY: 'BULK_PARTY',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  IRS_DOCUMENT_TIN: 'IRS_DOCUMENT_TIN',
  ARTICLES_OF_INCORPORATION: 'ARTICLES_OF_INCORPORATION',
  MOA: 'MOA',
  MAA: 'MAA',
  CONSTITUTIONAL_DOCUMENT: 'CONSTITUTIONAL_DOCUMENT',
  TRUST_DEED: 'TRUST_DEED',
  PARTNERSHIP_AGREEMENT: 'PARTNERSHIP_AGREEMENT',
  LLC_AGREEMENT: 'LLC_AGREEMENT',
  OPERATING_AGREEMENT: 'OPERATING_AGREEMENT',
  OFFERING_MEMO: 'OFFERING_MEMO',
  BANKING_LICENSE: 'BANKING_LICENSE',
  BUSINESS_LICENSE: 'BUSINESS_LICENSE',
  BUSINESS_REGISTRATION_CERT: 'BUSINESS_REGISTRATION_CERT',
  OTHER_GOV_REGISTRATION_DOCS: 'OTHER_GOV_REGISTRATION_DOCS',
  SEC_FILINGS_10K: 'SEC_FILINGS_10K',
} as const;

export interface DocumentRequestRequirement {
  /**
   * @minItems 1
   * @maxItems 100
   */
  documentTypes: DocumentTypeSmbdo[];
  level?: DocumentRequestRequirementLevel;
  /**
   * @minimum 1
   * @maximum 10
   */
  minRequired?: number;
}

/**
 * Country code in ISO alpha-2 format.
 * @minLength 2
 * @maxLength 2
 */
export type CountryCodeSmbdo = string;

export interface PageMetaDataSmbdo {
  /** Number of records per page.
   */
  limit?: number;
  /** Page Number.
   */
  page?: number;
  /** Total number of items.
   */
  total?: number;
}

/**
 * Organization/Individual party id, that uniquely identifies the party.

 * @maxLength 10
 */
export type PartyId = string;

/**
 * Type of address.
 */
export type AddressDtoSmbdoAddressType =
  (typeof AddressDtoSmbdoAddressType)[keyof typeof AddressDtoSmbdoAddressType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddressDtoSmbdoAddressType = {
  LEGAL_ADDRESS: 'LEGAL_ADDRESS',
  MAILING_ADDRESS: 'MAILING_ADDRESS',
  BUSINESS_ADDRESS: 'BUSINESS_ADDRESS',
  RESIDENTIAL_ADDRESS: 'RESIDENTIAL_ADDRESS',
} as const;

export interface AddressDtoSmbdo {
  /**
   * The first line must not be a PO Box and must begin with a number. Each line has a maximum of 60 characters.
   * @minItems 1
   * @maxItems 5
   */
  addressLines: string[];
  /** Type of address. */
  addressType?: AddressDtoSmbdoAddressType;
  /**
   * city has a maximum of 30 characters.
   * @maxLength 34
   */
  city: string;
  /** Country code in alpha-2 format. */
  country: string;
  /**
   * Postal/ZIP code.
   * @maxLength 10
   */
  postalCode: string;
  /**
   * State code in alpha-2 format. State is mandatory for countries like United States.
   * @maxLength 30
   */
  state?: string;
}

export type Role = (typeof Role)[keyof typeof Role];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Role = {
  AUTHORIZED_USER: 'AUTHORIZED_USER',
  BENEFICIAL_OWNER: 'BENEFICIAL_OWNER',
  CLIENT: 'CLIENT',
  CONTROLLER: 'CONTROLLER',
  DECISION_MAKER: 'DECISION_MAKER',
  PRIMARY_CONTACT: 'PRIMARY_CONTACT',
} as const;

/**
 * The party type
 */
export type PartyTypeSmbdo =
  (typeof PartyTypeSmbdo)[keyof typeof PartyTypeSmbdo];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyTypeSmbdo = {
  INDIVIDUAL: 'INDIVIDUAL',
  ORGANIZATION: 'ORGANIZATION',
} as const;

/**
 * The Parent Party Id.

 * @maxLength 10
 */
export type ParentPartyId = string;

/**
 * Id in external system.
 * @minLength 1
 * @maxLength 20
 */
export type ExternalId = string;

/**
 * Email of the party.
 */
export type Email = string;

/**
 * List of user access descriptors.
 * @minItems 0
 * @maxItems 10
 */
export type AccessList = string[];

/**
 * The client's status.
 */
export type ClientStatus = (typeof ClientStatus)[keyof typeof ClientStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClientStatus = {
  APPROVED: 'APPROVED',
  DECLINED: 'DECLINED',
  INFORMATION_REQUESTED: 'INFORMATION_REQUESTED',
  NEW: 'NEW',
  REVIEW_IN_PROGRESS: 'REVIEW_IN_PROGRESS',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
} as const;

/**
 * A client's unique ID
 * @maxLength 10
 */
export type ClientId = string;

/**
 * Part of the request which is responsible for the reason
 */
export type ApiErrorReasonV2Location =
  (typeof ApiErrorReasonV2Location)[keyof typeof ApiErrorReasonV2Location];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiErrorReasonV2Location = {
  BODY: 'BODY',
  QUERY: 'QUERY',
  PATH: 'PATH',
  HEADER: 'HEADER',
} as const;

export interface ApiErrorReasonV2 {
  /** Short code that identifies the error - publicly cataloged and documented */
  code?: string;
  /** The location of the property or parameter in error */
  field?: string;
  /** Part of the request which is responsible for the reason */
  location?: ApiErrorReasonV2Location;
  /** Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise */
  message: string;
}

export interface ApiErrorV2 {
  /**
   * Provides additional context and detail on the validation errors
   * @minItems 0
   */
  context?: ApiErrorReasonV2[];
  /** HTTP status code */
  httpStatus?: number;
  /** Client provided request identifier */
  requestId?: string;
  /** Short humanly-readable title of the error */
  title: string;
  /** Internal assigned traced identifier */
  traceId?: string;
}

export interface ApiError {
  /**
   * Provides additional context and detail on the validation errors
   * @minItems 0
   */
  context?: ApiErrorReasonV2[];
  /** HTTP status code */
  httpStatus?: number;
  /** Client provided request identifier */
  requestId?: string;
  /** Short humanly-readable title of the error */
  title: string;
  /** Internal assigned traced identifier */
  traceId?: string;
}
