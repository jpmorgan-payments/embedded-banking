openapi: 3.0.1
info:
  title: Embedded Finance Digital Onboarding API
  version: 1.0.3
  description: Embedded Finance services from J.P. Morgan
  contact:
    name: JPMC Technical Services Support
servers:
  - url: https://apigateway.jpmorgan.com/tsapi/ef/do/v1
    description: JPM-PROD - Embedded Finance
    x-jpmc-deployment-type: prod
  - url: https://apigatewaycat.jpmorgan.com/tsapi/ef/do/v1
    description: JPM-CAT Embedded Finance
    x-jpmc-deployment-type: prod
  - url: https://apigatewaycat.jpmorgan.com/tsapi/ef/do/v1
    description: JPM-CAT Embedded Finance
    x-jpmc-deployment-type: cat
  - url: https://apigatewayqaf.jpmorgan.com/tsapi/ef/do/v1
    description: JPM-UAT Embedded Finance Sandbox
    x-jpmc-deployment-type: uat
    x-jpmc-client-visible: false
  - url: https://api-mock.payments.jpmorgan.com/tsapi/ef/do/v1
    description: JPM-PROD - Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: prod
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.uat.aws.jpmchase.net/tsapi/ef/do/v1
    description: JPM-PRE-PROD Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: preprod
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.uat.aws.jpmchase.net/tsapi/ef/do/v1
    description: JPM-UAT Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: uat
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.dev.aws.jpmchase.net/tsapi/ef/do/v1
    description: JPM-SIT Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: sit
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.dev.aws.jpmchase.net/tsapi/ef/do/v1
    description: JPM-DEV Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: dev
    x-jpmc-client-visible: false
security:
  - Certs: []
    Token: []
  - Certs: []
tags:
  - name: Onboard Clients
    description: Onboard and manage Embedded Finance clients.
  - name: Onboard Parties
    description: Create and manage legal parties.
  - name: Onboarding Questions
    description: Information on KYC questions.
  - name: Onboarding Document requests
    description: View details of requests for documents.
  - name: Onboarding Documents
    description: Manage document upload and retrieval.

paths:
  /clients:
    x-ep-only: true
    get:
      summary: List clients
      description: Returns a list of Embedded Finance clients associated with your platform.
      operationId: smbdo-listClients
      tags:
        - Onboard Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientListResponse"
              examples:
                ClientListResponse:
                  $ref: "#/components/examples/ClientListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      summary: Create client
      description: Creates a client.
      operationId: smbdo-postClients
      tags:
        - Onboard Clients
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientRequestSmbdo"
            examples:
              CreateClient:
                $ref: "#/components/examples/CreateClient"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                CreateClientResponse:
                  $ref: "#/components/examples/CreateClientResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/clients/{id}":
    x-ep-only: true
    get:
      summary: Get client
      description: Retrieve client details by its ID.
      operationId: smbdo-getClient
      tags:
        - Onboard Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000010400"
      responses:
        "200":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                GetClientResponse:
                  $ref: "#/components/examples/GetClientResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      summary: Update client
      description: Updates a client.
      operationId: smbdo-updateClient
      tags:
        - Onboard Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000010400"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientRequestSmbdo"
            examples:
              UpdateClient:
                $ref: "#/components/examples/UpdateClient"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                UpdateClientResponse:
                  $ref: "#/components/examples/UpdateClientResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/clients/{id}/verifications":
    x-ep-only: true
    post:
      summary: Perform client verifications
      description: Performs client verifications
      operationId: smbdo-postClientVerifications
      tags:
        - Onboard Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000010400"
      responses:
        "202":
          description: Accepted.
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /parties:
    x-ep-only: true
    get:
      summary: List parties
      description: Retrieves a list of parties.
      operationId: smbdo-listParties
      tags:
        - Onboard Parties
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/parentPartyId"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyListResponse"
              examples:
                PartyListResponse:
                  $ref: "#/components/examples/PartyListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      summary: Create party
      description: Creates a new party.
      operationId: smbdo-postParties
      tags:
        - Onboard Parties
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartyRequest"
            examples:
              CreateOrganizationParty:
                $ref: "#/components/examples/CreateOrganizationParty"
              CreateIndividualParty:
                $ref: "#/components/examples/CreateIndividualParty"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/parties/{id}":
    x-ep-only: true
    get:
      tags:
        - Onboard Parties
      summary: Get party
      description: Details a party by its unique identifier.
      operationId: smbdo-getParty
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a party.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "2000000111"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      tags:
        - Onboard Parties
      summary: Update party
      description: Updates a party.
      operationId: smbdo-updateParty
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a party.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "2000000111"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePartyRequest"
            examples:
              UpdateOrganizationParty:
                $ref: "#/components/examples/UpdateOrganizationParty"
              UpdateIndividualParty:
                $ref: "#/components/examples/UpdateIndividualParty"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/parties/{id}/validations":
    x-ep-only: true
    post:
      tags:
        - Onboard Parties
      summary: Perform party validations
      description: Perform party validations
      operationId: smbdo-postPartyValidations
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a party.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "2000000112"
      responses:
        "202":
          description: Accepted.
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /questions:
    x-ep-only: true
    get:
      tags:
        - Onboard Questions
      summary: List questions
      description: |
        Lists customer due diligence questions.
      operationId: smbdo-listQuestions
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/questionIdListInQuery"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionListResponse"
              examples:
                QuestionListResponse:
                  $ref: "#/components/examples/QuestionListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/questions/{id}":
    x-ep-only: true
    get:
      tags:
        - Onboard Questions
      summary: Get question
      description: |
        Get a customer due diligence question.
      operationId: smbdo-getQuestion
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique Question identifier.
          required: true
          schema:
            type: string
            maxLength: 10
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemas-QuestionResponse"
              examples:
                QuestionResponse:
                  $ref: "#/components/examples/QuestionResponse"
                DependentQuestionResponse:
                  $ref: "#/components/examples/DependentQuestionResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /document-requests:
    x-ep-only: true
    get:
      tags:
        - Onboarding Document requests
      summary: List document requests
      description: |
        Get a list of document requests.
      operationId: smbdo-listDocumentRequests
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdQuery"
        - $ref: "#/components/parameters/partyIdQuery"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentRequestListResponse"
              examples:
                DocumentRequestListResponse:
                  $ref: "#/components/examples/DocumentRequestListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/document-requests/{id}":
    x-ep-only: true
    get:
      tags:
        - Onboarding Document requests
      summary: Get document request
      description: Returns details for a document request using its unique identifier.
      operationId: smbdo-getDocumentRequest
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a document request.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "3000011675"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentRequestResponse"
              examples:
                DocumentRequestDriversLicenseUs:
                  $ref: "#/components/examples/DocumentRequestDriversLicenseUs"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /documents:
    x-ep-only: true
    get:
      tags:
        - Onboarding Documents
      summary: List document details
      description: |
        Retrieves a list of document details.
      operationId: smbdo-getAllDocumentDetails
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdInQuery"
        - $ref: "#/components/parameters/partyIdQuery"
        - $ref: "#/components/parameters/platformIdInQuery"
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDocumentsResponse"
              examples:
                ListDocumentsRes:
                  $ref: "#/components/examples/ListDocumentsRes"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/documents/{id}":
    x-ep-only: true
    get:
      tags:
        - Onboarding Documents
      summary: Get document details
      description: |
        Retrieve details of a document.
      operationId: smbdo-getDocumentDetail
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique document identifier.
          example: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDocumentsResponse"
              examples:
                ListDocumentsRes:
                  $ref: "#/components/examples/ListDocumentsRes"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/documents/{id}/file":
    x-ep-only: true
    get:
      tags:
        - Onboarding Documents
      summary: Download a document
      description: Download a document using its unique identifier.
      operationId: smbdo-downloadDocument
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique Document identifier.
          example: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/pdf:
              schema:
                type: string
                format: byte
            image/png:
              schema:
                type: string
                format: byte
            image/jpeg:
              schema:
                type: string
                format: byte
            image/heic:
              schema:
                type: string
                format: byte
            application/csv:
              schema:
                type: string
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
components:
  schemas:
    ApiError:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Short humanly-readable title of the error
          example: BAD_REQUEST
        httpStatus:
          type: integer
          description: HTTP status code
          example: 422
        traceId:
          type: string
          description: Internal assigned traced identifier
        requestId:
          type: string
          description: Client provided request identifier
        context:
          type: array
          items:
            $ref: '#/components/schemas/ApiErrorReasonV2'
          description: Provides additional context and detail on the validation errors
          minItems: 0
    ApiErrorV2:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Short humanly-readable title of the error
          example: BAD_REQUEST
        httpStatus:
          type: integer
          description: HTTP status code
          example: 422
        traceId:
          type: string
          description: Internal assigned traced identifier
        requestId:
          type: string
          description: Client provided request identifier
        context:
          type: array
          items:
            $ref: '#/components/schemas/ApiErrorReasonV2'
          description: Provides additional context and detail on the validation errors
          minItems: 0
    ApiErrorReasonV2:
      type: object
      required:
        - message
      properties:
        code:
          type: string
          example: '11000'
          description: Short code that identifies the error - publicly cataloged and documented
        location:
          type: string
          enum:
            - BODY
            - QUERY
            - PATH
            - HEADER
          example: BODY
          description: Part of the request which is responsible for the reason
        field:
          type: string
          description: The location of the property or parameter in error
        message:
          type: string
          example: Client with ID 0031234567 does not exist.
          description: Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise
    ClientId:
      description: A client's unique ID
      example: "9000000333"
      type: string
      maxLength: 10
    ClientStatus:
      description: The client's status.
      type: string
      enum:
        - APPROVED
        - DECLINED
        - INFORMATION_REQUESTED
        - NEW
        - REVIEW_IN_PROGRESS
        - SUSPENDED
        - TERMINATED
    AccessList:
      description: List of user access descriptors.
      type: array
      items:
        type: string
      minItems: 0
      maxItems: 10
    Email:
      type: string
      example: client@company.com
      description: Email of the party.
    ExternalId:
      type: string
      minLength: 1
      maxLength: 20
      description: Id in external system.
    ParentPartyId:
      type: string
      maxLength: 10
      description: |
        The Parent Party Id.
    PartyTypeSmbdo:
      type: string
      description: The party type
      enum:
        - INDIVIDUAL
        - ORGANIZATION
    Role:
      type: string
      enum:
        - AUTHORIZED_USER
        - BENEFICIAL_OWNER
        - CLIENT
        - CONTROLLER
        - DECISION_MAKER
        - PRIMARY_CONTACT
    AddressDtoSmbdo:
      type: object
      required:
        - addressLines
        - city
        - country
        - postalCode
      properties:
        addressType:
          type: string
          enum:
            - LEGAL_ADDRESS
            - MAILING_ADDRESS
            - BUSINESS_ADDRESS
            - RESIDENTIAL_ADDRESS
          example: BUSINESS_ADDRESS
          description: Type of address.
        addressLines:
          description: The first line must not be a PO Box and must begin with a number. Each line has a maximum of 60 characters.
          type: array
          minItems: 1
          maxItems: 5
          items:
            type: string
            description: Address line items
            minLength: 1
            maxLength: 60
          example:
            - 689 Main St
            - Opposite St. Andrews Church
            - Mini York
        city:
          type: string
          maxLength: 34
          example: Anchorage
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: AZ
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "99501"
          description: Postal/ZIP code.
        country:
          type: string
          example: US
          description: Country code in alpha-2 format.
    PartyId:
      type: string
      maxLength: 10
      example: "2000005555"
      description: |
        Organization/Individual party id, that uniquely identifies the party.
    PageMetaDataSmbdo:
      type: object
      properties:
        page:
          type: integer
          example: 2
          description: |
            Page Number.
        limit:
          type: integer
          example: 30
          description: |
            Number of records per page.
        total:
          type: integer
          example: 340
          description: |
            Total number of items.
    CountryCodeSmbdo:
      type: string
      example: US
      description: Country code in ISO alpha-2 format.
      minLength: 2
      maxLength: 2
    DocumentTypeSmbdo:
      type: string
      enum:
        - TERMS_CONDITIONS
        - DISCLOSURE_AND_CONSENT
        - JPMC_DISCLOSURE
        - PASSPORT
        - EIN
        - SSN_CARD
        - GOV_ISSUED_ID_CARD
        - STANDARD_OPERATING_PROCEDURE
        - BRAND_LOGO
        - SUPPORT_CONTACT
        - LEGAL_DOCUMENTS
        - EVIDENCE
        - BULK_PARTY
        - DRIVERS_LICENSE
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
    DocumentRequestId:
      description: Unique Document Request identifier.
      type: string
      maxLength: 10
    DocumentRequestRequirement:
      type: object
      properties:
        documentTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentTypeSmbdo"
          minItems: 1
          maxItems: 100
        level:
          type: string
          enum:
            - PRIMARY
            - SECONDARY
        minRequired:
          type: integer
          default: 1
          maximum: 10
          minimum: 1
      required:
        - documentTypes
    ProfileStatus:
      type: string
      enum:
        - NEW
        - REVIEW_IN_PROGRESS
        - INFORMATION_REQUESTED
        - APPROVED
        - DECLINED
        - SUSPENDED
        - TERMINATED
    PartyStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    ValidationStatus:
      type: string
      description: |
        Status of a party validation. Missing fields result in `NEEDS_INFO`.
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - NOT_VALIDATED
        - NEEDS_INFO
        - NEEDS_REVIEW
        - VALIDATED
    ValidationType:
      type: string
      enum:
        - ENTITY_VALIDATION
    PartyField:
      description: A party field. It refers to either a missing field or a field that needs to be updated.
      type: object
      properties:
        name:
          type: string
          description: Name of the field.
          example: addresses
        type:
          type: string
          description: Type of the field.
          example: address
        displayName:
          type: string
          description: Display name of the field.
    ValidationResponse:
      description: List of validation info.
      type: array
      items:
        type: object
        properties:
          validationStatus:
            $ref: "#/components/schemas/ValidationStatus"
          validationType:
            $ref: "#/components/schemas/ValidationType"
          comments:
            type: string
            description: Comments/basic response related to the workflow step of validation response.
          fields:
            type: array
            items:
              $ref: "#/components/schemas/PartyField"
            minItems: 0
            maxItems: 100
          identities:
            type: array
            items:
              type: string
            minItems: 0
            maxItems: 10
          documentRequestIds:
            type: array
            items:
              type: string
              maxLength: 10
              description: The id of the document request.
            minItems: 0
            maxItems: 10
      minItems: 0
      maxItems: 10
    PartyResponse:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        id:
          $ref: "#/components/schemas/PartyId"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        parentExternalId:
          $ref: "#/components/schemas/ExternalId"
        profileStatus:
          $ref: "#/components/schemas/ProfileStatus"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 0
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
        validationResponse:
          $ref: "#/components/schemas/ValidationResponse"
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
        networkRegistration:
          $ref: '#/components/schemas/NetworkRegistration'
    ResponseValueList:
      description: |
        The values of a question response. Each item is a string that will be validated according to the question's responseSchema.
      type: array
      items:
        type: string
      minItems: 1
      maxItems: 20
    Attestation:
      type: object
      properties:
        attesterFullName:
          description: The full name of an individual.
          type: string
        attestationTime:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        documentId:
          $ref: "#/components/schemas/DocumentId"
        ipAddress:
          description: IPv4 Address.
          type: string
          format: ipv4
    DocumentId:
      description: |
        The unique id generated by the system for the uploaded document,  which can be used for future retrieval.
      type: string
      format: uuid
      example: abcd1c1d-6635-43ff-a8e5-b252926bddef
    DocumentIdList:
      description: A list of document IDs.
      type: array
      items:
        $ref: "#/components/schemas/DocumentId"
      minItems: 0
      maxItems: 10
    DocumentRequestIdList:
      description: A list of document request IDs.
      type: array
      items:
        example: "1000001"
        type: string
        maxLength: 10
      minItems: 0
      maxItems: 10
    QuestionResponse:
      description: The client's response to a question.
      type: object
      properties:
        questionId:
          example: "30001"
          type: string
          maxLength: 10
        values:
          $ref: "#/components/schemas/ResponseValueList"
    QuestionIdList:
      description: A list of question IDs.
      type: array
      items:
        example: "30001"
        type: string
        maxLength: 10
      minItems: 0
      maxItems: 200
    PartyIdList:
      description: A list of party IDs.
      type: array
      items:
        $ref: "#/components/schemas/PartyId"
      minItems: 0
      maxItems: 10
    PartyRoleList:
      description: A list of party roles.
      type: array
      items:
        type: string
        enum:
          - AUTHORIZED_USER
          - BENEFICIAL_OWNER
          - CLIENT
          - CONTROLLER
          - DECISION_MAKER
          - PRIMARY_CONTACT
      minItems: 0
      maxItems: 10
    ClientProduct:
      description: A product available for a client in a jurisdiction.
      type: string
    ProductList:
      description: A list of product selections.
      type: array
      items:
        $ref: "#/components/schemas/ClientProduct"
      minItems: 1
      maxItems: 50
    ClientSummaryResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ClientId"
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
        outstanding:
          type: object
          properties:
            attestationDocumentIds:
              $ref: "#/components/schemas/DocumentIdList"
            documentRequestIds:
              $ref: "#/components/schemas/DocumentRequestIdList"
            questionIds:
              $ref: "#/components/schemas/QuestionIdList"
            partyIds:
              $ref: "#/components/schemas/PartyIdList"
            partyRoles:
              $ref: "#/components/schemas/PartyRoleList"
        status:
          $ref: "#/components/schemas/ClientStatus"
      required:
        - id
        - partyId
        - products
        - outstanding
        - status
    ClientListResponse:
      description: Collection of clients.
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        clients:
          type: array
          items:
            $ref: "#/components/schemas/ClientSummaryResponse"
          minItems: 0
          maxItems: 100
      required:
        - metadata
        - clients
    CreatePartyRequestInlineRequired:
      description: Create a party within the clients payload.
      allOf:
        - $ref: "#/components/schemas/CreatePartyRequestInline"
      required:
        - partyType
        - roles
    CreateClientRequestSmbdo:
      type: object
      properties:
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 1
          maxItems: 10
        parties:
          type: array
          items:
            $ref: "#/components/schemas/CreatePartyRequestInlineRequired"
          minItems: 1
          maxItems: 10
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
      required:
        - products
    ClientResponse:
      title: OnboardingClientResponse
      type: object
      properties:
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 0
          maxItems: 10
        id:
          $ref: "#/components/schemas/ClientId"
        parties:
          type: array
          items:
            $ref: "#/components/schemas/PartyResponse"
          minItems: 0
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
        outstanding:
          type: object
          properties:
            attestationDocumentIds:
              $ref: "#/components/schemas/DocumentIdList"
            documentRequestIds:
              $ref: "#/components/schemas/DocumentRequestIdList"
            questionIds:
              $ref: "#/components/schemas/QuestionIdList"
            partyIds:
              $ref: "#/components/schemas/PartyIdList"
            partyRoles:
              $ref: "#/components/schemas/PartyRoleList"
        questionResponses:
          type: array
          items:
            $ref: "#/components/schemas/QuestionResponse"
          minItems: 0
          maxItems: 200
        status:
          $ref: "#/components/schemas/ClientStatus"
      required:
        - id
        - partyId
        - products
        - outstanding
        - status
    CreatePartyRequestInline:
      title: InlinePartyRequest
      description: Create a party within the clients payload.
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetailsRequired"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetailsRequired"
    UpdatePartyRequestInline:
      title: InlinePartyUpdateRequest
      description: Update a party inline within the clients API by supplying its ID.
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        id:
          $ref: "#/components/schemas/PartyId"
        email:
          $ref: "#/components/schemas/Email"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
    AttestationRemoval:
      title: AttestationRemoval
      description: Describes which attestation to remove. An existing attestation with a matching `documentId` will be removed.
      type: object
      properties:
        documentId:
          $ref: "#/components/schemas/DocumentId"
      required:
        - documentId
    UpdateClientRequestSmbdo:
      title: UpdateClientRequestSmbdo
      type: object
      properties:
        addAttestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 1
          maxItems: 10
        addProducts:
          $ref: "#/components/schemas/ProductList"
        addParties:
          description: |
            Update a party by specifying its ID in the object. Create a party by setting `parentPartyId` to the client's root party. `partyType` and `roles` are required when creating a new party.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/CreatePartyRequestInline"
              - $ref: "#/components/schemas/UpdatePartyRequestInline"
          minItems: 0
          minLength: 1
          maxLength: 10
        questionResponses:
          type: array
          items:
            $ref: "#/components/schemas/QuestionResponse"
          minItems: 0
          maxItems: 200
        removeAttestations:
          type: array
          items:
            $ref: "#/components/schemas/AttestationRemoval"
          minItems: 1
          maxItems: 10
    Name:
      title: PartyName
      type: string
      minLength: 1
      maxLength: 500
      description: The name of the party. A party can be an individual or an organization.
    PartySummaryResponse:
      type: object
      properties:
        country:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        externalId:
          $ref: "#/components/schemas/ExternalId"
        id:
          $ref: "#/components/schemas/PartyId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        profileStatus:
          $ref: "#/components/schemas/ProfileStatus"
        name:
          $ref: "#/components/schemas/Name"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 0
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
    PartyListResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        parties:
          type: array
          items:
            $ref: "#/components/schemas/PartySummaryResponse"
          minItems: 0
          maxItems: 100
    CreatePartyRequest:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        parentExternalId:
          $ref: "#/components/schemas/ExternalId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetailsRequired"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetailsRequired"
        networkRegistration:
          $ref: "#/components/schemas/NetworkRegistration"
      required:
        - partyType
        - roles
    UpdatePartyRequest:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
        networkRegistration:
          $ref: "#/components/schemas/NetworkRegistration"
    BirthDate:
      type: string
      example: 1983-02-08
      description: |
        The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.
    CountryCodeIsoAlpha2:
      type: string
      example: US
      description: Country code in ISO alpha-2 format.
      minLength: 2
      maxLength: 2
    FirstName:
      type: string
      minLength: 2
      maxLength: 30
      example: Lenna
      description: |
        First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
    MiddleName:
      type: string
      maxLength: 30
      example: More
      description: |
        Middle name of the individual in case of party type being an individual.
    LastName:
      type: string
      minLength: 2
      maxLength: 30
      example: Paprocki
      description: |
        Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
    NameSuffix:
      type: string
      minLength: 1
      maxLength: 5
      description: The name suffix used by the party
    IndividualIdentityDTO:
      title: IndividualIdentity
      type: object
      required:
        - idType
        - value
        - issuer
      properties:
        description:
          description: Description of the ID.
          type: string
        expiryDate:
          type: string
          format: date
        idType:
          type: string
          example: SSN
          enum:
            - SSN
            - ITIN
          description: |
            `idType` denotes the type of taxpayer identification number (e.g. Social Security Number or Individual Taxpayer Identification Number). A Social Security Number or Individual Taxpayer Identification Number is accepted for an owner or controller individual. Decision makers do not require any tax identifier.
        issuer:
          type: string
          example: US
          description: Identification issuer country code e.g. US
        value:
          type: string
          example: "999999999"
          description: Value of the identification type. EIN/SSN/ITIN must be of 9 digits.
          minLength: 1
          maxLength: 20
    IndividualJobTitle:
      type: string
      example: CEO
      description: |
        Job title in the case of party type being an `INDIVIDUAL`. Job title is a required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other
    IndividualJobTitleDescription:
      type: string
      example: Acting CEO
      maxLength: 50
      description: |
        If `jobTitle` is Other, then job title description is required.
    PhoneSmbdo:
      type: object
      required:
        - phoneType
        - countryCode
        - phoneNumber
      properties:
        phoneType:
          type: string
          enum:
            - BUSINESS_PHONE
            - MOBILE_PHONE
            - ALTERNATE_PHONE
        countryCode:
          type: string
          example: "+1"
        phoneNumber:
          type: string
          example: "7785462944"
      description: |
        Phone Number Information of the account
    NatureOfOwnership:
      type: string
      example: Direct
      description: |
        Nature of ownership e.g. Direct|Indirect
    SoleOwner:
      type: boolean
    IndividualDetails:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/AddressDtoSmbdo"
          minItems: 1
          maxItems: 5
        birthDate:
          $ref: "#/components/schemas/BirthDate"
        countryOfResidence:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        firstName:
          $ref: "#/components/schemas/FirstName"
        middleName:
          $ref: "#/components/schemas/MiddleName"
        lastName:
          $ref: "#/components/schemas/LastName"
        nameSuffix:
          $ref: "#/components/schemas/NameSuffix"
        individualIds:
          title: IndividualIds
          type: array
          items:
            $ref: "#/components/schemas/IndividualIdentityDTO"
          minItems: 0
          maxItems: 16
        jobTitle:
          $ref: "#/components/schemas/IndividualJobTitle"
        jobTitleDescription:
          $ref: "#/components/schemas/IndividualJobTitleDescription"
        phone:
          $ref: "#/components/schemas/PhoneSmbdo"
        natureOfOwnership:
          $ref: "#/components/schemas/NatureOfOwnership"
        soleOwner:
          $ref: "#/components/schemas/SoleOwner"
    IndividualDetailsRequired:
      allOf:
        - $ref: "#/components/schemas/IndividualDetails"
      required:
        - firstName
        - lastName
    DbaName:
      type: string
      minLength: 1
      maxLength: 100
    EntitiesInOwnership:
      description: |
        Entities in ownership means that one or more businesses own part of the business connected to the client. Always required for a Privately Owned Business.
      type: boolean
    OrganizationIndustryCategory:
      type: string
      example: Accommodation and Food Services
      description: |
        The industry category of the business connected to the client. For example, Accommodation and Food Services.
    OrganizationIndustryType:
      type: string
      example: Bed And Breakfast Inns
      description: |
        The industry type of the business connected to the client.
    OrganizationName:
      type: string
      example: Feltz Printing Service
      description: |
        The organization’s legal name. It is the official name of the person or entity that owns a company. Must be the name used on the legal party's government forms and business paperwork
    OrganizationDescription:
      type: string
      example: Printing Service of New York
      description: |
        The organization’s description.
    OrganizationType:
      type: string
      enum:
        - LIMITED_LIABILITY_COMPANY
        - C_CORPORATION
        - S_CORPORATION
        - PARTNERSHIP
        - PUBLICLY_TRADED_COMPANY
        - NON_PROFIT_CORPORATION
        - GOVERNMENT_ENTITY
        - SOLE_PROPRIETORSHIP
        - UNINCORPORATED_ASSOCIATION
    OrganizationIdentityDto:
      title: OrganizationIdentity
      type: object
      description: The tax ID of the organization.
      properties:
        description:
          description: Description of the ID.
          type: string
        idType:
          description: The ID type
          type: string
          enum:
            - EIN
            - BUSINESS_REGISTRATION_ID
        value:
          description: ID value
          type: string
          minLength: 1
          maxLength: 100
        issuer:
          type: string
          description: Issuing authority
          minLength: 1
          maxLength: 500
        expiryDate:
          type: string
          format: date
      required:
        - idType
        - value
        - issuer
    SignificantOwnership:
      description: |
        Significant ownership means there individuals who own 25% or more of the client's business. Always required for a Privately Owned Business. If Significant Ownership is selected as `true`, at least one related party should have the role of owner.
      type: boolean
    TradeOverInternet:
      type: boolean
    Website:
      type: string
      description: Name/URL of the website
      minLength: 1
      maxLength: 500
      example: https://example.com
    WebsiteAvailable:
      description: Whether the party has a website. False if opted out.
      type: boolean
    YearOfFormation:
      description: Year of company formation.
      type: string
      pattern: \d{4}
      minLength: 4
      maxLength: 4
    OrganizationDetails:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/AddressDtoSmbdo"
          minItems: 1
          maxItems: 5
        associatedCountries:
          type: array
          items:
            $ref: "#/components/schemas/CountryCodeIsoAlpha2"
          minItems: 0
          maxItems: 100
        countryOfFormation:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        dbaName:
          $ref: "#/components/schemas/DbaName"
        entitiesInOwnership:
          $ref: "#/components/schemas/EntitiesInOwnership"
        industryCategory:
          $ref: "#/components/schemas/OrganizationIndustryCategory"
        industryType:
          $ref: "#/components/schemas/OrganizationIndustryType"
        jurisdiction:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        organizationName:
          $ref: "#/components/schemas/OrganizationName"
        organizationDescription:
          $ref: "#/components/schemas/OrganizationDescription"
        organizationType:
          $ref: "#/components/schemas/OrganizationType"
        organizationIds:
          title: OrganizationIds
          type: array
          items:
            $ref: "#/components/schemas/OrganizationIdentityDto"
          minItems: 0
          maxItems: 6
        phone:
          $ref: "#/components/schemas/PhoneSmbdo"
        significantOwnership:
          $ref: "#/components/schemas/SignificantOwnership"
        tradeOverInternet:
          $ref: "#/components/schemas/TradeOverInternet"
        website:
          $ref: "#/components/schemas/Website"
        websiteAvailable:
          $ref: "#/components/schemas/WebsiteAvailable"
        yearOfFormation:
          $ref: "#/components/schemas/YearOfFormation"
        mcc:
          $ref: "#/components/schemas/MCC"
        secondaryMccList:
          type: array
          description: The list of additional merchant category codes describing industries that the business is in.
          items:
            $ref: "#/components/schemas/MCC"
          minItems: 0
          maxItems: 50
    OrganizationDetailsRequired:
      allOf:
        - $ref: "#/components/schemas/OrganizationDetails"
      required:
        - organizationName
        - organizationType
    DocumentRequestStatus:
      type: string
      enum:
        - ACTIVE
        - CLOSED
        - EXPIRED
    ValidForDays:
      type: integer
      description: Number of days from the day of its creation that this request will expire.
      example: 5
      minimum: 1
      maximum: 180
    DocumentRequestResponse:
      type: object
      properties:
        clientId:
          $ref: "#/components/schemas/ClientId"
        country:
          $ref: "#/components/schemas/CountryCodeSmbdo"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        documentType:
          $ref: "#/components/schemas/DocumentTypeSmbdo"
        id:
          $ref: "#/components/schemas/DocumentRequestId"
        partyId:
          $ref: "#/components/schemas/PartyId"
        requirements:
          description: Any one requirement must be fulfilled.
          type: array
          items:
            $ref: "#/components/schemas/DocumentRequestRequirement"
          minItems: 1
          maxItems: 10
        status:
          $ref: "#/components/schemas/DocumentRequestStatus"
        updatedAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        validForDays:
          $ref: "#/components/schemas/ValidForDays"
    schemas-DocumentTypeSmbdo:
      type: string
      description: Supported document types
      enum:
        - TERMS_CONDITIONS
        - DISCLOSURE_AND_CONSENT
        - JPMC_DISCLOSURE
        - PASSPORT
        - EIN
        - SSN_CARD
        - GOV_ISSUED_ID_CARD
        - STANDARD_OPERATING_PROCEDURE
        - BRAND_LOGO
        - SUPPORT_CONTACT
        - LEGAL_DOCUMENTS
        - EVIDENCE
        - BULK_PARTY
        - DRIVERS_LICENSE
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
    DocumentMetadataKeyEnum:
      type: string
      enum:
        - DOCUMENT_REQUEST_ID
        - PARTY_ID
        - FILE_EXTENSION
        - COUNTRY
        - STATUS
        - UPLOAD_TIME
        - UPLOADED_FILE_NAME
      example: DOCUMENT_REQUEST_ID
    DocumentMetadataSmbdo:
      type: object
      properties:
        key:
          $ref: "#/components/schemas/DocumentMetadataKeyEnum"
        value:
          type: string
          example: 73bd1c1d-6635-43ff-a8e5-b252926bdd9e
    LocaleId:
      description: The identifier for a language and location.
      type: string
      example: en-US
    ContentItem:
      description: Content displayed to a user for a given locale.
      type: object
      properties:
        description:
          type: string
        label:
          description: Exact text to be displayed to a user.
          type: string
        locale:
          $ref: "#/components/schemas/LocaleId"
      required:
        - label
        - locale
    QuestionDescription:
      description: A description of the question.
      example: Individuals must additionally provide info regarding cash flow.
      type: string
    QuestionId:
      description: The ID uniquely identifying a question.
      type: string
      maxLength: 10
      example: "30024"
    ResponseSchemaItem:
      description: A limited subset of JSON Schema used to validate the response value items.
      type: object
      properties:
        type:
          type: string
          enum:
            - boolean
            - string
            - number
            - integer
        minimum:
          type: number
        maximum:
          type: number
        exclusiveMinimum:
          type: boolean
        exclusiveMaximum:
          type: boolean
        minLength:
          type: integer
        maxLength:
          type: integer
        format:
          description: Only applicable to string, number, and integer.
          type: string
          enum:
            - float
            - double
            - int32
            - int64
            - date
        pattern:
          description: Only applicable to string.
          type: string
    AnyValuesMatch:
      description: Describes the answer value that would require dependent questions.
      type: string
      maxLength: 255
      example: "true"
    schemas-QuestionIdList:
      description: A list of question IDs.
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/QuestionId"
      minItems: 1
      maxItems: 100
    ResponseSchema:
      description: A subset of JSON Schema used to validate the response values.
      type: object
      properties:
        type:
          type: string
          enum:
            - array
        minItems:
          type: integer
        maxItems:
          type: integer
        items:
          $ref: "#/components/schemas/ResponseSchemaItem"
      example:
        type: array
        items:
          type: boolean
        minItems: 1
        maxItems: 1
    schemas-DocumentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        documentType:
          $ref: "#/components/schemas/schemas-DocumentTypeSmbdo"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadataSmbdo"
          minItems: 0
          maxItems: 50
      required:
        - id
        - documentType
        - metadata
    DocumentRequestListResponse:
      type: object
      properties:
        documentRequests:
          type: array
          items:
            $ref: "#/components/schemas/DocumentRequestResponse"
          minItems: 0
          maxItems: 100
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
      required:
        - documentRequests
        - metadata
    ListDocumentsResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        documentDetails:
          type: array
          items:
            $ref: "#/components/schemas/schemas-DocumentResponse"
          minItems: 0
          maxItems: 100
    QuestionListResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/schemas-QuestionResponse"
          minItems: 0
          maxItems: 100
    schemas-QuestionResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ContentItem"
          minItems: 1
          maxItems: 50
        defaultLocale:
          $ref: "#/components/schemas/LocaleId"
        description:
          $ref: "#/components/schemas/QuestionDescription"
        id:
          $ref: "#/components/schemas/QuestionId"
        parentQuestionId:
          $ref: "#/components/schemas/QuestionId"
        responseSchema:
          $ref: "#/components/schemas/ResponseSchema"
        subQuestions:
          type: array
          items:
            type: object
            properties:
              anyValuesMatch:
                $ref: "#/components/schemas/AnyValuesMatch"
              questionIds:
                $ref: "#/components/schemas/schemas-QuestionIdList"
          minItems: 0
    DocumentUploadDataSmbdo:
      type: object
      properties:
        documentType:
          $ref: "#/components/schemas/schemas-DocumentTypeSmbdo"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadataSmbdo"
          minItems: 0
          maxItems: 50
      required:
        - documentType
        - metadata
    NetworkRegistration:
      type: object
      properties:
        settlementPaymentMethods:
          type: array
          items:
            $ref: '#/components/schemas/SettlementPaymentMethods'
          minItems: 0
          maxItems: 5
        settlementPaymentMethodsOptOut:
          description: Required to specify true if the merchant is not selecting any settlement payment method.
          type: boolean
        visaDebitAcceptance:
          $ref: '#/components/schemas/VisaDebitAcceptance'
        currencyCode:
          $ref: '#/components/schemas/NetworkRegistrationCurrencyCode'
        transactionDeviceType:
          $ref: '#/components/schemas/TransactionDeviceType'
        serviceEstablishmentStatus:
          $ref: '#/components/schemas/ServiceEstablishmentStatus'
        serviceEstablishmentStatusUpdateDate:
          description: The last update date of the service establishment status. Required if the service establishment status is provided.
          type: string
          format: date
    SettlementPaymentMethods:
      type: string
      description: The selection of method of payments used in network registration.
      enum:
        - VISA
        - AMEX_OPT_BLUE
        - DISCOVER
    VisaDebitAcceptance:
      type: string
      description: The type of Visa debit card acceptance. Required when VISA is selected.
      enum:
        - DEBIT_NOT_ACCEPTED
        - DEBIT_ACCEPTED_CARD_PRESENT
        - DEBIT_ACCEPTED_CARD_NOT_PRESENT
        - DEBIT_ACCEPTED_ALL
    TransactionDeviceType:
      type: string
      description: The mechanism used to provide details at the merchant's terminal for transactions. Required when DISCOVER is selected.
      enum:
        - HOST_BASED_POS_DEVICE
        - TERMINAL_BASED_POS_DEVICE
        - SOFTWARE_POS_DEVICE
        - ALL_OTHER_POS_DEVICES
        - UNKNOWN
    ServiceEstablishmentStatus:
      type: string
      description: The American Express status code for the merchant if they are terminated or reinstated.
      enum:
        - D_CANCELLED
        - N_CANCELLED
        - R_REINSTATED
    NetworkRegistrationCurrencyCode:
      description: The merchant's preferred currency for transactions.
      type: string
      enum:
        - GBP
        - USD
        - CAD
        - EUR
    MCC:
      type: string
      description: The merchant category code describing the merchant's industry.
      minLength: 4
      maxLength: 4
  # PARAMETERS
  parameters:
    clientIdQuery:
      name: clientId
      in: query
      description: Unique Client identifier.
      required: false
      example: "9000000555"
      schema:
        type: string
        maxLength: 10
    partyIdQuery:
      name: partyId
      in: query
      description: Unique Party identifier.
      required: false
      example: "2000000555"
      schema:
        type: string
        maxLength: 10
    platformIdInQuery:
      name: platformId
      in: query
      description: Unique identifier for the platform.
      required: false
      example: "1000000000"
      schema:
        type: string
        maxLength: 10
    questionIdListInQuery:
      name: questionIds
      in: query
      description: Comma-separated list of Question IDs.
      example: 30001,30002,30003
      required: false
      schema:
        type: string
        pattern: ^[0-9]{1,19}(,[0-9]{1,19})*$
        maxLength: 4096
    clientId:
      name: client_id
      in: header
      description: Unique identifier for a client.
      required: false
      example: "0030000131"
      schema:
        type: string
        pattern: ^\d{10}$
    clientIdInQuery:
      name: clientId
      in: query
      description: Unique Client identifier
      required: false
      example: "9000000001"
      schema:
        type: string
        maxLength: 10
    token:
      name: token
      in: header
      description: JWT Client token
      required: false
      schema:
        type: string
    pageSize:
      name: limit
      in: query
      description: Number of records per page.
      schema:
        type: integer
        minimum: 1
        maximum: 25
        default: 25
    parentPartyId:
      name: parentPartyId
      in: query
      description: ID of the parent party.
      required: false
      schema:
        type: string
        maxLength: 10
      example: "2000000555"
    pageNo:
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        default: 0
        minimum: 0

  #RESPONSES
  responses:
    responses-400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Invalid Data
            httpStatus: 400
            context:
              - message: Client with ID [3000009010] does not exist.
                location: BODY
                field: clientId
    responses-401:
      description: Unauthenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unauthorized
            httpStatus: 401
            context:
              - message: Provided token does not follow required JWT format. It may also be missing mandatory parts
    responses-403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Forbidden
            httpStatus: 403
            context:
              - message: Platform is not authorized to access client.
    responses-404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Not Found
            httpStatus: 404
            context:
              - message: Party with ID [2000000555] not found.
    "422":
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unprocessable Entity
            httpStatus: 422
            context:
              - message: Unable to perform Client verifications for ID [1000010403] due to its status.
    responses-500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Internal Server Error
            httpStatus: 500
            context:
              - message: Something went wrong. Please try again later.
    responses-503:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Service Unavailable
            httpStatus: 503
            context:
              - message: The server encountered an unexpected condition that prevented it from fulfilling the request.
  examples:
    ListDocumentsRes:
      summary: List of document details
      description: A list of document details
      value:
        metadata:
          page: 0
          limit: 30
          total: 1
        documentDetails:
          - id: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            documentType: TERMS_CONDITIONS
            metadata:
              - key: DOCUMENT_REQUEST_ID
                value: "3000001"
    DocumentRequestDriversLicenseUs:
      summary: Get document request - US driver's license
      description: Get document request - US driver's license
      value:
        id: "3000001"
        country: US
        createdAt: 2022-11-18T12:28:11.232Z
        requirements:
          - documentTypes:
              - DRIVERS_LICENSE
            level: PRIMARY
            minRequired: 1
        partyId: "2000000111"
        status: ACTIVE
        updatedAt: 2022-11-18T12:28:11.232Z
        validForDays: 5
    DocumentRequestListResponse:
      summary: List of document requests
      description: A list of document requests
      value:
        documentRequests:
          - id: "50006"
            country: US
            createdAt: 2022-11-18T12:28:11.232Z
            requirements:
              - documentTypes:
                  - DRIVERS_LICENSE
                level: PRIMARY
                minRequired: 1
            partyId: "2000000444"
            status: ACTIVE
            updatedAt: 2022-11-18T12:28:11.232Z
            validForDays: 5
        metadata:
          page: 0
          limit: 25
          total: 1
    DependentQuestionResponse:
      summary: Dependent question
      description: The response data for a dependent question
      value:
        content:
          - label: Will you perform cash transactions?
            description: Individuals must additionally provide info regarding cash flow.
            locale: en-US
        defaultLocale: en-US
        description: Individuals must additionally provide info regarding cash flow.
        id: "300001"
        responseSchema:
          type: array
          items:
            type: boolean
          minItems: 1
          maxItems: 1
        subQuestions:
          - anyValuesMatch: "true"
            questionIds:
              - "300002"
    QuestionResponse:
      summary: Question response
      description: The response data for a question
      value:
        content:
          - label: Will you perform cash transactions?
            description: Individuals must additionally provide info regarding cash flow.
            locale: en-US
        defaultLocale: en-US
        description: Individuals must additionally provide info regarding cash flow.
        id: "300001"
        responseSchema:
          type: array
          items:
            type: boolean
          minItems: 1
          maxItems: 1
        subQuestions:
          - anyValuesMatch: "true"
            questionIds:
              - "300002"
    QuestionListResponse:
      summary: List of questions
      description: A list of due diligence questions
      value:
        questions:
          - content:
              - label: Will you perform cash transactions?
                description: Individuals must additionally provide info regarding cash flow.
                locale: en-US
            defaultLocale: en-US
            description: Individuals must additionally provide info regarding cash flow.
            id: "300001"
            responseSchema:
              type: array
              items:
                type: boolean
              minItems: 1
              maxItems: 1
            subQuestions:
              - anyValuesMatch: "true"
                questionIds:
                  - "300002"
          - content:
              - label: If yes, will they exceed US$xx in aggregate on a monthly basis?
                description: Individuals must additionally provide info regarding cash flow.
                locale: en-US
            defaultLocale: en-US
            description: Individuals must additionally provide info regarding cash flow.
            id: "300002"
            responseSchema:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 1
            subQuestions: [ ]
          - content:
              - label: "Purpose of the account(s):"
                description: The purpose of the account(s) must be provided.
                locale: en-US
            defaultLocale: en-US
            description: The purpose of the account(s) must be provided.
            id: "300003"
            responseSchema:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 1
            subQuestions: [ ]
        metadata:
          page: 0
          limit: 25
          total: 3
    OrganizationPartyResponse:
      summary: Organization party client Response
      description: The organization party response representing a client as a parent party
      value:
        access: []
        id: "2000000111"
        createdAt: "2023-11-27T20:46:10.145Z"
        email: "monica@cpgetaways.com"
        externalId: "TCU1234"
        partyType: "ORGANIZATION"
        profileStatus: "APPROVED"
        roles:
          - "CLIENT"
        status: "ACTIVE"
        organizationDetails:
          addresses:
            - addressType: "BUSINESS_ADDRESS"
              addressLines:
                - "90 Bedford Street"
                - "Apt 2E"
              city: "New York"
              state: "NY"
              postalCode: "10014"
              country: "US"
          countryOfFormation: "US"
          dbaName: "CP Getaways"
          entitiesInOwnership: false
          industryCategory: "Accommodation and Food Services"
          industryType: "All Other Traveler Accommodation"
          organizationName: "Central Park Getaways"
          organizationDescription: "Relax, unwind and experience the comforting charm of our\
            \ apartment while exploring New York"
          organizationType: "SOLE_PROPRIETORSHIP"
          organizationIds:
            - idType: "EIN"
              value: "00-0000001"
              issuer: "US"
          phone:
            phoneType: "BUSINESS_PHONE"
            countryCode: "+1"
            phoneNumber: "6316215110"
          significantOwnership: true
          websiteAvailable: false
          yearOfFormation: "2023"
        networkRegistration:
          settlementPaymentMethods: [ "VISA", "AMEX_OPT_BLUE", "DISCOVER" ]
          settlementPaymentMethodsOptOut: true
          visaDebitAcceptance: "DEBIT_NOT_ACCEPTED"
          currencyCode: "USD"
          transactionDeviceType: "HOST_BASED_POS_DEVICE"
          serviceEstablishmentStatus: "D_CANCELLED"
          serviceEstablishmentStatusUpdateDate: "2023-12-13"
    ClientListResponse:
      summary: List of clients
      description: Retrieve list of clients.
      value:
        metadata:
          page: 0
          limit: 25
          total: 4
        clients:
          - id: "1000010400"
            partyId: "2000000111"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: [ ]
              documentRequestIds: [ ]
              partyIds: [ ]
              partyRoles: [ ]
              questionIds: [ ]
            status: APPROVED
          - id: "1000010401"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds:
                - 851e9279-f619-4069-893b-d6902db9c68b
              documentRequestIds: [ ]
              partyIds: [ ]
              partyRoles: [ ]
              questionIds:
                - "300001"
                - "300002"
                - "300003"
            status: NEW
          - id: "1000010402"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: [ ]
              documentRequestIds: [ ]
              partyIds: [ ]
              partyRoles: [ ]
              questionIds: [ ]
            status: REVIEW_IN_PROGRESS
          - id: "1000010403"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: [ ]
              documentRequestIds:
                - "50006"
              partyIds: [ ]
              partyRoles: [ ]
              questionIds: [ ]
            status: INFORMATION_REQUESTED
    CreateClient:
      summary: Create a Client
      description: Create a Client
      value:
        parties:
          - partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            organizationDetails:
              organizationName: Central Park Getaways
              organizationType: SOLE_PROPRIETORSHIP
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              countryOfFormation: US
              yearOfFormation: "2023"
              dbaName: CP Getaways
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                phoneNumber: "6316215110"
                countryCode: US
              organizationIds:
                - idType: EIN
                  value: 00-0000001
                  issuer: US
              websiteAvailable: false
          - partyType: INDIVIDUAL
            externalId: TCU12344
            email: monicagellar@gmail.com
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        products:
          - EMBEDDED_PAYMENTS
    CreateClientResponse:
      summary: Create Client
      description: Create Client response with outstanding attestations, party roles, and questions.
      value:
        id: "1000010400"
        attestations: [ ]
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: NEW
            status: ACTIVE
            createdAt: 2023-10-31T00:02:15.499Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              yearOfFormation: "2023"
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monicagellar@gmail.com
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            profileStatus: NEW
            status: ACTIVE
            createdAt: 2023-10-31T00:02:15.499Z
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds:
            - 62d29548-f55a-458e-b9bb-ed32a6a05a1b
          documentRequestIds: [ ]
          partyIds: [ ]
          partyRoles: [ ]
          questionIds:
            - "300001"
            - "300002"
            - "300003"
        questionResponses: [ ]
        status: NEW
    GetClientResponse:
      summary: Get client By id
      description: Get client By id
      value:
        id: "1000010400"
        attestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T12:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:20:09.401Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              yearOfFormation: "2023"
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monica@cpgetaways.com
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:20:09.401Z
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds: [ ]
          documentRequestIds: [ ]
          partyIds: [ ]
          partyRoles: [ ]
          questionIds: [ ]
        questionResponses: [ ]
        status: APPROVED
    UpdateClient:
      summary: Update a client
      description: Update a client with attestations and question responses.
      value:
        addAttestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T17:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        questionResponses:
          - questionId: "300001"
            values:
              - US
          - questionId: "300002"
            values:
              - "true"
    UpdateClientResponse:
      summary: Update client
      description: Update client
      value:
        id: "1000010400"
        attestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T12:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:23:45.502Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monica@cpgetaways.com
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:23:45.502Z
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds: [ ]
          documentRequestIds: [ ]
          partyIds: [ ]
          partyRoles: [ ]
          questionIds: [ ]
        questionResponses:
          - questionId: "300001"
            value:
              - US
          - questionId: "300002"
            value:
              - "true"
          - questionId: "300003"
            value:
              - "true"
        status: APPROVED
    PartyListResponse:
      summary: List of parties
      description: A list of parties.
      value:
        parties:
          - country: US
            createdAt: 2023-10-31T10:19:03.505Z
            externalId: TCU1234
            partyType: ORGANIZATION
            id: "2000000111"
            profileStatus: APPROVED
            name: Monica Gellar
            roles:
              - CLIENT
            status: ACTIVE
          - country: US
            createdAt: 2023-10-31T10:19:03.505Z
            externalId: TCU12344
            id: "2000000112"
            parentPartyId: "2000000111"
            partyType: INDIVIDUAL
            profileStatus: APPROVED
            name: Monica Gellar
            roles:
              - BENEFICIAL_OWNER
              - CONTROLLER
            status: ACTIVE
        metadata:
          page: 0
          limit: 25
          total: 2
    UpdateOrganizationParty:
      summary: Update organization party
      description: Updates organization party
      value:
        organizationDetails:
          organizationType: SOLE_PROPRIETORSHIP
          organizationName: Central Park Getaways
          countryOfFormation: US
          jurisdiction: US
          websiteAvailable: false
          entitiesInOwnership: false
          significantOwnership: true
        email: monica1@cpgetaways.com
    CreateOrganizationParty:
      summary: Create organization party
      description: Creates an organization party
      value:
        partyType: ORGANIZATION
        externalId: TCU1234
        roles:
          - CLIENT
        email: monica@cpgetaways.com
        organizationDetails:
          organizationName: CP Getaways
          organizationType: SOLE_PROPRIETORSHIP
          organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
          countryOfFormation: US
          dbaName: CP Getaways
          industryCategory: Accommodation and Food Services
          industryType: All Other Traveler Accommodation
          significantOwnership: true
          entitiesInOwnership: false
          firstName: Monica
          lastName: Gellar
          addresses:
            - addressType: BUSINESS_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          phone:
            phoneType: BUSINESS_PHONE
            phoneNumber: "6316215110"
            countryCode: US
          organizationIds:
            - idType: EIN
              value: 00-0000001
              issuer: US
          jobTitle: CEO
          websiteAvailable: false
          soleOwner: true
        networkRegistration:
          settlementPaymentMethods: [ "VISA", "AMEX_OPT_BLUE", "DISCOVER" ]
          settlementPaymentMethodsOptOut: true
          visaDebitAcceptance: "DEBIT_NOT_ACCEPTED"
          currencyCode: "USD"
          transactionDeviceType: "HOST_BASED_POS_DEVICE"
          serviceEstablishmentStatus: "D_CANCELLED"
          serviceEstablishmentStatusUpdateDate: "2023-12-13"
    CreateIndividualParty:
      summary: Create individual party
      description: Creates an individual party
      value:
        parentPartyId: "2000000111"
        partyType: INDIVIDUAL
        externalId: TCU12344
        parentExternalId: TCU1234
        email: monicagellar@gmail.com
        roles:
          - BENEFICIAL_OWNER
          - CONTROLLER
        individualDetails:
          firstName: Monica
          lastName: Gellar
          birthDate: 1964-06-15
          countryOfResidence: US
          addresses:
            - addressType: RESIDENTIAL_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
          natureOfOwnership: Direct
          jobTitle: Other
          jobTitleDescription: CEO
          soleOwner: true
    IndividualPartyControllerResponse:
      summary: Individual party controller Response
      description: The individual party response representing a controller for its parent party
      value:
        access: []
        id: "2000000112"
        createdAt: "2023-11-27T20:42:20.873Z"
        email: "monicagellar@gmail.com"
        externalId: "TCU12344"
        partyType: "INDIVIDUAL"
        parentPartyId: "2000000111"
        parentExternalId: "TCU1234"
        profileStatus: "APPROVED"
        roles:
          - "BENEFICIAL_OWNER"
          - "CONTROLLER"
        status: "ACTIVE"
        individualDetails:
          addresses:
            - addressType: "RESIDENTIAL_ADDRESS"
              addressLines:
                - "90 Bedford Street"
                - "Apt 2E"
              city: "New York"
              state: "NY"
              postalCode: "10014"
              country: "US"
          countryOfResidence: "US"
          firstName: "Monica"
          lastName: "Gellar"
          individualIds:
            - idType: "SSN"
              issuer: "US"
              value: "100-01-0001"
          jobTitle: "Other"
          jobTitleDescription: "CEO"
          natureOfOwnership: "Direct"
          soleOwner: true
    UpdateIndividualParty:
      summary: Update individual party
      description: Updates individual party
      value:
        individualDetails:
          firstName: Monica
          middleName: ""
          lastName: Gellar
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
        email: monicagellar@gmail.com